{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.jpg","path":"img/icon_wechat.jpg","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/tag-bg.jpg","path":"img/tag-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/home-bg-o.jpg","path":"img/home-bg-o.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/hux-blog.css","path":"css/hux-blog.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/syntax.styl","path":"css/syntax.styl","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"83c2c6d587beaa967a976e5969d60fa97fcdbe55","modified":1466216495244},{"_id":"source/CNAME","hash":"3278c9d7d4882edeeac323f4c59d874c13a7fbc3","modified":1466216495244},{"_id":"themes/huxblog/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1466216495296},{"_id":"themes/huxblog/layout/archive.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466216495296},{"_id":"source/_posts/AndroidStudio_VS_eclipse.md","hash":"c112c2506f7ade75d234f2769f0257c760e71194","modified":1466216495244},{"_id":"source/_posts/AndroidStudio_shortcut_key.md","hash":"a35e848ff99e879aa882fdd0a1b60650a97ef705","modified":1466216495248},{"_id":"source/_posts/envsetup-sh的常用命令.md","hash":"1e65364be05d6653966f4b127379868b9d98c573","modified":1466216495280},{"_id":"source/_posts/envsetup_common_command.md","hash":"3e04689605ca456487b6a20d83373e9a9214426a","modified":1466216495280},{"_id":"source/about/index.md","hash":"efffab14a74920c4cd4646d2fa19fcc4aca4095a","modified":1466216495280},{"_id":"source/img/avatar.jpg","hash":"44988594e1a6bcdc2ba5e5a13a641b854f1959b1","modified":1466216495288},{"_id":"source/img/icon_wechat.jpg","hash":"2ef6b0c1e27e5697a4ab34f6562c0cae44b0c898","modified":1466216495296},{"_id":"source/tags/index.md","hash":"0bc541f4c6a0f21bec67b6717ee86226f0eddf39","modified":1466216495296},{"_id":"themes/huxblog/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1466216495296},{"_id":"themes/huxblog/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1466216495296},{"_id":"themes/huxblog/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1466216495296},{"_id":"themes/huxblog/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1466216495296},{"_id":"themes/huxblog/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1466216495296},{"_id":"themes/huxblog/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1466216495296},{"_id":"themes/huxblog/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1466216495296},{"_id":"themes/huxblog/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1466216495296},{"_id":"themes/huxblog/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1466216495296},{"_id":"themes/huxblog/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1466216495296},{"_id":"themes/huxblog/layout/about.ejs","hash":"7f56c71383ef6c156b56d79b3984e07cc466606a","modified":1466216495296},{"_id":"themes/huxblog/layout/index.ejs","hash":"e25cbd9e381fa473198b8edfbd735048926d3812","modified":1466216495296},{"_id":"themes/huxblog/layout/keynote.ejs","hash":"bb912b25576df8e8bc823dc640282a2d656cd703","modified":1466216008820},{"_id":"themes/huxblog/layout/layout.ejs","hash":"03e278a3b8bc4503183276b6130ac04a8d5b9865","modified":1466216495296},{"_id":"themes/huxblog/layout/page.ejs","hash":"f3046c2edce3be1d038269f8e7319b07c3a482f9","modified":1466216008828},{"_id":"themes/huxblog/layout/post.ejs","hash":"d0012d5d3fddaf7e4d8dfc52f6bb4ef82f973b1e","modified":1466216008836},{"_id":"themes/huxblog/layout/tags.ejs","hash":"a51bf2828af20939d702de1fdae067439a1153c0","modified":1466216495296},{"_id":"source/img/favicon.ico","hash":"5228c9322413d7f677d67685502b9efdfdc3b953","modified":1466216495292},{"_id":"source/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1466216495296},{"_id":"source/_posts/AndroidStudio_shortcut_key/01-highlight.gif","hash":"37549fd11fc845ff645d944c89d1851a903c9d07","modified":1466216495248},{"_id":"source/_posts/AndroidStudio_shortcut_key/05-quickdefinition.gif","hash":"f957bb5ffd41f83d1dd5dbb0bca615239cd9e132","modified":1466216495248},{"_id":"source/_posts/AndroidStudio_shortcut_key/06-codefolding.gif","hash":"1a0e34fca50e49b84c3da96fab2748b4212350e6","modified":1466216495248},{"_id":"source/_posts/AndroidStudio_shortcut_key/08-findaction.gif","hash":"dc22d7155601cba04a32d760c26d19570211145e","modified":1466216495252},{"_id":"source/_posts/AndroidStudio_shortcut_key/09-movelines.gif","hash":"b49af57e70b4a4f86172da75e797a5fc6c202892","modified":1466216495252},{"_id":"source/_posts/AndroidStudio_shortcut_key/10-deleteline.gif","hash":"be20980597f6cf38356fc8313902dda3bc4176de","modified":1466216495252},{"_id":"source/_posts/AndroidStudio_shortcut_key/11-duplicate_lines.gif","hash":"34fcaa4e84dca6da0c23bd9b5ccbd850bde040a0","modified":1466216495252},{"_id":"source/_posts/AndroidStudio_shortcut_key/12-expand_shrink_selection.gif","hash":"0c21407236f89283af4f9255cb4de5bbcf0490a0","modified":1466216495252},{"_id":"source/_posts/AndroidStudio_shortcut_key/13-surround_with.gif","hash":"fa49968f10f4fcc509dc8c470d008b5723069fe2","modified":1466216495252},{"_id":"source/_posts/AndroidStudio_shortcut_key/14-recents.gif","hash":"58ee2d99743fcd34cab010c699d7274f1004dafe","modified":1466216495252},{"_id":"source/_posts/AndroidStudio_shortcut_key/15-live_templates.gif","hash":"7f2f804937fd6c452c56f72187d1dc40aa30e74e","modified":1466216495252},{"_id":"source/_posts/AndroidStudio_shortcut_key/15-movemethods.gif","hash":"469b3a9f284770e034d6226969739881fc74afec","modified":1466216495252},{"_id":"source/_posts/AndroidStudio_shortcut_key/16-completestatement.gif","hash":"a7242a57ebe112b455e855f31c29193002f7ce03","modified":1466216495252},{"_id":"source/_posts/AndroidStudio_shortcut_key/17-navigate-previous-changes.gif","hash":"fa0a177b3593df9198ba97914276137a5ce397e7","modified":1466216495252},{"_id":"source/_posts/AndroidStudio_shortcut_key/18-joinlines.gif","hash":"7d8b08bac9789385a5a2bf4a328073ceb67b7bde","modified":1466216495252},{"_id":"source/_posts/AndroidStudio_shortcut_key/21-togglebreakpoints.gif","hash":"54ede77b801de23d19b8f9c9df9f612048898408","modified":1466216495252},{"_id":"source/_posts/AndroidStudio_shortcut_key/24-temporarybreakpoints.gif","hash":"ed0f0fd21f89e0787521b0c25c27fb4cd0caf4a1","modified":1466216495256},{"_id":"source/_posts/AndroidStudio_shortcut_key/32-multiselection.gif","hash":"1806b83d743a4af60c67dcdaa99cc990955526d6","modified":1466216495264},{"_id":"source/_posts/AndroidStudio_shortcut_key/33-postfixcompletion.gif","hash":"9c866ec339a1ebe31a6339abd6b48f2f62ec0b7f","modified":1466216495264},{"_id":"source/_posts/AndroidStudio_shortcut_key/37-vcspopup.gif","hash":"328c55f8b36a8610a0f1e0b7861391d7af45732a","modified":1466216495268},{"_id":"source/_posts/AndroidStudio_shortcut_key/39-navigatetoparent.gif","hash":"7e00455793140948441327aca8a27ab1fbc25c71","modified":1466216495268},{"_id":"source/_posts/AndroidStudio_shortcut_key/41-lasttoolwindow.gif","hash":"622c978f289f0b8c2916976c1108e1f7e81d2fc6","modified":1466216495268},{"_id":"source/_posts/AndroidStudio_shortcut_key/44-parameterinfo.gif","hash":"c1d6214e7ac75d6a7671f008925d0bb9e8dcdb1e","modified":1466216495272},{"_id":"source/_posts/AndroidStudio_shortcut_key/45-codecompletionentertab.gif","hash":"b364aaac2429dd58720d832053f7db4cfc470dec","modified":1466216495272},{"_id":"source/_posts/AndroidStudio_shortcut_key/47-contextinfo.gif","hash":"d587a809652100395df75136231ede55fcedc429","modified":1466216495276},{"_id":"source/_posts/AndroidStudio_shortcut_key/48-refactorthis.png","hash":"fb90d1f4118c437c3650e6c9c5f6740b17070de8","modified":1466216495276},{"_id":"source/_posts/AndroidStudio_shortcut_key/54-inline.gif","hash":"1aecd2c078b2eac2c17d59084e32d693ef3fc45a","modified":1466216495276},{"_id":"source/_posts/AndroidStudio_shortcut_key/55-rename.gif","hash":"34ef7726d642a33cd37c7afc9b22c50d34acd049","modified":1466216495276},{"_id":"source/_posts/AndroidStudio_shortcut_key/studio-debug-settings-icon.png","hash":"e968ecfabfd1a20bbedd0833875aa263f51a1af9","modified":1466216495280},{"_id":"source/_posts/AndroidStudio_shortcut_key/summary1.png","hash":"d34c48716ea4d67409b92913e66920087388c509","modified":1466216495280},{"_id":"source/_posts/AndroidStudio_shortcut_key/summary_2.png","hash":"7ca9dc1ead58b11e871df5f1c04beeb3bc5da689","modified":1466216495280},{"_id":"source/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1466216495292},{"_id":"themes/huxblog/layout/_partial/footer.ejs","hash":"f911065559ec533f2cbde63f5f2241943e3b3ecc","modified":1466216495296},{"_id":"themes/huxblog/layout/_partial/head.ejs","hash":"1affb397a5f08d4ab629c5431cce4df0c5480409","modified":1466216495296},{"_id":"themes/huxblog/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1466216495296},{"_id":"themes/huxblog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1466216495296},{"_id":"themes/huxblog/source/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1466216495296},{"_id":"themes/huxblog/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1466216495296},{"_id":"themes/huxblog/source/css/syntax.styl","hash":"f3f9ff0d1ebc4f7fa18d7e367b2ba2f0899adbd4","modified":1466216495300},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1466216495300},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1466216495300},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1466216495300},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1466216495300},{"_id":"themes/huxblog/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1466216495300},{"_id":"themes/huxblog/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1466216495300},{"_id":"themes/huxblog/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1466216495300},{"_id":"themes/huxblog/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1466216495300},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1466216495300},{"_id":"source/_posts/AndroidStudio_shortcut_key/02-move_between_methods.gif","hash":"f1b51488f24870c2de696621eb7062bebdc31cf8","modified":1466216495248},{"_id":"source/_posts/AndroidStudio_shortcut_key/03-filestructure.gif","hash":"94ff3c1404f2032ef91fad561b601d67eb6a1b51","modified":1466216495248},{"_id":"source/_posts/AndroidStudio_shortcut_key/19-select-in.gif","hash":"dc032ba09be553702c9bcde39e2e8bd475d26c1f","modified":1466216495252},{"_id":"source/_posts/AndroidStudio_shortcut_key/22-conditionalbreakpoint.gif","hash":"8e78623f5fe9a56798d922175019cded07e0fe0b","modified":1466216495252},{"_id":"source/_posts/AndroidStudio_shortcut_key/25-disablebreakpoint.gif","hash":"d31859e4a3db33911c7ed9ec02622c68558b18d2","modified":1466216495256},{"_id":"source/_posts/AndroidStudio_shortcut_key/28-mouse_evaluate_expression.gif","hash":"f4b7d4631566791d9515e0a8b976ae9050d72842","modified":1466216495260},{"_id":"source/_posts/AndroidStudio_shortcut_key/33-columnselection.gif","hash":"15144f102f81d570d88d43fb6a09ae056a8a8ac6","modified":1466216495264},{"_id":"source/_posts/AndroidStudio_shortcut_key/34-comparewithclipboard.gif","hash":"3aaed02b28391a0b0780514be373fdde500101e9","modified":1466216495264},{"_id":"source/_posts/AndroidStudio_shortcut_key/35-stoprocess.gif","hash":"2f65511a046b84319e3d7f912fb6f50d3965bd98","modified":1466216495268},{"_id":"source/_posts/AndroidStudio_shortcut_key/36-executionpoint.gif","hash":"31337e99cb1755912fca5b0ba70d6a6f5d695708","modified":1466216495268},{"_id":"source/_posts/AndroidStudio_shortcut_key/49-recentlyedited.gif","hash":"cb6176adecaba9274dbc2c05c8254df98f01a1c6","modified":1466216495276},{"_id":"source/_posts/AndroidStudio_shortcut_key/51-extractvariable.gif","hash":"9c1a20c172f3c9d0139cd865a7828beec24945de","modified":1466216495276},{"_id":"source/_posts/AndroidStudio_shortcut_key/52-extractparam.gif","hash":"ded64f76f3fbc577681d8fdda7f6ff946621b64c","modified":1466216495276},{"_id":"source/_posts/AndroidStudio_shortcut_key/migration_guide_save_settings.png","hash":"f89c131f75c4428ba0c4e45965a94c2efba3d55a","modified":1466216495280},{"_id":"source/_posts/AndroidStudio_shortcut_key/post-bg-androidstudio.jpg","hash":"e8f3739cb78ea6d1645665d07ebdb79881774fb6","modified":1466216495280},{"_id":"source/_posts/envsetup_common_command/post-bg-unix-linux.jpg","hash":"e8f3739cb78ea6d1645665d07ebdb79881774fb6","modified":1466216495280},{"_id":"themes/huxblog/source/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1466216495296},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1466216495300},{"_id":"themes/huxblog/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1466216495300},{"_id":"themes/huxblog/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1466216495300},{"_id":"source/_posts/AndroidStudio_VS_eclipse/migration_guide_auto_scroll_from_source.png","hash":"4f161f0abd8bf1e2f760893e71d46c4aac14f0b0","modified":1466216495244},{"_id":"source/_posts/AndroidStudio_shortcut_key/20-unwrap.gif","hash":"5a69c57abf84011a92733b2fda8d56649fc221d6","modified":1466216495252},{"_id":"source/_posts/AndroidStudio_shortcut_key/40-returntoeditor.gif","hash":"6a169e4d67bd1c7de4fe161b211cff3f2f705c48","modified":1466216495268},{"_id":"themes/huxblog/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1466216495296},{"_id":"source/_posts/AndroidStudio_shortcut_key/04-callinghierarchy.gif","hash":"e443e4a748ab294ee0614f02954b569e2a1abe5d","modified":1466216495248},{"_id":"source/_posts/AndroidStudio_shortcut_key/07-bookmarks.gif","hash":"33076fbff66dcb66c26e4ad5a98843c5a2fa03e7","modified":1466216495252},{"_id":"source/_posts/AndroidStudio_shortcut_key/27-evaluateexpression.gif","hash":"05a27baeeca7ed3dae8d97c40566d423a1500220","modified":1466216495256},{"_id":"source/_posts/AndroidStudio_shortcut_key/42-hideallwindows.gif","hash":"02bc942d7ac07a6f183365a4a38693a1c0fcf24e","modified":1466216495272},{"_id":"source/_posts/AndroidStudio_shortcut_key/46-switcher.gif","hash":"3e8c849b325b05cfc2ac917f013b5dbc7923e94f","modified":1466216495276},{"_id":"source/_posts/AndroidStudio_shortcut_key/53-extractmethod.gif","hash":"316258a2e84c44bfaf7742107decc6ef3fd7187b","modified":1466216495276},{"_id":"source/_posts/AndroidStudio_shortcut_key/56-pullupdown.gif","hash":"70131260ff92ff3b36c96aa142b1ce4e5012379d","modified":1466216495280},{"_id":"themes/huxblog/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1466216495300},{"_id":"source/_posts/AndroidStudio_VS_eclipse/migration_guide_debugger_1.png","hash":"6374bfd594ec029428605aa64fa1dd25a1ae6a06","modified":1466216495244},{"_id":"source/_posts/AndroidStudio_shortcut_key/31-analyzedataflow.gif","hash":"e006a00a6a6164b36d800fe8164410a0bf9fe4f4","modified":1466216495264},{"_id":"source/_posts/AndroidStudio_shortcut_key/38-comparewithbranch.gif","hash":"bfc58a5ff9dd4b33f4b076ac9da7ce65decf5edc","modified":1466216495268},{"_id":"source/_posts/AndroidStudio_shortcut_key/30-analyzestacktrace.gif","hash":"3e91f1deb746d4f8e1d0513c9fcaa134816c1b18","modified":1466216495264},{"_id":"source/img/about-bg.jpg","hash":"d5add164a064349742c50cbcdfdb2d5e6fd120e2","modified":1466216495288},{"_id":"source/_posts/AndroidStudio_VS_eclipse/post-bg-2015.jpg","hash":"2cdac12fdb5a0ef1e6e80c4b213c98f522c4b79a","modified":1466216495248},{"_id":"source/_posts/AndroidStudio_shortcut_key/43-openpanelbynumber.gif","hash":"96ea257a107674ae47c490169d7781a334ca8189","modified":1466216495272},{"_id":"source/_posts/AndroidStudio_shortcut_key/23-loggingbreakpoints.gif","hash":"de01475684333cfda0be927f655faaa1984d9619","modified":1466216495256},{"_id":"source/_posts/AndroidStudio_shortcut_key/29-markobject.gif","hash":"ef50bab69e8050ee0737f5dbbd32e846f23a55cf","modified":1466216495260},{"_id":"source/img/home-bg.jpg","hash":"f6d53f7b1faf058b84c4e7e66c6b318ee412df95","modified":1466216495296},{"_id":"source/img/contact-bg.jpg","hash":"bb0ace5a8c33cc41b93f8f8cff7b6e868187a007","modified":1466216495292},{"_id":"source/img/404-bg.jpg","hash":"23c1d6c0e6a96c9fc7bd773c1e869890fa7722a3","modified":1466216495288},{"_id":"public/404.html","hash":"cc39e3e0882793eed11a041760defe25ddb5a811","modified":1466216907753},{"_id":"public/tags/index.html","hash":"92977ab137394a0fd3a845434143519a02f8d6cd","modified":1466216907753},{"_id":"public/archives/index.html","hash":"e52a585226d27926d82f7b1e137d7d2ae78986f8","modified":1466216907753},{"_id":"public/archives/2016/index.html","hash":"bcd0aea86a0722e674f35235d252555b591f9c0d","modified":1466216907753},{"_id":"public/archives/2016/03/index.html","hash":"e946109158456b33c3451329245acdbdfa602b05","modified":1466216907753},{"_id":"public/archives/2016/04/index.html","hash":"7f9afb684d3d702c2475dbc1bae44c08eaad96b0","modified":1466216907754},{"_id":"public/archives/2016/05/index.html","hash":"35cdbf83554dfe1593e9c711a6587f70e4918083","modified":1466216907754},{"_id":"public/tags/AndroidStudio/index.html","hash":"7b92047d2d8566092caecaee4272ed0a573bd945","modified":1466216907754},{"_id":"public/tags/android-open-source/index.html","hash":"62d5c2116cf4bd9c64ac61d5424bc6c83ace3136","modified":1466216907754},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/index.html","hash":"26eddbdc2a42d282db05166384d93595ccb2e595","modified":1466216907754},{"_id":"public/2016/04/19/AndroidStudio_VS_eclipse/index.html","hash":"29ed79e8fbfc8b09bf454340e5361aaa27f1cc8e","modified":1466216934127},{"_id":"public/2016/03/10/envsetup-sh的常用命令/index.html","hash":"2013d2ce1a8e9d3243660a2e6fb77577f1073d4d","modified":1466216907754},{"_id":"public/2016/03/10/envsetup_common_command/index.html","hash":"6d0ce9d96eaa3f76a9eb1209256186a7011445c5","modified":1466216934127},{"_id":"public/about/index.html","hash":"97e0d47a7d17f16ef425654055a8c61c2abc1e95","modified":1466216907754},{"_id":"public/index.html","hash":"484f2161d561886994413d432f39d4caf2d2bece","modified":1466216934127},{"_id":"public/CNAME","hash":"3278c9d7d4882edeeac323f4c59d874c13a7fbc3","modified":1466216907766},{"_id":"public/img/avatar.jpg","hash":"44988594e1a6bcdc2ba5e5a13a641b854f1959b1","modified":1466216907766},{"_id":"public/img/icon_wechat.jpg","hash":"2ef6b0c1e27e5697a4ab34f6562c0cae44b0c898","modified":1466216907766},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1466216907767},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1466216907767},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1466216907767},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1466216907767},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/01-highlight.gif","hash":"37549fd11fc845ff645d944c89d1851a903c9d07","modified":1466216907767},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/05-quickdefinition.gif","hash":"f957bb5ffd41f83d1dd5dbb0bca615239cd9e132","modified":1466216907767},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/06-codefolding.gif","hash":"1a0e34fca50e49b84c3da96fab2748b4212350e6","modified":1466216907767},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/10-deleteline.gif","hash":"be20980597f6cf38356fc8313902dda3bc4176de","modified":1466216907767},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/09-movelines.gif","hash":"b49af57e70b4a4f86172da75e797a5fc6c202892","modified":1466216907767},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/11-duplicate_lines.gif","hash":"34fcaa4e84dca6da0c23bd9b5ccbd850bde040a0","modified":1466216907767},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/08-findaction.gif","hash":"dc22d7155601cba04a32d760c26d19570211145e","modified":1466216907767},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/12-expand_shrink_selection.gif","hash":"0c21407236f89283af4f9255cb4de5bbcf0490a0","modified":1466216907767},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/13-surround_with.gif","hash":"fa49968f10f4fcc509dc8c470d008b5723069fe2","modified":1466216907767},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/15-movemethods.gif","hash":"469b3a9f284770e034d6226969739881fc74afec","modified":1466216907767},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/15-live_templates.gif","hash":"7f2f804937fd6c452c56f72187d1dc40aa30e74e","modified":1466216907767},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/14-recents.gif","hash":"58ee2d99743fcd34cab010c699d7274f1004dafe","modified":1466216907767},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/17-navigate-previous-changes.gif","hash":"fa0a177b3593df9198ba97914276137a5ce397e7","modified":1466216907767},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/16-completestatement.gif","hash":"a7242a57ebe112b455e855f31c29193002f7ce03","modified":1466216907767},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/18-joinlines.gif","hash":"7d8b08bac9789385a5a2bf4a328073ceb67b7bde","modified":1466216907767},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/21-togglebreakpoints.gif","hash":"54ede77b801de23d19b8f9c9df9f612048898408","modified":1466216907767},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/24-temporarybreakpoints.gif","hash":"ed0f0fd21f89e0787521b0c25c27fb4cd0caf4a1","modified":1466216907768},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/32-multiselection.gif","hash":"1806b83d743a4af60c67dcdaa99cc990955526d6","modified":1466216907769},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/33-postfixcompletion.gif","hash":"9c866ec339a1ebe31a6339abd6b48f2f62ec0b7f","modified":1466216907769},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/37-vcspopup.gif","hash":"328c55f8b36a8610a0f1e0b7861391d7af45732a","modified":1466216907769},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/39-navigatetoparent.gif","hash":"7e00455793140948441327aca8a27ab1fbc25c71","modified":1466216907770},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/41-lasttoolwindow.gif","hash":"622c978f289f0b8c2916976c1108e1f7e81d2fc6","modified":1466216907770},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/44-parameterinfo.gif","hash":"c1d6214e7ac75d6a7671f008925d0bb9e8dcdb1e","modified":1466216907770},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/45-codecompletionentertab.gif","hash":"b364aaac2429dd58720d832053f7db4cfc470dec","modified":1466216907770},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/48-refactorthis.png","hash":"fb90d1f4118c437c3650e6c9c5f6740b17070de8","modified":1466216907770},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/47-contextinfo.gif","hash":"d587a809652100395df75136231ede55fcedc429","modified":1466216907770},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/54-inline.gif","hash":"1aecd2c078b2eac2c17d59084e32d693ef3fc45a","modified":1466216907770},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/55-rename.gif","hash":"34ef7726d642a33cd37c7afc9b22c50d34acd049","modified":1466216907770},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/studio-debug-settings-icon.png","hash":"e968ecfabfd1a20bbedd0833875aa263f51a1af9","modified":1466216907770},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/summary1.png","hash":"d34c48716ea4d67409b92913e66920087388c509","modified":1466216907770},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/summary_2.png","hash":"7ca9dc1ead58b11e871df5f1c04beeb3bc5da689","modified":1466216907770},{"_id":"public/img/favicon.ico","hash":"5228c9322413d7f677d67685502b9efdfdc3b953","modified":1466216907925},{"_id":"public/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1466216907925},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1466216907928},{"_id":"public/2016/03/10/envsetup_common_command/post-bg-unix-linux.jpg","hash":"e8f3739cb78ea6d1645665d07ebdb79881774fb6","modified":1466216907928},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/02-move_between_methods.gif","hash":"f1b51488f24870c2de696621eb7062bebdc31cf8","modified":1466216907928},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/03-filestructure.gif","hash":"94ff3c1404f2032ef91fad561b601d67eb6a1b51","modified":1466216907928},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/19-select-in.gif","hash":"dc032ba09be553702c9bcde39e2e8bd475d26c1f","modified":1466216907928},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/22-conditionalbreakpoint.gif","hash":"8e78623f5fe9a56798d922175019cded07e0fe0b","modified":1466216907928},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/25-disablebreakpoint.gif","hash":"d31859e4a3db33911c7ed9ec02622c68558b18d2","modified":1466216907928},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/28-mouse_evaluate_expression.gif","hash":"f4b7d4631566791d9515e0a8b976ae9050d72842","modified":1466216907928},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/33-columnselection.gif","hash":"15144f102f81d570d88d43fb6a09ae056a8a8ac6","modified":1466216907928},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/34-comparewithclipboard.gif","hash":"3aaed02b28391a0b0780514be373fdde500101e9","modified":1466216907928},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/35-stoprocess.gif","hash":"2f65511a046b84319e3d7f912fb6f50d3965bd98","modified":1466216907929},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/36-executionpoint.gif","hash":"31337e99cb1755912fca5b0ba70d6a6f5d695708","modified":1466216907929},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/49-recentlyedited.gif","hash":"cb6176adecaba9274dbc2c05c8254df98f01a1c6","modified":1466216907929},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/51-extractvariable.gif","hash":"9c1a20c172f3c9d0139cd865a7828beec24945de","modified":1466216907929},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/52-extractparam.gif","hash":"ded64f76f3fbc577681d8fdda7f6ff946621b64c","modified":1466216907929},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/post-bg-androidstudio.jpg","hash":"e8f3739cb78ea6d1645665d07ebdb79881774fb6","modified":1466216907929},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/migration_guide_save_settings.png","hash":"f89c131f75c4428ba0c4e45965a94c2efba3d55a","modified":1466216907929},{"_id":"public/css/syntax.css","hash":"4616879fec214c9cc4f5835615348f0bbeabf2a9","modified":1466216907935},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1466216907935},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1466216907935},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1466216907935},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1466216907935},{"_id":"public/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1466216907935},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1466216907935},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1466216907935},{"_id":"public/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1466216907935},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1466216907935},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1466216907935},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1466216907935},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1466216907935},{"_id":"public/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1466216907936},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/20-unwrap.gif","hash":"5a69c57abf84011a92733b2fda8d56649fc221d6","modified":1466216907936},{"_id":"public/2016/04/19/AndroidStudio_VS_eclipse/migration_guide_auto_scroll_from_source.png","hash":"4f161f0abd8bf1e2f760893e71d46c4aac14f0b0","modified":1466216907936},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/40-returntoeditor.gif","hash":"6a169e4d67bd1c7de4fe161b211cff3f2f705c48","modified":1466216907936},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/04-callinghierarchy.gif","hash":"e443e4a748ab294ee0614f02954b569e2a1abe5d","modified":1466216907941},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/07-bookmarks.gif","hash":"33076fbff66dcb66c26e4ad5a98843c5a2fa03e7","modified":1466216907941},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/27-evaluateexpression.gif","hash":"05a27baeeca7ed3dae8d97c40566d423a1500220","modified":1466216907941},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/42-hideallwindows.gif","hash":"02bc942d7ac07a6f183365a4a38693a1c0fcf24e","modified":1466216907942},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/46-switcher.gif","hash":"3e8c849b325b05cfc2ac917f013b5dbc7923e94f","modified":1466216907942},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/53-extractmethod.gif","hash":"316258a2e84c44bfaf7742107decc6ef3fd7187b","modified":1466216907942},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/56-pullupdown.gif","hash":"70131260ff92ff3b36c96aa142b1ce4e5012379d","modified":1466216907942},{"_id":"public/2016/04/19/AndroidStudio_VS_eclipse/migration_guide_debugger_1.png","hash":"6374bfd594ec029428605aa64fa1dd25a1ae6a06","modified":1466216907947},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/31-analyzedataflow.gif","hash":"e006a00a6a6164b36d800fe8164410a0bf9fe4f4","modified":1466216907947},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/38-comparewithbranch.gif","hash":"bfc58a5ff9dd4b33f4b076ac9da7ce65decf5edc","modified":1466216907955},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/30-analyzestacktrace.gif","hash":"3e91f1deb746d4f8e1d0513c9fcaa134816c1b18","modified":1466216907959},{"_id":"public/img/about-bg.jpg","hash":"d5add164a064349742c50cbcdfdb2d5e6fd120e2","modified":1466216907967},{"_id":"public/2016/04/19/AndroidStudio_VS_eclipse/post-bg-2015.jpg","hash":"2cdac12fdb5a0ef1e6e80c4b213c98f522c4b79a","modified":1466216907967},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/43-openpanelbynumber.gif","hash":"96ea257a107674ae47c490169d7781a334ca8189","modified":1466216907967},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/23-loggingbreakpoints.gif","hash":"de01475684333cfda0be927f655faaa1984d9619","modified":1466216907974},{"_id":"public/2016/05/03/AndroidStudio_shortcut_key/29-markobject.gif","hash":"ef50bab69e8050ee0737f5dbbd32e846f23a55cf","modified":1466216907976},{"_id":"public/img/home-bg.jpg","hash":"f6d53f7b1faf058b84c4e7e66c6b318ee412df95","modified":1466216907978},{"_id":"public/img/contact-bg.jpg","hash":"bb0ace5a8c33cc41b93f8f8cff7b6e868187a007","modified":1466216907979},{"_id":"public/img/404-bg.jpg","hash":"23c1d6c0e6a96c9fc7bd773c1e869890fa7722a3","modified":1466216907980}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2016-06-18T02:21:35.244Z","updated":"2016-06-18T02:21:35.244Z","path":"404.html","title":"","comments":1,"_id":"cipkjorvt00009x2no1bhfphp","content":"","excerpt":"","more":""},{"layout":"about","title":"About Me","date":"2016-06-16T05:48:33.000Z","description":"Hey, this is jianguo.","header-img":"img/about-bg.jpg","_content":"\n\n> 酷爱技术，懂点摄影，乐于探索\n> 希望在这个世界遇到更好的你。\n\nAndroid攻城师一枚(Android engineer at [thundersoft.Inc](http://www.thundersoft.com), Beijing)\n\n### 关注(Focus)\n1. Android,Java,Python,AI,Machin Learning\n2. Internet of things,Intelligent devices.\n3. 摄影，影像\n\n### 联系我(contact)\n\nGitHub: [lgyjg](https://github.com/lgyjg)\n微博: [HelloVirtualWorld](http://weibo.com/lgyjg)\n知乎: [杨建国](https://www.zhihu.com/people/yang-jian-guo-51)\n\n\n\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About Me\"\ndate: 2016-06-16 13:48:33\ndescription: \"Hey, this is jianguo.\"\nheader-img: \"img/about-bg.jpg\"\n---\n\n\n> 酷爱技术，懂点摄影，乐于探索\n> 希望在这个世界遇到更好的你。\n\nAndroid攻城师一枚(Android engineer at [thundersoft.Inc](http://www.thundersoft.com), Beijing)\n\n### 关注(Focus)\n1. Android,Java,Python,AI,Machin Learning\n2. Internet of things,Intelligent devices.\n3. 摄影，影像\n\n### 联系我(contact)\n\nGitHub: [lgyjg](https://github.com/lgyjg)\n微博: [HelloVirtualWorld](http://weibo.com/lgyjg)\n知乎: [杨建国](https://www.zhihu.com/people/yang-jian-guo-51)\n\n\n\n\n","updated":"2016-06-18T02:21:35.280Z","path":"about/index.html","comments":1,"_id":"cipkjorwj00029x2nf14r4klk","content":"<blockquote>\n<p>酷爱技术，懂点摄影，乐于探索<br>希望在这个世界遇到更好的你。</p>\n</blockquote>\n<p>Android攻城师一枚(Android engineer at <a href=\"http://www.thundersoft.com\" target=\"_blank\" rel=\"external\">thundersoft.Inc</a>, Beijing)</p>\n<h3 id=\"关注-Focus\"><a href=\"#关注-Focus\" class=\"headerlink\" title=\"关注(Focus)\"></a>关注(Focus)</h3><ol>\n<li>Android,Java,Python,AI,Machin Learning</li>\n<li>Internet of things,Intelligent devices.</li>\n<li>摄影，影像</li>\n</ol>\n<h3 id=\"联系我-contact\"><a href=\"#联系我-contact\" class=\"headerlink\" title=\"联系我(contact)\"></a>联系我(contact)</h3><p>GitHub: <a href=\"https://github.com/lgyjg\" target=\"_blank\" rel=\"external\">lgyjg</a><br>微博: <a href=\"http://weibo.com/lgyjg\" target=\"_blank\" rel=\"external\">HelloVirtualWorld</a><br>知乎: <a href=\"https://www.zhihu.com/people/yang-jian-guo-51\" target=\"_blank\" rel=\"external\">杨建国</a></p>\n","excerpt":"","more":"<blockquote>\n<p>酷爱技术，懂点摄影，乐于探索<br>希望在这个世界遇到更好的你。</p>\n</blockquote>\n<p>Android攻城师一枚(Android engineer at <a href=\"http://www.thundersoft.com\">thundersoft.Inc</a>, Beijing)</p>\n<h3 id=\"关注-Focus\"><a href=\"#关注-Focus\" class=\"headerlink\" title=\"关注(Focus)\"></a>关注(Focus)</h3><ol>\n<li>Android,Java,Python,AI,Machin Learning</li>\n<li>Internet of things,Intelligent devices.</li>\n<li>摄影，影像</li>\n</ol>\n<h3 id=\"联系我-contact\"><a href=\"#联系我-contact\" class=\"headerlink\" title=\"联系我(contact)\"></a>联系我(contact)</h3><p>GitHub: <a href=\"https://github.com/lgyjg\">lgyjg</a><br>微博: <a href=\"http://weibo.com/lgyjg\">HelloVirtualWorld</a><br>知乎: <a href=\"https://www.zhihu.com/people/yang-jian-guo-51\">杨建国</a></p>\n"},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/tag-bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2016-06-18T02:21:35.296Z","updated":"2016-06-18T02:21:35.296Z","path":"tags/index.html","comments":1,"_id":"cipkjorxg000c9x2nn0odkq0u","content":"","excerpt":"","more":""}],"Post":[{"layout":"post","title":"AndroidStudio快捷键大全","subtitle":"介绍AndroidStudio常用的快捷键功能，收集了所有的Android Studio Tips Of the Day的内容","date":"2016-05-03T10:18:18.000Z","author":"JianGuo Yang","header-img":"post-bg-androidstudio.jpg","description":"介绍AndroidStudio常用的快捷键功能，收集了所有的Android Studio Tips Of the Day的内容","_content":"\n\n## 高亮所有\nos X: ** command + shift + F7  **  \nWindows Or Linux: ** ctrl+Shift+F7 **  \n\n![hight light all](01-highlight.gif)\n* 高亮代码方法中的“return” 或者 “throw” 也会高亮这个方法的所有出口。\n* 高亮后可使用\"F3\"或“shift + F3”上下选择。\n* Esc 或者再次使用该快捷键，可以取消高亮。\n\n<!--more-->\n\n## 在方法和内部类之间跳转\nOS X: ** Ctrl + ↑ / ↓ **  \nWindows Or Linux: ** Alt+ ↑ / ↓**  \n\n![02-move_between_methods](02-move_between_methods.gif)\n\n## 跳转到已经打开的下一个/上一个文件\nOS X: ** Ctrl + ← / → **  \nWindows Or Linux: ** Alt+  ← / →**  \n\n## 快速定位到类中的方法/内部类/成员变量\nOS X: ** Command+F12**  \nWindows Or Linux: ** Ctrl+F12 **   \n\n![03-filestructure](03-filestructure.gif)\n* 你可以使用驼峰字符来过滤候选方法列表。例如:输入 “oCr” 就可以找到 “onCreate”方法。\n* 你可以选择是否展示继承的成员变量。如勾选了\"show inherited members\"就可以很方便的查找继承自父类的成员变量。\n* 你可以选择是否展示匿名类。如勾选了\"show Anonymous classes\", 就可以很方便的查找 OnClickListener里面的OnClick方法了。\n\n## 显示方法的调用层级关系\nOS X: ** Ctrl+Alt+H **  \nWindows Or Linux: ** Ctrl+Alt+H **  \n\n![04-callinghierarchy](04-callinghierarchy.gif)\n> 注，ubuntu上与输入法快捷键冲突无法使用\n\n## 快速显示变量或方法的定义\nOS X: ** Alt+Space**  \nWindows Or Linux: ** Ctrl+Shift+i**  \n如果你想立马知道某个类或者方法的来源同时又不想丢掉当前的编码环境，你可以试试这个快捷键。  \n\n![05-quickdefinition](05-quickdefinition.gif)\n\n## 快速收缩或者展开代码块\nOS X : ** Alt + +/- **  \nWindows Or Linux: ** Ctrl +/- **\n\n![06-codefolding](06-codefolding.gif)\n\n* 可以使用 Ctrl + Shift +/- ** 收缩或者展开文件中的所有方法\n* 多次使用会逐级收缩或者展开\n> 你可以在“Editor → Code Folding”自定义你的代码折叠范围\n\n## 书签\n### 默认书签\nOS X : ** F3 **   \nWindows Or Linux : ** F11 **\n### 带字母或者数字的标签\nOS X : ** Alt+F3 **  \nWindows Or Linux : ** Ctrl+F11 **   \n> 按下此快捷键就可以在你的当前光标所在行打上标签，并提供字母或者数字标记。如果你选择的是数字标记，那么可以通过ctrl+对应的数字直接跳转至相应位置。  \n\n### 展示标签\nOS X : ** Command+F3**  \nWindows Or Linux : ** Shift+F11**  \n\n![07-bookmarks](07-bookmarks.gif)\n\n## 查找Android Studio的菜单选项\nOS X :   ** Command+Shift+A**  \nWindows Or Linux : ** Ctrl+Shift+A**  \n你可以通过输入菜单名来查找任意的菜单选项，这对那些使用频率低的操作很有效果。\n\n![08-findaction](08-findaction.gif)\n\n> 如果这个选项有对应的快捷方式，那么这个快捷键会在列表旁边显示。  \n\n## 行操作\n----\n### 移动整行\nOS X : ** Alt+Shift+ ↑ / ↓**   \nWindows Or Linux: ** Alt+Shift+ ↑ / ↓**  \n\n![09-movelines](09-movelines.gif)\n\n### 代码行合并\nMac OS : ** Ctrl+Shift+j **  \nWindows & Linux : ** Ctrl+Shift+j **  \n按照语法规则将可以合并的代码行进行合并，保持代码精简。它主要适用以下规则：  \n* 将变量声明定义和赋值合并;\n* 合并多行字符串的时候，会移掉“+“和双引号;\n* 合并两行评论代码时，评论变成一行，会去掉另一行的“//”;\n\n![18-joinlines](18-joinlines.gif)\n\n### 删除整行\nOS X : ** Command + Backspace**  \nWindows Or Linux : ** Ctrl + Y**  \n\n![10-deleteline](10-deleteline.gif)\n\n### 复制整行\nMac OS: ** Command+D**  \nWindows & Linux: ** Ctrl+D**  \n这个快捷键的厉害之处在于它会复制当前行同时又不会影响系统的剪贴板。\n![11-duplicate_lines](11-duplicate_lines.gif)\n\n----\n\n## 上下移动整个方法\nMac OS : ** Command+Alt+↑/↓ **  \nWindows & Linux : ** Ctrl+Shift+↑/↓ **  \n\n![15-movemethods](15-movemethods.gif)\n\n\n## 展开或者收缩选择区域\nMac OS : ** alt + ↑/↓ **  \nWindows & Linux: ** (Ctrl+w )/(Ctrl+Shift+w) **   \n扩大（或者缩小）当前的选择范围。比如当前选中一个变量，此操作会把选中范围扩展至句子，方法等。\n\n![12-expand_shrink_selection](12-expand_shrink_selection.gif)\n\n## 包裹代码段\nMac OS : ** Command+Alt+t **  \nWindows & Linux : ** Ctrl+Alt+t **  \n选中一段代码段，然后使用if语句或者循环结构等包裹代码。  \n\n![13-surround_with.gif](13-surround_with.gif)  \n## 删除代码块的包裹\nMac OS : ** Command+Shift+Delete **  \nWindows & Linux : ** Ctrl+Shift+Delete **\n移除代码结构中的包裹代码，比如 if 语句,  while 循环, 或者 try/catch 语句。\n![20-unwrap](20-unwrap.gif)\n\n## 查询最近编辑的文件和使用的工作区\nMac OS : ** Command+e **  \nWindows & Linux : ** Ctrl+e **  \n\n![14-recents](14-recents.gif)\n\n## 代码模板\nMac OS : ** Command+j **  \nWindows & Linux : ** Ctrl+j **  \n此快捷键可以让你迅速地在文件中插入预留的代码片段。你也可以定制你自己的代码片段。\n\n![15-live_templates](15-live_templates.gif)\n\n## 代码结构自动补全\nMac OS : ** Command+Shift+Enter **  \nWindows & Linux : ** Ctrl+Shift+Enter **  \n这个操作会将还未完成的代码结构补全。一般可以补全的情形如下：\n\n* 在代码行后面添加分号；\n* 为 if, while 或者 for 语句添加括号\n* 为方法声明添加括号。\n\n![16-completestatement](16-completestatement.gif)\n\n## 回到上次编辑的位置\nMac OS : ** Command+Shift+backspace **  \nWindows & Linux : ** Ctrl+Shift+backspace **  \n\n![17-navigate-previous-changes](17-navigate-previous-changes.gif)\n\n## 在代码中根据标签选择功能（Select In）\nMac OS : ** Alt+F1 **  \nWindows:** Alt+F1 **  \nLinux : 与系统快捷键冲突\n在代码中执行此快捷方式可以快速定位到select Target所示的功能中。\n\n![19-select-in](19-select-in.gif)\n\n## 调试常用快捷键\n\n----\n\n### 添加断点（Toggle Breakpoints）\nOSX: ** Cmd+F8 **  \nWindows/Linux: ** Ctrl+F8 **  \n相应大家都知道使用鼠标左键点击行首添加断点，使用快捷键添加断点的方式如下：\n![21-togglebreakpoints](21-togglebreakpoints.gif)\n\n### 条件断点（Conditional Breakpoints）\n通过右键断点，可以对一个断点加入条件。只有当满足条件时，才会进入到断点中。调试神技，只对自己关心的情况进行调试，不浪费时间。\n\n![22-conditionalbreakpoint](22-conditionalbreakpoint.gif)\n\n### 在断点上打log\n如果你不想在调试过程中添加log，并且重新编译，可以在断点直接打log，查看结果。\n鼠标右键点击断点，取消选择“suspend”,并在 “Log evaluated Expression” 中输入你想要打印的log信息。实例如下：  \n![23-loggingbreakpoints](23-loggingbreakpoints.gif)\n\n### 临时断点\n鼠标（ubuntu上无效）：** Alt+LeftClick ** in the left gutter  \nMac: ** Cmd+Alt+Shift+F8 **  \nWindows/Linux: ** Ctrl+Alt+Shift+F8 **  \n这种方式可以添加一个临时断点，当第一次执行完后，会自动消失。\n\n### disable断点\n在已经完成了一些条件，或者打印了断点，不再需要这些断点的时候，你可以使这些断点无效。  \nMouse(ubuntu 上无效):在已经存在的断点上按住ALT并点击左键： ** Alt+LeftClick **   \n> 没有默认的快捷键，如果需要的话，可以创建快捷键。\n\n![25-disablebreakpoint](25-disablebreakpoint.gif)\n\n### 附加调试器\n及时你没有在调试模式下启动app，你也可以通过以下方式开启调试器。你不需要重新在调试模式下调用app。这是非常有用的。  \nMouse: 点击图标，选择“ Attach debugger to Android Process”\n> 没有默认的快捷键，如果需要的话，可以创建快捷键。\n\n### 评估表达式（Evaluate Expression）\n快捷键：** Alt+F8 **    \n这个功能用来检查变量的内容，评估几乎任何有效的Java表达式。要知道，如果你转变了状态，它会保持下去，当你恢复程序的执行。\n![27-evaluateexpression](27-evaluateexpression.gif)\n\n### 检查变量（Inspect Variable）\n快捷键：在调试时，在表达式中按住ALT键点击鼠标左键** Alt+LeftClick  **  \n不需要打开“Evaluate Expression”对话框，即可查看一个评估一个表达式。\n\n![28-mouse_evaluate_expression](28-mouse_evaluate_expression.gif)\n\n### 标记对象（Mark Object）\n* Mouse: 右击并选择 “Mark Object”  \n* OSX : 选中对象，按 F3  \n* Windows/Linux: 选中对象，按 F11  \n\n在调试过程中，你可以使用这个命令给特定的对象添加一个标签，以便于以后识别该对象。\n\n![29-markobject](29-markobject.gif)\n\n### 分析堆栈信息\n* Menu: Analyze → Analyze Stacktrace\n* Find Actions(ctrl+shift+a)输入\"analyze stacktrace\"即可查看堆栈信息。  \n\n可以从你的剪切板中加载log的堆栈信息，并且使得他是可点击的。对于我们从bug报告中摘取一段堆栈进行分析非常有利。  \n\n![30-analyzestacktrace](30-analyzestacktrace.gif)\n\n> 你可以使用\"ProGuard Unscramble\"插件来分析混淆后的堆栈信息。\n\n### 分析数据流\n* Menu: Analyze → Analyze Data Flow to Here\n* Find action: Analyze Data Flow to Here\n\n可以查看当前变量、参数或field调用的路径！这是非常有用的当你进入到一个你不熟悉的代码环境中，并且你想了解这个参数是怎样传到这里的。  \n这也有一个反向操作“Analyze Data Flow from Here”，它将会显示变量、field或返回类型的被调用的路径。\n\n![31-analyzedataflow](31-analyzedataflow.gif)\n\n## 显示正在执行的行（Show Execution Point）\n快捷键：（debug模式下） : Alt+F10\n将光标移动到当前正在调试的行。通常用于下列情况：\n* 你中断的某些地方\n* 你开始在这个文件查看然后跳到了其它一些文件\n* 调用这个快捷键可以返回到你正在一步一步的调试会话的地方\n\n![36-executionpoint](36-executionpoint.gif)\n\n----\n## 多行选择\n* Mac : ** Ctrl+G **  \n* Windows/Linux: ** Alt+J **  \n\n这一条格外的精彩！它可以同时选择多行，进行编辑。这就意味着你可以在同一个文档中有多个光标。\n\n![32-multiselection](32-multiselection.gif)\n\n## 多列选择（Column Selection）\n* Mouse(ubuntu上无效): Alt+鼠标拖拽  \n* Mac : ** Cmd+Shift+8 **  \n* Windows/Linux: ** Shift+Alt+Insert **\n\n![ 33-columnselection.gif](33-columnselection.gif)\n\n> 和多行编辑的区别在于，多列编辑只能是每一行的相同列一起编辑。\n\n## 后缀补全（Postfix Completion）\n\n这个不是非常直观的，但是相当的给力，基本上，它是无需按一连串左键到头部，实现方法的包裹的最好的方式了。\n比较常用的有：\n* .for (for a foreach)\n* .format (wraps a string in String.format())\n* .cast (wraps a statement in a type cast)\n\n![33-postfixcompletion](33-postfixcompletion.gif)\n\n## 与剪切板代码进行比较（Compare With Clipboard）\n* Mouse: right-click the selection and select Compare With Clipboard  \n* Find action: compare with clipboard\n\n用来比较当前你选择的代码和剪切板中的代码有什么区别。个人觉得用处不大。\n![34-comparewithclipboard](34-comparewithclipboard.gif)\n\n## 停止进程\n* Mac : Cmd+F2\n* Windows/Linux: Ctrl+F2\n\n将会终止正在运行的最近的task或者显示一个可选的可能需要终止的task列表。用于停止调试或者终止一个build。\n\n![35-stoprocess](35-stoprocess.gif)\n\n## VCS 操作弹窗\nMac: ** Ctrl+V **  \nWindows/Linux: ** Alt+\\` **   \n显示一些常用的版本控制命令。如git commit。  \n\n![37-vcspopup](37-vcspopup.gif)\n\n## 与分支进行比较（Compare With Branch (Git)）\nMenu (for git): ** VCS -> Git -> Compare With Branch **   \nFind Actions: ** Compare With Branch **  \n\n如果你的项目是在git下，你可以同另一个分支比较你的文件或者文件夹。特别用来比较你的修改和主分支差异多大。\n\n![38-comparewithbranch](38-comparewithbranch.gif)\n\n## 回车键和TAB键的区别\n你可以使用Enter或Tab来自动补全代码。它们之间有一个有趣的差异：使用Enter将会自动完成语句。使用Tab将会自动完成删除光标到下一个点号，括号，分号或空格出现前的内容。\n\n![45-codecompletionentertab](45-codecompletionentertab.gif)\n\n## 跳转到父类的方法\nMac: ** Cmd+U **  \nWindows/Linux: ** Ctrl+U **  \n\n如果光标在一个复写自父类的方法中（例如Activity#onCreate()方法），使用该快捷键，将会到达该方法的父类的实现。如果光标停留在类名上，则跳转到父类。\n\n![39-navigatetoparent](39-navigatetoparent.gif)\n\n## 返回到编辑器（Return to the Editor）\n返回并不关闭面板：Escape   \n返回并关闭面板：Shift+Escape\n\n![40-returntoeditor](40-returntoeditor.gif)\n\n## 跳到最近使用的工具窗口\nMac:F12   \nWindows/Linux:F12  \n\n有时候，你从面板返回到编辑器，但是你发现不得不再返回到这个面板。例如：浏览find usages。使用这个快捷键，你可以不用鼠标返回到这个面板。\n\n![41-lasttoolwindow](41-lasttoolwindow.gif)\n\n## 隐藏所有面板（Hide All Panels）\nMac: ** Cmd+Shift+F12 **   \nwindows/linux: ** Ctrl+Shift+F12 **  \n\n让编辑器进入某种形式上的全屏模式。再次调用这个快捷键可以返回所有面板到它们之前的状态。\n\n![42-hideallwindows](42-hideallwindows.gif)\n\n## 通过编号打开面板\nMac: ** Cmd+Number **   \nwindows/linux: ** Alt+Number **  \n\n可以通过面板上标签对应的数字打开相应的面板。\n\n![43-openpanelbynumber](43-openpanelbynumber.gif)\n\n## 参数信息\nMac:**  Cmd+P **  \nwindows/linux: ** Ctrl+P **    \n\n![44-parameterinfo](44-parameterinfo.gif)\n\n## 切换器\nShortcut:** Ctrl+Tab **\n\n这个功能和IDE的alt+tab/cmd+tab差不多。它允许你导航到一个tab或一个panel。一旦它被打开，只要你按住ctrl键，你可以使用数字或字母快捷键快速导航。你也可以通过按下backspace关闭一个打开的文件。\n\n![46-switcher](46-switcher.gif)\n\n## 上下文信息（Context Info）\nShortcut:** Ctrl+Shift+Q **    \n\n这个将会显示你当前位置，当你的定义范围超出滚动的区域时。通常，这将会是类或内部类的名称，但它也可能是当前方法名。在我看来，它最好的使用是快速查看当前类继承或实现。 它也可以在xml文件中使用。\n\n![47-contextinfo](47-contextinfo.gif)\n\n## 代码重构\nMac: ** Ctrl+T **  \nWindows/Linux: ** Ctrl+Alt+Shift+T **  \n这是一个针对当前选择的代码显示上下文所有可用的重构的快捷键。这个列表可以通过键盘进行检索并且你也可以使用左侧的数字进行快速访问\n\n![48-refactorthis](48-refactorthis.png)\n\n## 跳转到最近编辑的文件（Recently Changed Files）\nMac: ** Cmd+Shift+E **  \nWindows/Linux: ** Ctrl+Shift+E **  \n\n这个和“Recents”弹出框有所不同，这个列出是在本地最近被修改的文件。\n\n![49-recentlyedited](49-recentlyedited.gif)\n\n## 提取变量\nMac:** Cmd+Alt+V **\nWindows/Linux:** Ctrl+Alt+V **\n\n这是一个可以不用通过重构菜单，来提取变量的快捷键。  \n\n![51-extractvariable](51-extractvariable.gif)\n\n>额外的技巧：  \n如果你想修改声明类型为一些更通用的（如：List而不是ArrayList）,你可以使用Shift+Tab它会给出一个可用类型的列表。\n\n## 提取参数\nMac:Cmd+Alt+P\nWindows/Linux:Ctrl+Alt+P\n\n这是一个不用通过重构菜单提取参数的快捷键。\n这个功能是有用的当你意识到一个方法可能是泛型时通过提取一部分做为一个参数。它作用的方式是它会使用当前值作为一个参数然后复制原先的值作为每个调用者的参数。  \n![52-extractparam](52-extractparam.gif)\n\n>额外的技巧：  \n你也可以保持原来的方法使用它声明一个新方法通过“delegate”选项。  \n\n\n## 提取方法\nMac: Cmd+Alt+M\nWindows/Linux: Ctrl+Alt+M\n\n可以提取一个代码块做为一个新的方法。这个功能是相当有用的。无论什么时候你遇到一个开始变得有点复杂的方法，你可以使用这个安全地抽取一部分到另一个方法。我所说的安全是因为IDE不会像我们可能会犯一个愚蠢的复制粘贴错误。\n\n![53-extractmethod](53-extractmethod.gif)\n\n> 额外的技巧：  \n当你在抽取对话框，你可以修改方法的可见性和参数名称。\n\n## inline\nMac: Cmd+Alt+N\nWindows/Linux: Ctrl+Alt+N\n\n你使用提取有一点疯狂并且现在有太多的东西？你可以使用反向操作，它叫做“inline”。\n它可以作用于方法，Fields，参数和变量。\n\n![54-inline](54-inline.gif)\n\n## 重命名\n快捷键：** Shift+F6 **  \n![55-rename.gif](55-rename.gif)\n\n\n## Pull Up / Push Down\nMac: Ctrl+T 然后选择成员   \nWindows/Linux: Ctrl+Alt+Shift+T 然后选择成员  \n\n当我们谈论上拉成员，我们的意思是我们将会让当前类的一些成员（通常是方法或field）发送它到父类或接口。\n\n如果继承于一个类，内容会被移动。如果是实现的一个接口，它将会声明方法作为接口的一部分，在你的类中保持原有的方法并且添加 @Override注解。\n当我们谈论下推成员，这正好是反向操作，我们会从父类或接口发送一些成员到子类\n\n![56-pullupdown.gif](56-pullupdown.gif)\n\n\n# 索引\n\n| 按键\t| 说明 |\n| ------| -----|\n| Ctrl(Command)+C\t| 复制当前行或选中的内容  |\n| Ctrl(Command)+D\t| 粘贴当前行或选中的内容  |\n| Ctrl(Command)+X\t| 剪切当前行或选中的内容  |\n| Ctrl(Command)+Y\t| 删除行  |\n| Ctrl(Command)+Z | \t倒退  |\n| Ctrl(Command)+Shift+Z | 向前 |    \n| Alt(Option)+Enter | 自动修正 |\n| Ctrl(Command)+Alt(Option)+L | 格式化代码  |\n| Ctrl(Command)+Alt(Option)+I | 将选中的代码进行自动缩进编排  |\n| Ctrl(Command)+Alt(Option)+O |\t优化导入的类和包  |\n| Alt(Option)+Insert | 得到一些Intention Action，可以生成构造器、Getter、Setter、将 == 改为equals() 等  |\n| Ctrl(Command)+Shift+V\t| 选最近使用的剪贴板内容并插入  |\n| Ctrl(Command)+Alt(Option)+Shift+V | 简单粘贴  |\n| Ctrl(Command)+Shift+Insert\t| 选最近使用的剪贴板内容并插入（同Ctrl(Command)+Shift+V）  |\n| Ctrl(Command)+Enter\t| 在当前行的上面插入新行，并移动光标到新行（此功能光标在行首时有效）  |\n| Shift+Enter\t| 在当前行的下面插入新行，并移动光标到新行  |\n| Ctrl(Command)+J\t| 自动代码  |\n| Ctrl(Command)+Alt(Option)+T\t| 把选中的代码放在 try{} 、if{} 、 else{} 里  |\n| Shift+Alt(Option)+Insert\t| 竖编辑模式  |\n| Ctrl(Command)+ /\t| 注释 //  |\n| Ctrl(Command)+Shift+ /\t| 注释 /…/  |\n| Ctrl(Command)+Shift+J\t| 合并成一行  |\n| F2/Shift+F2\t| 跳转到下/上一个错误语句处  |\n| Ctrl(Command)+Shift+Back\t| 跳转到上次编辑的地方  |\n| Ctrl(Command)+Alt(Option)+Space\t| 类名自动完成  |\n| Shift+Alt(Option)+Up/Down\t| 内容向上/下移动  |\n| Ctrl(Command)+Shift+Up/Down | \t语句向上/下移动 |   \n| Ctrl(Command)+Shift+U | \t大小写切换  |\n| Tab | \t代码标签输入完成后，按 Tab，生成代码  |\n| Ctrl(Command)+Backspace\t| 按单词删除 |  \n| Ctrl(Command)+Shift+Enter | \t语句完成 |   \n| Ctrl(Command)+Alt(Option)+J\t| 用动态模板环绕  |\n\n## 文件  \n\n| 按键\t| 说明 |\n| ------| ------|\n| Ctrl(Command)+F12\t| 显示当前文件的结构  |\n| Ctrl(Command)+H\t| 显示类继承结构图   |\n| Ctrl(Command)+Q\t| 显示注释文档  |\n| Ctrl(Command)+P\t| 方法参数提示  |\n| Ctrl(Command)+U\t| 打开当前类的父类或者实现的接口  |\n| Alt(Option)+Left/Right | \t切换代码视图  |\n| Ctrl(Command)+Alt(Option)+Left/Right | \t返回上次编辑的位置  |\n| Alt(Option)+Up/Down\t| 在方法间快速移动定位  |\n| Ctrl(Command)+B\t| 快速打开光标处的类或方法  |\n| Ctrl(Command)+W\t| 选中代码，连续按会有其他效果  |\n| Ctrl(Command)+Shift+W\t| 取消选择光标所在词  |\n| Ctrl(Command)+ - / + | \t折叠/展开代码  |\n| Ctrl(Command)+Shift+ - / +\t| 折叠/展开全部代码  |\n| Ctrl(Command)+Shift+.\t| 折叠/展开当前花括号中的代码  |\n| Ctrl(Command)+ ] / [ | \t跳转到代码块结束/开始处  |\n| F2 或 Shift+F2\t | 高亮错误或警告快速定位  |\n| Ctrl(Command)+Shift+C\t | 复制路径  |\n| Ctrl(Command)+Alt(Option)+Shift+C | \t复制引用，必须选择类名  |\n| Alt(Option)+Up/Down | \t在方法间快速移动定位  |\n| Shift+F1 | \t要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器  |\n| Ctrl(Command)+G | \t定位行  |\n\n\n## 查找  \n\n| 按键\t |  说明  |\n| ------| --------|\n| Ctrl(Command)+F | \t在当前窗口查找文本  |\n| Ctrl(Command)+Shift+F\t|  在指定环境下查找文本|   \n| F3 | \t向下查找关键字出现位置   |\n| Shift+F3 | \t向上一个关键字出现位置 |    \n| Ctrl(Command)+R | \t在当前窗口替换文本 |   \n| Ctrl(Command)+Shift+R | \t在指定窗口替换文本 |  \n| Ctrl(Command)+N\t|  查找类  |\n| Ctrl(Command)+Shift+N\t|  查找文件 |   \n| Ctrl(Command)+Shift+Alt(Option)+N | \t查找项目中的方法或变量 |  \n| Ctrl(Command)+B | \t查找变量的来源  |\n| Ctrl(Command)+Alt(Option)+B | \t快速打开光标处的类或方法  |\n| Ctrl(Command)+Shift+B | \t跳转到类或方法实现处  |\n| Ctrl(Command)+E | \t最近打开的文件  |\n| Alt(Option)+F3 | \t快速查找，效果和Ctrl(Command)+F相同  |\n| F4 | \t跳转至定义变量的位置  |\n| Alt(Option)+F7 | \t查询当前元素在工程中的引用  |\n| Ctrl(Command)+F7 | \t查询当前元素在当前文件中的引用，然后按 F3 可以选择  |\n| Ctrl(Command)+Alt(Option)+F7 | \t选中查询当前元素在工程中的引用  |\n| Ctrl(Command)+Shift+F7 | \t高亮显示匹配的字符，按 Esc 高亮消失  |\n| Ctrl(Command)+Alt(Option)+F7 | \t查找某个方法的所有调用地方  |\n| Ctrl(Command)+Shift+Alt(Option)+N\t| 查找类中的方法或变量  |\n| Ctrl(Command)+Shift+O | \t弹出显示查找内容  |\n| Ctrl(Command)+Alt(Option)+Up/Down | \t快速跳转搜索结果  |\n| Ctrl(Command)+Shift+S | \t高级搜索、搜索结构  |\n\n## 重构\n\n| 按键\t|  说明  |\n|----|----|\n| F5 | \t复制 |  \n| F6\t| 移动  |\n| Alt(Option)+Delete | \t安全删除 |   \n| Ctrl(Command)+U\t| 转到父类  |\n| Ctrl(Command)+O\t| 重写父类的方法 |  \n| Ctrl(Command)+I\t| 实现方法  |\n| Ctrl(Command)+Alt(Option)+N\t| 内联  |\n| Ctrl(Command)+Alt(Option)+Shift+T\t| 弹出重构菜单  |\n| Shift+F6\t| 重构-重命名   |\n| Ctrl(Command)+Alt(Option)+M\t| 提取代码组成方法  |\n| Ctrl(Command)+Alt(Option)+C\t| 将变量更改为常量  |\n| Ctrl(Command)+Alt(Option)+V\t| 定义变量引用当前对象或者方法的返回值 |  \n| Ctrl(Command)+Alt(Option)+F\t| 将局部变量更改为类的成员变量 |  \n| Ctrl(Command)+Alt(Option)+P\t| 将变量更改为方法的参数  |\n\n## 调试  \n\n| 按键 |\t说明  |\n|-----|-----|\n| F8\t | 跳到下一步  |\n| Shift+F8\t| 跳出函数、跳到下一个断点  |\n| Alt(Option)+Shift+F8 |\t强制跳出函数  |\n| F7 |\t进入代码   |\n| Shift+F7 |\t智能进入代码  |\n| Alt(Option)+Shift+F7 |\t强制进入代码  |\n| Alt(Option)+F9 |\t运行至光标处  |\n| Ctrl(Command)+Alt(Option)+F9 |\t强制运行至光标处  |\n| Ctrl(Command)+F2 |\t停止运行  |\n| Alt(Option)+F8 |\t计算变量值  |\n\n## VCS  \n\n| 按键  | 说明 |\n|------| ----|  \n| Alt(Option)+ ~  | VCS 操作菜单 |  \n| Ctrl(Command)+K | 提交更改 |  \n| Ctrl(Command)+T | 更新项目 |  \n| Ctrl(Command)+Alt(Option)+Shift+D | 显示变化 |  \n\n谢谢阅读完这篇整理的文章，希望从中能够收获知识。  \n转载请注明出处：[www.aman.site](www.aman.site)\n\n> 参考文献：  \n> [Android Cool Posts](https://greenrobot.me/android-dev-tool/android-studio-dev-tips-1/)  \n> [Android Studio Tips Of the Day - Roundup #1  ](http://www.developerphil.com/android-studio-tips-of-the-day-roundup-1/)  \n> [Android Studio Tips Of the Day - Roundup #2  ](http://www.developerphil.com/android-studio-tips-of-the-day-roundup-2/)  \n> [Android Studio Tips Of the Day - Roundup #3  ](http://www.developerphil.com/android-studio-tips-of-the-day-roundup-3/)  \n> [Android Studio Tips Of the Day - Roundup #4  ](http://www.developerphil.com/android-studio-tips-of-the-day-roundup-4/)  \n> [Android Studio Tips Of the Day - Roundup #5  ](http://www.developerphil.com/android-studio-tips-of-the-day-roundup-5/)  \n> [Android Studio Tips Of the Day - Roundup #6  ](http://www.developerphil.com/android-studio-tips-of-the-day-roundup-6/)  \n","source":"_posts/AndroidStudio_shortcut_key.md","raw":"---\nlayout:     post\ntitle: AndroidStudio快捷键大全\nsubtitle:   \"介绍AndroidStudio常用的快捷键功能，收集了所有的Android Studio Tips Of the Day的内容\"\ndate: 2016-05-03 18:18:18\nauthor:     \"JianGuo Yang\"\nheader-img: \"post-bg-androidstudio.jpg\"\ntags: AndroidStudio\ndescription: 介绍AndroidStudio常用的快捷键功能，收集了所有的Android Studio Tips Of the Day的内容\n---\n\n\n## 高亮所有\nos X: ** command + shift + F7  **  \nWindows Or Linux: ** ctrl+Shift+F7 **  \n\n![hight light all](01-highlight.gif)\n* 高亮代码方法中的“return” 或者 “throw” 也会高亮这个方法的所有出口。\n* 高亮后可使用\"F3\"或“shift + F3”上下选择。\n* Esc 或者再次使用该快捷键，可以取消高亮。\n\n<!--more-->\n\n## 在方法和内部类之间跳转\nOS X: ** Ctrl + ↑ / ↓ **  \nWindows Or Linux: ** Alt+ ↑ / ↓**  \n\n![02-move_between_methods](02-move_between_methods.gif)\n\n## 跳转到已经打开的下一个/上一个文件\nOS X: ** Ctrl + ← / → **  \nWindows Or Linux: ** Alt+  ← / →**  \n\n## 快速定位到类中的方法/内部类/成员变量\nOS X: ** Command+F12**  \nWindows Or Linux: ** Ctrl+F12 **   \n\n![03-filestructure](03-filestructure.gif)\n* 你可以使用驼峰字符来过滤候选方法列表。例如:输入 “oCr” 就可以找到 “onCreate”方法。\n* 你可以选择是否展示继承的成员变量。如勾选了\"show inherited members\"就可以很方便的查找继承自父类的成员变量。\n* 你可以选择是否展示匿名类。如勾选了\"show Anonymous classes\", 就可以很方便的查找 OnClickListener里面的OnClick方法了。\n\n## 显示方法的调用层级关系\nOS X: ** Ctrl+Alt+H **  \nWindows Or Linux: ** Ctrl+Alt+H **  \n\n![04-callinghierarchy](04-callinghierarchy.gif)\n> 注，ubuntu上与输入法快捷键冲突无法使用\n\n## 快速显示变量或方法的定义\nOS X: ** Alt+Space**  \nWindows Or Linux: ** Ctrl+Shift+i**  \n如果你想立马知道某个类或者方法的来源同时又不想丢掉当前的编码环境，你可以试试这个快捷键。  \n\n![05-quickdefinition](05-quickdefinition.gif)\n\n## 快速收缩或者展开代码块\nOS X : ** Alt + +/- **  \nWindows Or Linux: ** Ctrl +/- **\n\n![06-codefolding](06-codefolding.gif)\n\n* 可以使用 Ctrl + Shift +/- ** 收缩或者展开文件中的所有方法\n* 多次使用会逐级收缩或者展开\n> 你可以在“Editor → Code Folding”自定义你的代码折叠范围\n\n## 书签\n### 默认书签\nOS X : ** F3 **   \nWindows Or Linux : ** F11 **\n### 带字母或者数字的标签\nOS X : ** Alt+F3 **  \nWindows Or Linux : ** Ctrl+F11 **   \n> 按下此快捷键就可以在你的当前光标所在行打上标签，并提供字母或者数字标记。如果你选择的是数字标记，那么可以通过ctrl+对应的数字直接跳转至相应位置。  \n\n### 展示标签\nOS X : ** Command+F3**  \nWindows Or Linux : ** Shift+F11**  \n\n![07-bookmarks](07-bookmarks.gif)\n\n## 查找Android Studio的菜单选项\nOS X :   ** Command+Shift+A**  \nWindows Or Linux : ** Ctrl+Shift+A**  \n你可以通过输入菜单名来查找任意的菜单选项，这对那些使用频率低的操作很有效果。\n\n![08-findaction](08-findaction.gif)\n\n> 如果这个选项有对应的快捷方式，那么这个快捷键会在列表旁边显示。  \n\n## 行操作\n----\n### 移动整行\nOS X : ** Alt+Shift+ ↑ / ↓**   \nWindows Or Linux: ** Alt+Shift+ ↑ / ↓**  \n\n![09-movelines](09-movelines.gif)\n\n### 代码行合并\nMac OS : ** Ctrl+Shift+j **  \nWindows & Linux : ** Ctrl+Shift+j **  \n按照语法规则将可以合并的代码行进行合并，保持代码精简。它主要适用以下规则：  \n* 将变量声明定义和赋值合并;\n* 合并多行字符串的时候，会移掉“+“和双引号;\n* 合并两行评论代码时，评论变成一行，会去掉另一行的“//”;\n\n![18-joinlines](18-joinlines.gif)\n\n### 删除整行\nOS X : ** Command + Backspace**  \nWindows Or Linux : ** Ctrl + Y**  \n\n![10-deleteline](10-deleteline.gif)\n\n### 复制整行\nMac OS: ** Command+D**  \nWindows & Linux: ** Ctrl+D**  \n这个快捷键的厉害之处在于它会复制当前行同时又不会影响系统的剪贴板。\n![11-duplicate_lines](11-duplicate_lines.gif)\n\n----\n\n## 上下移动整个方法\nMac OS : ** Command+Alt+↑/↓ **  \nWindows & Linux : ** Ctrl+Shift+↑/↓ **  \n\n![15-movemethods](15-movemethods.gif)\n\n\n## 展开或者收缩选择区域\nMac OS : ** alt + ↑/↓ **  \nWindows & Linux: ** (Ctrl+w )/(Ctrl+Shift+w) **   \n扩大（或者缩小）当前的选择范围。比如当前选中一个变量，此操作会把选中范围扩展至句子，方法等。\n\n![12-expand_shrink_selection](12-expand_shrink_selection.gif)\n\n## 包裹代码段\nMac OS : ** Command+Alt+t **  \nWindows & Linux : ** Ctrl+Alt+t **  \n选中一段代码段，然后使用if语句或者循环结构等包裹代码。  \n\n![13-surround_with.gif](13-surround_with.gif)  \n## 删除代码块的包裹\nMac OS : ** Command+Shift+Delete **  \nWindows & Linux : ** Ctrl+Shift+Delete **\n移除代码结构中的包裹代码，比如 if 语句,  while 循环, 或者 try/catch 语句。\n![20-unwrap](20-unwrap.gif)\n\n## 查询最近编辑的文件和使用的工作区\nMac OS : ** Command+e **  \nWindows & Linux : ** Ctrl+e **  \n\n![14-recents](14-recents.gif)\n\n## 代码模板\nMac OS : ** Command+j **  \nWindows & Linux : ** Ctrl+j **  \n此快捷键可以让你迅速地在文件中插入预留的代码片段。你也可以定制你自己的代码片段。\n\n![15-live_templates](15-live_templates.gif)\n\n## 代码结构自动补全\nMac OS : ** Command+Shift+Enter **  \nWindows & Linux : ** Ctrl+Shift+Enter **  \n这个操作会将还未完成的代码结构补全。一般可以补全的情形如下：\n\n* 在代码行后面添加分号；\n* 为 if, while 或者 for 语句添加括号\n* 为方法声明添加括号。\n\n![16-completestatement](16-completestatement.gif)\n\n## 回到上次编辑的位置\nMac OS : ** Command+Shift+backspace **  \nWindows & Linux : ** Ctrl+Shift+backspace **  \n\n![17-navigate-previous-changes](17-navigate-previous-changes.gif)\n\n## 在代码中根据标签选择功能（Select In）\nMac OS : ** Alt+F1 **  \nWindows:** Alt+F1 **  \nLinux : 与系统快捷键冲突\n在代码中执行此快捷方式可以快速定位到select Target所示的功能中。\n\n![19-select-in](19-select-in.gif)\n\n## 调试常用快捷键\n\n----\n\n### 添加断点（Toggle Breakpoints）\nOSX: ** Cmd+F8 **  \nWindows/Linux: ** Ctrl+F8 **  \n相应大家都知道使用鼠标左键点击行首添加断点，使用快捷键添加断点的方式如下：\n![21-togglebreakpoints](21-togglebreakpoints.gif)\n\n### 条件断点（Conditional Breakpoints）\n通过右键断点，可以对一个断点加入条件。只有当满足条件时，才会进入到断点中。调试神技，只对自己关心的情况进行调试，不浪费时间。\n\n![22-conditionalbreakpoint](22-conditionalbreakpoint.gif)\n\n### 在断点上打log\n如果你不想在调试过程中添加log，并且重新编译，可以在断点直接打log，查看结果。\n鼠标右键点击断点，取消选择“suspend”,并在 “Log evaluated Expression” 中输入你想要打印的log信息。实例如下：  \n![23-loggingbreakpoints](23-loggingbreakpoints.gif)\n\n### 临时断点\n鼠标（ubuntu上无效）：** Alt+LeftClick ** in the left gutter  \nMac: ** Cmd+Alt+Shift+F8 **  \nWindows/Linux: ** Ctrl+Alt+Shift+F8 **  \n这种方式可以添加一个临时断点，当第一次执行完后，会自动消失。\n\n### disable断点\n在已经完成了一些条件，或者打印了断点，不再需要这些断点的时候，你可以使这些断点无效。  \nMouse(ubuntu 上无效):在已经存在的断点上按住ALT并点击左键： ** Alt+LeftClick **   \n> 没有默认的快捷键，如果需要的话，可以创建快捷键。\n\n![25-disablebreakpoint](25-disablebreakpoint.gif)\n\n### 附加调试器\n及时你没有在调试模式下启动app，你也可以通过以下方式开启调试器。你不需要重新在调试模式下调用app。这是非常有用的。  \nMouse: 点击图标，选择“ Attach debugger to Android Process”\n> 没有默认的快捷键，如果需要的话，可以创建快捷键。\n\n### 评估表达式（Evaluate Expression）\n快捷键：** Alt+F8 **    \n这个功能用来检查变量的内容，评估几乎任何有效的Java表达式。要知道，如果你转变了状态，它会保持下去，当你恢复程序的执行。\n![27-evaluateexpression](27-evaluateexpression.gif)\n\n### 检查变量（Inspect Variable）\n快捷键：在调试时，在表达式中按住ALT键点击鼠标左键** Alt+LeftClick  **  \n不需要打开“Evaluate Expression”对话框，即可查看一个评估一个表达式。\n\n![28-mouse_evaluate_expression](28-mouse_evaluate_expression.gif)\n\n### 标记对象（Mark Object）\n* Mouse: 右击并选择 “Mark Object”  \n* OSX : 选中对象，按 F3  \n* Windows/Linux: 选中对象，按 F11  \n\n在调试过程中，你可以使用这个命令给特定的对象添加一个标签，以便于以后识别该对象。\n\n![29-markobject](29-markobject.gif)\n\n### 分析堆栈信息\n* Menu: Analyze → Analyze Stacktrace\n* Find Actions(ctrl+shift+a)输入\"analyze stacktrace\"即可查看堆栈信息。  \n\n可以从你的剪切板中加载log的堆栈信息，并且使得他是可点击的。对于我们从bug报告中摘取一段堆栈进行分析非常有利。  \n\n![30-analyzestacktrace](30-analyzestacktrace.gif)\n\n> 你可以使用\"ProGuard Unscramble\"插件来分析混淆后的堆栈信息。\n\n### 分析数据流\n* Menu: Analyze → Analyze Data Flow to Here\n* Find action: Analyze Data Flow to Here\n\n可以查看当前变量、参数或field调用的路径！这是非常有用的当你进入到一个你不熟悉的代码环境中，并且你想了解这个参数是怎样传到这里的。  \n这也有一个反向操作“Analyze Data Flow from Here”，它将会显示变量、field或返回类型的被调用的路径。\n\n![31-analyzedataflow](31-analyzedataflow.gif)\n\n## 显示正在执行的行（Show Execution Point）\n快捷键：（debug模式下） : Alt+F10\n将光标移动到当前正在调试的行。通常用于下列情况：\n* 你中断的某些地方\n* 你开始在这个文件查看然后跳到了其它一些文件\n* 调用这个快捷键可以返回到你正在一步一步的调试会话的地方\n\n![36-executionpoint](36-executionpoint.gif)\n\n----\n## 多行选择\n* Mac : ** Ctrl+G **  \n* Windows/Linux: ** Alt+J **  \n\n这一条格外的精彩！它可以同时选择多行，进行编辑。这就意味着你可以在同一个文档中有多个光标。\n\n![32-multiselection](32-multiselection.gif)\n\n## 多列选择（Column Selection）\n* Mouse(ubuntu上无效): Alt+鼠标拖拽  \n* Mac : ** Cmd+Shift+8 **  \n* Windows/Linux: ** Shift+Alt+Insert **\n\n![ 33-columnselection.gif](33-columnselection.gif)\n\n> 和多行编辑的区别在于，多列编辑只能是每一行的相同列一起编辑。\n\n## 后缀补全（Postfix Completion）\n\n这个不是非常直观的，但是相当的给力，基本上，它是无需按一连串左键到头部，实现方法的包裹的最好的方式了。\n比较常用的有：\n* .for (for a foreach)\n* .format (wraps a string in String.format())\n* .cast (wraps a statement in a type cast)\n\n![33-postfixcompletion](33-postfixcompletion.gif)\n\n## 与剪切板代码进行比较（Compare With Clipboard）\n* Mouse: right-click the selection and select Compare With Clipboard  \n* Find action: compare with clipboard\n\n用来比较当前你选择的代码和剪切板中的代码有什么区别。个人觉得用处不大。\n![34-comparewithclipboard](34-comparewithclipboard.gif)\n\n## 停止进程\n* Mac : Cmd+F2\n* Windows/Linux: Ctrl+F2\n\n将会终止正在运行的最近的task或者显示一个可选的可能需要终止的task列表。用于停止调试或者终止一个build。\n\n![35-stoprocess](35-stoprocess.gif)\n\n## VCS 操作弹窗\nMac: ** Ctrl+V **  \nWindows/Linux: ** Alt+\\` **   \n显示一些常用的版本控制命令。如git commit。  \n\n![37-vcspopup](37-vcspopup.gif)\n\n## 与分支进行比较（Compare With Branch (Git)）\nMenu (for git): ** VCS -> Git -> Compare With Branch **   \nFind Actions: ** Compare With Branch **  \n\n如果你的项目是在git下，你可以同另一个分支比较你的文件或者文件夹。特别用来比较你的修改和主分支差异多大。\n\n![38-comparewithbranch](38-comparewithbranch.gif)\n\n## 回车键和TAB键的区别\n你可以使用Enter或Tab来自动补全代码。它们之间有一个有趣的差异：使用Enter将会自动完成语句。使用Tab将会自动完成删除光标到下一个点号，括号，分号或空格出现前的内容。\n\n![45-codecompletionentertab](45-codecompletionentertab.gif)\n\n## 跳转到父类的方法\nMac: ** Cmd+U **  \nWindows/Linux: ** Ctrl+U **  \n\n如果光标在一个复写自父类的方法中（例如Activity#onCreate()方法），使用该快捷键，将会到达该方法的父类的实现。如果光标停留在类名上，则跳转到父类。\n\n![39-navigatetoparent](39-navigatetoparent.gif)\n\n## 返回到编辑器（Return to the Editor）\n返回并不关闭面板：Escape   \n返回并关闭面板：Shift+Escape\n\n![40-returntoeditor](40-returntoeditor.gif)\n\n## 跳到最近使用的工具窗口\nMac:F12   \nWindows/Linux:F12  \n\n有时候，你从面板返回到编辑器，但是你发现不得不再返回到这个面板。例如：浏览find usages。使用这个快捷键，你可以不用鼠标返回到这个面板。\n\n![41-lasttoolwindow](41-lasttoolwindow.gif)\n\n## 隐藏所有面板（Hide All Panels）\nMac: ** Cmd+Shift+F12 **   \nwindows/linux: ** Ctrl+Shift+F12 **  \n\n让编辑器进入某种形式上的全屏模式。再次调用这个快捷键可以返回所有面板到它们之前的状态。\n\n![42-hideallwindows](42-hideallwindows.gif)\n\n## 通过编号打开面板\nMac: ** Cmd+Number **   \nwindows/linux: ** Alt+Number **  \n\n可以通过面板上标签对应的数字打开相应的面板。\n\n![43-openpanelbynumber](43-openpanelbynumber.gif)\n\n## 参数信息\nMac:**  Cmd+P **  \nwindows/linux: ** Ctrl+P **    \n\n![44-parameterinfo](44-parameterinfo.gif)\n\n## 切换器\nShortcut:** Ctrl+Tab **\n\n这个功能和IDE的alt+tab/cmd+tab差不多。它允许你导航到一个tab或一个panel。一旦它被打开，只要你按住ctrl键，你可以使用数字或字母快捷键快速导航。你也可以通过按下backspace关闭一个打开的文件。\n\n![46-switcher](46-switcher.gif)\n\n## 上下文信息（Context Info）\nShortcut:** Ctrl+Shift+Q **    \n\n这个将会显示你当前位置，当你的定义范围超出滚动的区域时。通常，这将会是类或内部类的名称，但它也可能是当前方法名。在我看来，它最好的使用是快速查看当前类继承或实现。 它也可以在xml文件中使用。\n\n![47-contextinfo](47-contextinfo.gif)\n\n## 代码重构\nMac: ** Ctrl+T **  \nWindows/Linux: ** Ctrl+Alt+Shift+T **  \n这是一个针对当前选择的代码显示上下文所有可用的重构的快捷键。这个列表可以通过键盘进行检索并且你也可以使用左侧的数字进行快速访问\n\n![48-refactorthis](48-refactorthis.png)\n\n## 跳转到最近编辑的文件（Recently Changed Files）\nMac: ** Cmd+Shift+E **  \nWindows/Linux: ** Ctrl+Shift+E **  \n\n这个和“Recents”弹出框有所不同，这个列出是在本地最近被修改的文件。\n\n![49-recentlyedited](49-recentlyedited.gif)\n\n## 提取变量\nMac:** Cmd+Alt+V **\nWindows/Linux:** Ctrl+Alt+V **\n\n这是一个可以不用通过重构菜单，来提取变量的快捷键。  \n\n![51-extractvariable](51-extractvariable.gif)\n\n>额外的技巧：  \n如果你想修改声明类型为一些更通用的（如：List而不是ArrayList）,你可以使用Shift+Tab它会给出一个可用类型的列表。\n\n## 提取参数\nMac:Cmd+Alt+P\nWindows/Linux:Ctrl+Alt+P\n\n这是一个不用通过重构菜单提取参数的快捷键。\n这个功能是有用的当你意识到一个方法可能是泛型时通过提取一部分做为一个参数。它作用的方式是它会使用当前值作为一个参数然后复制原先的值作为每个调用者的参数。  \n![52-extractparam](52-extractparam.gif)\n\n>额外的技巧：  \n你也可以保持原来的方法使用它声明一个新方法通过“delegate”选项。  \n\n\n## 提取方法\nMac: Cmd+Alt+M\nWindows/Linux: Ctrl+Alt+M\n\n可以提取一个代码块做为一个新的方法。这个功能是相当有用的。无论什么时候你遇到一个开始变得有点复杂的方法，你可以使用这个安全地抽取一部分到另一个方法。我所说的安全是因为IDE不会像我们可能会犯一个愚蠢的复制粘贴错误。\n\n![53-extractmethod](53-extractmethod.gif)\n\n> 额外的技巧：  \n当你在抽取对话框，你可以修改方法的可见性和参数名称。\n\n## inline\nMac: Cmd+Alt+N\nWindows/Linux: Ctrl+Alt+N\n\n你使用提取有一点疯狂并且现在有太多的东西？你可以使用反向操作，它叫做“inline”。\n它可以作用于方法，Fields，参数和变量。\n\n![54-inline](54-inline.gif)\n\n## 重命名\n快捷键：** Shift+F6 **  \n![55-rename.gif](55-rename.gif)\n\n\n## Pull Up / Push Down\nMac: Ctrl+T 然后选择成员   \nWindows/Linux: Ctrl+Alt+Shift+T 然后选择成员  \n\n当我们谈论上拉成员，我们的意思是我们将会让当前类的一些成员（通常是方法或field）发送它到父类或接口。\n\n如果继承于一个类，内容会被移动。如果是实现的一个接口，它将会声明方法作为接口的一部分，在你的类中保持原有的方法并且添加 @Override注解。\n当我们谈论下推成员，这正好是反向操作，我们会从父类或接口发送一些成员到子类\n\n![56-pullupdown.gif](56-pullupdown.gif)\n\n\n# 索引\n\n| 按键\t| 说明 |\n| ------| -----|\n| Ctrl(Command)+C\t| 复制当前行或选中的内容  |\n| Ctrl(Command)+D\t| 粘贴当前行或选中的内容  |\n| Ctrl(Command)+X\t| 剪切当前行或选中的内容  |\n| Ctrl(Command)+Y\t| 删除行  |\n| Ctrl(Command)+Z | \t倒退  |\n| Ctrl(Command)+Shift+Z | 向前 |    \n| Alt(Option)+Enter | 自动修正 |\n| Ctrl(Command)+Alt(Option)+L | 格式化代码  |\n| Ctrl(Command)+Alt(Option)+I | 将选中的代码进行自动缩进编排  |\n| Ctrl(Command)+Alt(Option)+O |\t优化导入的类和包  |\n| Alt(Option)+Insert | 得到一些Intention Action，可以生成构造器、Getter、Setter、将 == 改为equals() 等  |\n| Ctrl(Command)+Shift+V\t| 选最近使用的剪贴板内容并插入  |\n| Ctrl(Command)+Alt(Option)+Shift+V | 简单粘贴  |\n| Ctrl(Command)+Shift+Insert\t| 选最近使用的剪贴板内容并插入（同Ctrl(Command)+Shift+V）  |\n| Ctrl(Command)+Enter\t| 在当前行的上面插入新行，并移动光标到新行（此功能光标在行首时有效）  |\n| Shift+Enter\t| 在当前行的下面插入新行，并移动光标到新行  |\n| Ctrl(Command)+J\t| 自动代码  |\n| Ctrl(Command)+Alt(Option)+T\t| 把选中的代码放在 try{} 、if{} 、 else{} 里  |\n| Shift+Alt(Option)+Insert\t| 竖编辑模式  |\n| Ctrl(Command)+ /\t| 注释 //  |\n| Ctrl(Command)+Shift+ /\t| 注释 /…/  |\n| Ctrl(Command)+Shift+J\t| 合并成一行  |\n| F2/Shift+F2\t| 跳转到下/上一个错误语句处  |\n| Ctrl(Command)+Shift+Back\t| 跳转到上次编辑的地方  |\n| Ctrl(Command)+Alt(Option)+Space\t| 类名自动完成  |\n| Shift+Alt(Option)+Up/Down\t| 内容向上/下移动  |\n| Ctrl(Command)+Shift+Up/Down | \t语句向上/下移动 |   \n| Ctrl(Command)+Shift+U | \t大小写切换  |\n| Tab | \t代码标签输入完成后，按 Tab，生成代码  |\n| Ctrl(Command)+Backspace\t| 按单词删除 |  \n| Ctrl(Command)+Shift+Enter | \t语句完成 |   \n| Ctrl(Command)+Alt(Option)+J\t| 用动态模板环绕  |\n\n## 文件  \n\n| 按键\t| 说明 |\n| ------| ------|\n| Ctrl(Command)+F12\t| 显示当前文件的结构  |\n| Ctrl(Command)+H\t| 显示类继承结构图   |\n| Ctrl(Command)+Q\t| 显示注释文档  |\n| Ctrl(Command)+P\t| 方法参数提示  |\n| Ctrl(Command)+U\t| 打开当前类的父类或者实现的接口  |\n| Alt(Option)+Left/Right | \t切换代码视图  |\n| Ctrl(Command)+Alt(Option)+Left/Right | \t返回上次编辑的位置  |\n| Alt(Option)+Up/Down\t| 在方法间快速移动定位  |\n| Ctrl(Command)+B\t| 快速打开光标处的类或方法  |\n| Ctrl(Command)+W\t| 选中代码，连续按会有其他效果  |\n| Ctrl(Command)+Shift+W\t| 取消选择光标所在词  |\n| Ctrl(Command)+ - / + | \t折叠/展开代码  |\n| Ctrl(Command)+Shift+ - / +\t| 折叠/展开全部代码  |\n| Ctrl(Command)+Shift+.\t| 折叠/展开当前花括号中的代码  |\n| Ctrl(Command)+ ] / [ | \t跳转到代码块结束/开始处  |\n| F2 或 Shift+F2\t | 高亮错误或警告快速定位  |\n| Ctrl(Command)+Shift+C\t | 复制路径  |\n| Ctrl(Command)+Alt(Option)+Shift+C | \t复制引用，必须选择类名  |\n| Alt(Option)+Up/Down | \t在方法间快速移动定位  |\n| Shift+F1 | \t要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器  |\n| Ctrl(Command)+G | \t定位行  |\n\n\n## 查找  \n\n| 按键\t |  说明  |\n| ------| --------|\n| Ctrl(Command)+F | \t在当前窗口查找文本  |\n| Ctrl(Command)+Shift+F\t|  在指定环境下查找文本|   \n| F3 | \t向下查找关键字出现位置   |\n| Shift+F3 | \t向上一个关键字出现位置 |    \n| Ctrl(Command)+R | \t在当前窗口替换文本 |   \n| Ctrl(Command)+Shift+R | \t在指定窗口替换文本 |  \n| Ctrl(Command)+N\t|  查找类  |\n| Ctrl(Command)+Shift+N\t|  查找文件 |   \n| Ctrl(Command)+Shift+Alt(Option)+N | \t查找项目中的方法或变量 |  \n| Ctrl(Command)+B | \t查找变量的来源  |\n| Ctrl(Command)+Alt(Option)+B | \t快速打开光标处的类或方法  |\n| Ctrl(Command)+Shift+B | \t跳转到类或方法实现处  |\n| Ctrl(Command)+E | \t最近打开的文件  |\n| Alt(Option)+F3 | \t快速查找，效果和Ctrl(Command)+F相同  |\n| F4 | \t跳转至定义变量的位置  |\n| Alt(Option)+F7 | \t查询当前元素在工程中的引用  |\n| Ctrl(Command)+F7 | \t查询当前元素在当前文件中的引用，然后按 F3 可以选择  |\n| Ctrl(Command)+Alt(Option)+F7 | \t选中查询当前元素在工程中的引用  |\n| Ctrl(Command)+Shift+F7 | \t高亮显示匹配的字符，按 Esc 高亮消失  |\n| Ctrl(Command)+Alt(Option)+F7 | \t查找某个方法的所有调用地方  |\n| Ctrl(Command)+Shift+Alt(Option)+N\t| 查找类中的方法或变量  |\n| Ctrl(Command)+Shift+O | \t弹出显示查找内容  |\n| Ctrl(Command)+Alt(Option)+Up/Down | \t快速跳转搜索结果  |\n| Ctrl(Command)+Shift+S | \t高级搜索、搜索结构  |\n\n## 重构\n\n| 按键\t|  说明  |\n|----|----|\n| F5 | \t复制 |  \n| F6\t| 移动  |\n| Alt(Option)+Delete | \t安全删除 |   \n| Ctrl(Command)+U\t| 转到父类  |\n| Ctrl(Command)+O\t| 重写父类的方法 |  \n| Ctrl(Command)+I\t| 实现方法  |\n| Ctrl(Command)+Alt(Option)+N\t| 内联  |\n| Ctrl(Command)+Alt(Option)+Shift+T\t| 弹出重构菜单  |\n| Shift+F6\t| 重构-重命名   |\n| Ctrl(Command)+Alt(Option)+M\t| 提取代码组成方法  |\n| Ctrl(Command)+Alt(Option)+C\t| 将变量更改为常量  |\n| Ctrl(Command)+Alt(Option)+V\t| 定义变量引用当前对象或者方法的返回值 |  \n| Ctrl(Command)+Alt(Option)+F\t| 将局部变量更改为类的成员变量 |  \n| Ctrl(Command)+Alt(Option)+P\t| 将变量更改为方法的参数  |\n\n## 调试  \n\n| 按键 |\t说明  |\n|-----|-----|\n| F8\t | 跳到下一步  |\n| Shift+F8\t| 跳出函数、跳到下一个断点  |\n| Alt(Option)+Shift+F8 |\t强制跳出函数  |\n| F7 |\t进入代码   |\n| Shift+F7 |\t智能进入代码  |\n| Alt(Option)+Shift+F7 |\t强制进入代码  |\n| Alt(Option)+F9 |\t运行至光标处  |\n| Ctrl(Command)+Alt(Option)+F9 |\t强制运行至光标处  |\n| Ctrl(Command)+F2 |\t停止运行  |\n| Alt(Option)+F8 |\t计算变量值  |\n\n## VCS  \n\n| 按键  | 说明 |\n|------| ----|  \n| Alt(Option)+ ~  | VCS 操作菜单 |  \n| Ctrl(Command)+K | 提交更改 |  \n| Ctrl(Command)+T | 更新项目 |  \n| Ctrl(Command)+Alt(Option)+Shift+D | 显示变化 |  \n\n谢谢阅读完这篇整理的文章，希望从中能够收获知识。  \n转载请注明出处：[www.aman.site](www.aman.site)\n\n> 参考文献：  \n> [Android Cool Posts](https://greenrobot.me/android-dev-tool/android-studio-dev-tips-1/)  \n> [Android Studio Tips Of the Day - Roundup #1  ](http://www.developerphil.com/android-studio-tips-of-the-day-roundup-1/)  \n> [Android Studio Tips Of the Day - Roundup #2  ](http://www.developerphil.com/android-studio-tips-of-the-day-roundup-2/)  \n> [Android Studio Tips Of the Day - Roundup #3  ](http://www.developerphil.com/android-studio-tips-of-the-day-roundup-3/)  \n> [Android Studio Tips Of the Day - Roundup #4  ](http://www.developerphil.com/android-studio-tips-of-the-day-roundup-4/)  \n> [Android Studio Tips Of the Day - Roundup #5  ](http://www.developerphil.com/android-studio-tips-of-the-day-roundup-5/)  \n> [Android Studio Tips Of the Day - Roundup #6  ](http://www.developerphil.com/android-studio-tips-of-the-day-roundup-6/)  \n","slug":"AndroidStudio_shortcut_key","published":1,"updated":"2016-06-18T02:21:35.248Z","comments":1,"photos":[],"link":"","_id":"cipkjorwf00019x2n4hp2gusb","content":"<h2 id=\"高亮所有\"><a href=\"#高亮所有\" class=\"headerlink\" title=\"高亮所有\"></a>高亮所有</h2><p>os X: <strong> command + shift + F7  </strong><br>Windows Or Linux: <strong> ctrl+Shift+F7 </strong>  </p>\n<p><img src=\"01-highlight.gif\" alt=\"hight light all\"></p>\n<ul>\n<li>高亮代码方法中的“return” 或者 “throw” 也会高亮这个方法的所有出口。</li>\n<li>高亮后可使用”F3”或“shift + F3”上下选择。</li>\n<li>Esc 或者再次使用该快捷键，可以取消高亮。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"在方法和内部类之间跳转\"><a href=\"#在方法和内部类之间跳转\" class=\"headerlink\" title=\"在方法和内部类之间跳转\"></a>在方法和内部类之间跳转</h2><p>OS X: <strong> Ctrl + ↑ / ↓ </strong><br>Windows Or Linux: <strong> Alt+ ↑ / ↓</strong>  </p>\n<p><img src=\"02-move_between_methods.gif\" alt=\"02-move_between_methods\"></p>\n<h2 id=\"跳转到已经打开的下一个-上一个文件\"><a href=\"#跳转到已经打开的下一个-上一个文件\" class=\"headerlink\" title=\"跳转到已经打开的下一个/上一个文件\"></a>跳转到已经打开的下一个/上一个文件</h2><p>OS X: <strong> Ctrl + ← / → </strong><br>Windows Or Linux: <strong> Alt+  ← / →</strong>  </p>\n<h2 id=\"快速定位到类中的方法-内部类-成员变量\"><a href=\"#快速定位到类中的方法-内部类-成员变量\" class=\"headerlink\" title=\"快速定位到类中的方法/内部类/成员变量\"></a>快速定位到类中的方法/内部类/成员变量</h2><p>OS X: <strong> Command+F12</strong><br>Windows Or Linux: <strong> Ctrl+F12 </strong>   </p>\n<p><img src=\"03-filestructure.gif\" alt=\"03-filestructure\"></p>\n<ul>\n<li>你可以使用驼峰字符来过滤候选方法列表。例如:输入 “oCr” 就可以找到 “onCreate”方法。</li>\n<li>你可以选择是否展示继承的成员变量。如勾选了”show inherited members”就可以很方便的查找继承自父类的成员变量。</li>\n<li>你可以选择是否展示匿名类。如勾选了”show Anonymous classes”, 就可以很方便的查找 OnClickListener里面的OnClick方法了。</li>\n</ul>\n<h2 id=\"显示方法的调用层级关系\"><a href=\"#显示方法的调用层级关系\" class=\"headerlink\" title=\"显示方法的调用层级关系\"></a>显示方法的调用层级关系</h2><p>OS X: <strong> Ctrl+Alt+H </strong><br>Windows Or Linux: <strong> Ctrl+Alt+H </strong>  </p>\n<p><img src=\"04-callinghierarchy.gif\" alt=\"04-callinghierarchy\"></p>\n<blockquote>\n<p>注，ubuntu上与输入法快捷键冲突无法使用</p>\n</blockquote>\n<h2 id=\"快速显示变量或方法的定义\"><a href=\"#快速显示变量或方法的定义\" class=\"headerlink\" title=\"快速显示变量或方法的定义\"></a>快速显示变量或方法的定义</h2><p>OS X: <strong> Alt+Space</strong><br>Windows Or Linux: <strong> Ctrl+Shift+i</strong><br>如果你想立马知道某个类或者方法的来源同时又不想丢掉当前的编码环境，你可以试试这个快捷键。  </p>\n<p><img src=\"05-quickdefinition.gif\" alt=\"05-quickdefinition\"></p>\n<h2 id=\"快速收缩或者展开代码块\"><a href=\"#快速收缩或者展开代码块\" class=\"headerlink\" title=\"快速收缩或者展开代码块\"></a>快速收缩或者展开代码块</h2><p>OS X : <strong> Alt + +/- </strong><br>Windows Or Linux: <strong> Ctrl +/- </strong></p>\n<p><img src=\"06-codefolding.gif\" alt=\"06-codefolding\"></p>\n<ul>\n<li>可以使用 Ctrl + Shift +/- ** 收缩或者展开文件中的所有方法</li>\n<li>多次使用会逐级收缩或者展开<blockquote>\n<p>你可以在“Editor → Code Folding”自定义你的代码折叠范围</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"书签\"><a href=\"#书签\" class=\"headerlink\" title=\"书签\"></a>书签</h2><h3 id=\"默认书签\"><a href=\"#默认书签\" class=\"headerlink\" title=\"默认书签\"></a>默认书签</h3><p>OS X : <strong> F3 </strong><br>Windows Or Linux : <strong> F11 </strong></p>\n<h3 id=\"带字母或者数字的标签\"><a href=\"#带字母或者数字的标签\" class=\"headerlink\" title=\"带字母或者数字的标签\"></a>带字母或者数字的标签</h3><p>OS X : <strong> Alt+F3 </strong><br>Windows Or Linux : <strong> Ctrl+F11 </strong>   </p>\n<blockquote>\n<p>按下此快捷键就可以在你的当前光标所在行打上标签，并提供字母或者数字标记。如果你选择的是数字标记，那么可以通过ctrl+对应的数字直接跳转至相应位置。  </p>\n</blockquote>\n<h3 id=\"展示标签\"><a href=\"#展示标签\" class=\"headerlink\" title=\"展示标签\"></a>展示标签</h3><p>OS X : <strong> Command+F3</strong><br>Windows Or Linux : <strong> Shift+F11</strong>  </p>\n<p><img src=\"07-bookmarks.gif\" alt=\"07-bookmarks\"></p>\n<h2 id=\"查找Android-Studio的菜单选项\"><a href=\"#查找Android-Studio的菜单选项\" class=\"headerlink\" title=\"查找Android Studio的菜单选项\"></a>查找Android Studio的菜单选项</h2><p>OS X :   <strong> Command+Shift+A</strong><br>Windows Or Linux : <strong> Ctrl+Shift+A</strong><br>你可以通过输入菜单名来查找任意的菜单选项，这对那些使用频率低的操作很有效果。</p>\n<p><img src=\"08-findaction.gif\" alt=\"08-findaction\"></p>\n<blockquote>\n<p>如果这个选项有对应的快捷方式，那么这个快捷键会在列表旁边显示。  </p>\n</blockquote>\n<h2 id=\"行操作\"><a href=\"#行操作\" class=\"headerlink\" title=\"行操作\"></a>行操作</h2><hr>\n<h3 id=\"移动整行\"><a href=\"#移动整行\" class=\"headerlink\" title=\"移动整行\"></a>移动整行</h3><p>OS X : <strong> Alt+Shift+ ↑ / ↓</strong><br>Windows Or Linux: <strong> Alt+Shift+ ↑ / ↓</strong>  </p>\n<p><img src=\"09-movelines.gif\" alt=\"09-movelines\"></p>\n<h3 id=\"代码行合并\"><a href=\"#代码行合并\" class=\"headerlink\" title=\"代码行合并\"></a>代码行合并</h3><p>Mac OS : <strong> Ctrl+Shift+j </strong><br>Windows &amp; Linux : <strong> Ctrl+Shift+j </strong><br>按照语法规则将可以合并的代码行进行合并，保持代码精简。它主要适用以下规则：  </p>\n<ul>\n<li>将变量声明定义和赋值合并;</li>\n<li>合并多行字符串的时候，会移掉“+“和双引号;</li>\n<li>合并两行评论代码时，评论变成一行，会去掉另一行的“//”;</li>\n</ul>\n<p><img src=\"18-joinlines.gif\" alt=\"18-joinlines\"></p>\n<h3 id=\"删除整行\"><a href=\"#删除整行\" class=\"headerlink\" title=\"删除整行\"></a>删除整行</h3><p>OS X : <strong> Command + Backspace</strong><br>Windows Or Linux : <strong> Ctrl + Y</strong>  </p>\n<p><img src=\"10-deleteline.gif\" alt=\"10-deleteline\"></p>\n<h3 id=\"复制整行\"><a href=\"#复制整行\" class=\"headerlink\" title=\"复制整行\"></a>复制整行</h3><p>Mac OS: <strong> Command+D</strong><br>Windows &amp; Linux: <strong> Ctrl+D</strong><br>这个快捷键的厉害之处在于它会复制当前行同时又不会影响系统的剪贴板。<br><img src=\"11-duplicate_lines.gif\" alt=\"11-duplicate_lines\"></p>\n<hr>\n<h2 id=\"上下移动整个方法\"><a href=\"#上下移动整个方法\" class=\"headerlink\" title=\"上下移动整个方法\"></a>上下移动整个方法</h2><p>Mac OS : <strong> Command+Alt+↑/↓ </strong><br>Windows &amp; Linux : <strong> Ctrl+Shift+↑/↓ </strong>  </p>\n<p><img src=\"15-movemethods.gif\" alt=\"15-movemethods\"></p>\n<h2 id=\"展开或者收缩选择区域\"><a href=\"#展开或者收缩选择区域\" class=\"headerlink\" title=\"展开或者收缩选择区域\"></a>展开或者收缩选择区域</h2><p>Mac OS : <strong> alt + ↑/↓ </strong><br>Windows &amp; Linux: <strong> (Ctrl+w )/(Ctrl+Shift+w) </strong><br>扩大（或者缩小）当前的选择范围。比如当前选中一个变量，此操作会把选中范围扩展至句子，方法等。</p>\n<p><img src=\"12-expand_shrink_selection.gif\" alt=\"12-expand_shrink_selection\"></p>\n<h2 id=\"包裹代码段\"><a href=\"#包裹代码段\" class=\"headerlink\" title=\"包裹代码段\"></a>包裹代码段</h2><p>Mac OS : <strong> Command+Alt+t </strong><br>Windows &amp; Linux : <strong> Ctrl+Alt+t </strong><br>选中一段代码段，然后使用if语句或者循环结构等包裹代码。  </p>\n<p><img src=\"13-surround_with.gif\" alt=\"13-surround_with.gif\">  </p>\n<h2 id=\"删除代码块的包裹\"><a href=\"#删除代码块的包裹\" class=\"headerlink\" title=\"删除代码块的包裹\"></a>删除代码块的包裹</h2><p>Mac OS : <strong> Command+Shift+Delete </strong><br>Windows &amp; Linux : <strong> Ctrl+Shift+Delete </strong><br>移除代码结构中的包裹代码，比如 if 语句,  while 循环, 或者 try/catch 语句。<br><img src=\"20-unwrap.gif\" alt=\"20-unwrap\"></p>\n<h2 id=\"查询最近编辑的文件和使用的工作区\"><a href=\"#查询最近编辑的文件和使用的工作区\" class=\"headerlink\" title=\"查询最近编辑的文件和使用的工作区\"></a>查询最近编辑的文件和使用的工作区</h2><p>Mac OS : <strong> Command+e </strong><br>Windows &amp; Linux : <strong> Ctrl+e </strong>  </p>\n<p><img src=\"14-recents.gif\" alt=\"14-recents\"></p>\n<h2 id=\"代码模板\"><a href=\"#代码模板\" class=\"headerlink\" title=\"代码模板\"></a>代码模板</h2><p>Mac OS : <strong> Command+j </strong><br>Windows &amp; Linux : <strong> Ctrl+j </strong><br>此快捷键可以让你迅速地在文件中插入预留的代码片段。你也可以定制你自己的代码片段。</p>\n<p><img src=\"15-live_templates.gif\" alt=\"15-live_templates\"></p>\n<h2 id=\"代码结构自动补全\"><a href=\"#代码结构自动补全\" class=\"headerlink\" title=\"代码结构自动补全\"></a>代码结构自动补全</h2><p>Mac OS : <strong> Command+Shift+Enter </strong><br>Windows &amp; Linux : <strong> Ctrl+Shift+Enter </strong><br>这个操作会将还未完成的代码结构补全。一般可以补全的情形如下：</p>\n<ul>\n<li>在代码行后面添加分号；</li>\n<li>为 if, while 或者 for 语句添加括号</li>\n<li>为方法声明添加括号。</li>\n</ul>\n<p><img src=\"16-completestatement.gif\" alt=\"16-completestatement\"></p>\n<h2 id=\"回到上次编辑的位置\"><a href=\"#回到上次编辑的位置\" class=\"headerlink\" title=\"回到上次编辑的位置\"></a>回到上次编辑的位置</h2><p>Mac OS : <strong> Command+Shift+backspace </strong><br>Windows &amp; Linux : <strong> Ctrl+Shift+backspace </strong>  </p>\n<p><img src=\"17-navigate-previous-changes.gif\" alt=\"17-navigate-previous-changes\"></p>\n<h2 id=\"在代码中根据标签选择功能（Select-In）\"><a href=\"#在代码中根据标签选择功能（Select-In）\" class=\"headerlink\" title=\"在代码中根据标签选择功能（Select In）\"></a>在代码中根据标签选择功能（Select In）</h2><p>Mac OS : <strong> Alt+F1 </strong><br>Windows:<strong> Alt+F1 </strong><br>Linux : 与系统快捷键冲突<br>在代码中执行此快捷方式可以快速定位到select Target所示的功能中。</p>\n<p><img src=\"19-select-in.gif\" alt=\"19-select-in\"></p>\n<h2 id=\"调试常用快捷键\"><a href=\"#调试常用快捷键\" class=\"headerlink\" title=\"调试常用快捷键\"></a>调试常用快捷键</h2><hr>\n<h3 id=\"添加断点（Toggle-Breakpoints）\"><a href=\"#添加断点（Toggle-Breakpoints）\" class=\"headerlink\" title=\"添加断点（Toggle Breakpoints）\"></a>添加断点（Toggle Breakpoints）</h3><p>OSX: <strong> Cmd+F8 </strong><br>Windows/Linux: <strong> Ctrl+F8 </strong><br>相应大家都知道使用鼠标左键点击行首添加断点，使用快捷键添加断点的方式如下：<br><img src=\"21-togglebreakpoints.gif\" alt=\"21-togglebreakpoints\"></p>\n<h3 id=\"条件断点（Conditional-Breakpoints）\"><a href=\"#条件断点（Conditional-Breakpoints）\" class=\"headerlink\" title=\"条件断点（Conditional Breakpoints）\"></a>条件断点（Conditional Breakpoints）</h3><p>通过右键断点，可以对一个断点加入条件。只有当满足条件时，才会进入到断点中。调试神技，只对自己关心的情况进行调试，不浪费时间。</p>\n<p><img src=\"22-conditionalbreakpoint.gif\" alt=\"22-conditionalbreakpoint\"></p>\n<h3 id=\"在断点上打log\"><a href=\"#在断点上打log\" class=\"headerlink\" title=\"在断点上打log\"></a>在断点上打log</h3><p>如果你不想在调试过程中添加log，并且重新编译，可以在断点直接打log，查看结果。<br>鼠标右键点击断点，取消选择“suspend”,并在 “Log evaluated Expression” 中输入你想要打印的log信息。实例如下：<br><img src=\"23-loggingbreakpoints.gif\" alt=\"23-loggingbreakpoints\"></p>\n<h3 id=\"临时断点\"><a href=\"#临时断点\" class=\"headerlink\" title=\"临时断点\"></a>临时断点</h3><p>鼠标（ubuntu上无效）：<strong> Alt+LeftClick </strong> in the left gutter<br>Mac: <strong> Cmd+Alt+Shift+F8 </strong><br>Windows/Linux: <strong> Ctrl+Alt+Shift+F8 </strong><br>这种方式可以添加一个临时断点，当第一次执行完后，会自动消失。</p>\n<h3 id=\"disable断点\"><a href=\"#disable断点\" class=\"headerlink\" title=\"disable断点\"></a>disable断点</h3><p>在已经完成了一些条件，或者打印了断点，不再需要这些断点的时候，你可以使这些断点无效。<br>Mouse(ubuntu 上无效):在已经存在的断点上按住ALT并点击左键： <strong> Alt+LeftClick </strong>   </p>\n<blockquote>\n<p>没有默认的快捷键，如果需要的话，可以创建快捷键。</p>\n</blockquote>\n<p><img src=\"25-disablebreakpoint.gif\" alt=\"25-disablebreakpoint\"></p>\n<h3 id=\"附加调试器\"><a href=\"#附加调试器\" class=\"headerlink\" title=\"附加调试器\"></a>附加调试器</h3><p>及时你没有在调试模式下启动app，你也可以通过以下方式开启调试器。你不需要重新在调试模式下调用app。这是非常有用的。<br>Mouse: 点击图标，选择“ Attach debugger to Android Process”</p>\n<blockquote>\n<p>没有默认的快捷键，如果需要的话，可以创建快捷键。</p>\n</blockquote>\n<h3 id=\"评估表达式（Evaluate-Expression）\"><a href=\"#评估表达式（Evaluate-Expression）\" class=\"headerlink\" title=\"评估表达式（Evaluate Expression）\"></a>评估表达式（Evaluate Expression）</h3><p>快捷键：<strong> Alt+F8 </strong><br>这个功能用来检查变量的内容，评估几乎任何有效的Java表达式。要知道，如果你转变了状态，它会保持下去，当你恢复程序的执行。<br><img src=\"27-evaluateexpression.gif\" alt=\"27-evaluateexpression\"></p>\n<h3 id=\"检查变量（Inspect-Variable）\"><a href=\"#检查变量（Inspect-Variable）\" class=\"headerlink\" title=\"检查变量（Inspect Variable）\"></a>检查变量（Inspect Variable）</h3><p>快捷键：在调试时，在表达式中按住ALT键点击鼠标左键<strong> Alt+LeftClick  </strong><br>不需要打开“Evaluate Expression”对话框，即可查看一个评估一个表达式。</p>\n<p><img src=\"28-mouse_evaluate_expression.gif\" alt=\"28-mouse_evaluate_expression\"></p>\n<h3 id=\"标记对象（Mark-Object）\"><a href=\"#标记对象（Mark-Object）\" class=\"headerlink\" title=\"标记对象（Mark Object）\"></a>标记对象（Mark Object）</h3><ul>\n<li>Mouse: 右击并选择 “Mark Object”  </li>\n<li>OSX : 选中对象，按 F3  </li>\n<li>Windows/Linux: 选中对象，按 F11  </li>\n</ul>\n<p>在调试过程中，你可以使用这个命令给特定的对象添加一个标签，以便于以后识别该对象。</p>\n<p><img src=\"29-markobject.gif\" alt=\"29-markobject\"></p>\n<h3 id=\"分析堆栈信息\"><a href=\"#分析堆栈信息\" class=\"headerlink\" title=\"分析堆栈信息\"></a>分析堆栈信息</h3><ul>\n<li>Menu: Analyze → Analyze Stacktrace</li>\n<li>Find Actions(ctrl+shift+a)输入”analyze stacktrace”即可查看堆栈信息。  </li>\n</ul>\n<p>可以从你的剪切板中加载log的堆栈信息，并且使得他是可点击的。对于我们从bug报告中摘取一段堆栈进行分析非常有利。  </p>\n<p><img src=\"30-analyzestacktrace.gif\" alt=\"30-analyzestacktrace\"></p>\n<blockquote>\n<p>你可以使用”ProGuard Unscramble”插件来分析混淆后的堆栈信息。</p>\n</blockquote>\n<h3 id=\"分析数据流\"><a href=\"#分析数据流\" class=\"headerlink\" title=\"分析数据流\"></a>分析数据流</h3><ul>\n<li>Menu: Analyze → Analyze Data Flow to Here</li>\n<li>Find action: Analyze Data Flow to Here</li>\n</ul>\n<p>可以查看当前变量、参数或field调用的路径！这是非常有用的当你进入到一个你不熟悉的代码环境中，并且你想了解这个参数是怎样传到这里的。<br>这也有一个反向操作“Analyze Data Flow from Here”，它将会显示变量、field或返回类型的被调用的路径。</p>\n<p><img src=\"31-analyzedataflow.gif\" alt=\"31-analyzedataflow\"></p>\n<h2 id=\"显示正在执行的行（Show-Execution-Point）\"><a href=\"#显示正在执行的行（Show-Execution-Point）\" class=\"headerlink\" title=\"显示正在执行的行（Show Execution Point）\"></a>显示正在执行的行（Show Execution Point）</h2><p>快捷键：（debug模式下） : Alt+F10<br>将光标移动到当前正在调试的行。通常用于下列情况：</p>\n<ul>\n<li>你中断的某些地方</li>\n<li>你开始在这个文件查看然后跳到了其它一些文件</li>\n<li>调用这个快捷键可以返回到你正在一步一步的调试会话的地方</li>\n</ul>\n<p><img src=\"36-executionpoint.gif\" alt=\"36-executionpoint\"></p>\n<hr>\n<h2 id=\"多行选择\"><a href=\"#多行选择\" class=\"headerlink\" title=\"多行选择\"></a>多行选择</h2><ul>\n<li>Mac : <strong> Ctrl+G </strong>  </li>\n<li>Windows/Linux: <strong> Alt+J </strong>  </li>\n</ul>\n<p>这一条格外的精彩！它可以同时选择多行，进行编辑。这就意味着你可以在同一个文档中有多个光标。</p>\n<p><img src=\"32-multiselection.gif\" alt=\"32-multiselection\"></p>\n<h2 id=\"多列选择（Column-Selection）\"><a href=\"#多列选择（Column-Selection）\" class=\"headerlink\" title=\"多列选择（Column Selection）\"></a>多列选择（Column Selection）</h2><ul>\n<li>Mouse(ubuntu上无效): Alt+鼠标拖拽  </li>\n<li>Mac : <strong> Cmd+Shift+8 </strong>  </li>\n<li>Windows/Linux: <strong> Shift+Alt+Insert </strong></li>\n</ul>\n<p><img src=\"33-columnselection.gif\" alt=\" 33-columnselection.gif\"></p>\n<blockquote>\n<p>和多行编辑的区别在于，多列编辑只能是每一行的相同列一起编辑。</p>\n</blockquote>\n<h2 id=\"后缀补全（Postfix-Completion）\"><a href=\"#后缀补全（Postfix-Completion）\" class=\"headerlink\" title=\"后缀补全（Postfix Completion）\"></a>后缀补全（Postfix Completion）</h2><p>这个不是非常直观的，但是相当的给力，基本上，它是无需按一连串左键到头部，实现方法的包裹的最好的方式了。<br>比较常用的有：</p>\n<ul>\n<li>.for (for a foreach)</li>\n<li>.format (wraps a string in String.format())</li>\n<li>.cast (wraps a statement in a type cast)</li>\n</ul>\n<p><img src=\"33-postfixcompletion.gif\" alt=\"33-postfixcompletion\"></p>\n<h2 id=\"与剪切板代码进行比较（Compare-With-Clipboard）\"><a href=\"#与剪切板代码进行比较（Compare-With-Clipboard）\" class=\"headerlink\" title=\"与剪切板代码进行比较（Compare With Clipboard）\"></a>与剪切板代码进行比较（Compare With Clipboard）</h2><ul>\n<li>Mouse: right-click the selection and select Compare With Clipboard  </li>\n<li>Find action: compare with clipboard</li>\n</ul>\n<p>用来比较当前你选择的代码和剪切板中的代码有什么区别。个人觉得用处不大。<br><img src=\"34-comparewithclipboard.gif\" alt=\"34-comparewithclipboard\"></p>\n<h2 id=\"停止进程\"><a href=\"#停止进程\" class=\"headerlink\" title=\"停止进程\"></a>停止进程</h2><ul>\n<li>Mac : Cmd+F2</li>\n<li>Windows/Linux: Ctrl+F2</li>\n</ul>\n<p>将会终止正在运行的最近的task或者显示一个可选的可能需要终止的task列表。用于停止调试或者终止一个build。</p>\n<p><img src=\"35-stoprocess.gif\" alt=\"35-stoprocess\"></p>\n<h2 id=\"VCS-操作弹窗\"><a href=\"#VCS-操作弹窗\" class=\"headerlink\" title=\"VCS 操作弹窗\"></a>VCS 操作弹窗</h2><p>Mac: <strong> Ctrl+V </strong><br>Windows/Linux: <strong> Alt+` </strong><br>显示一些常用的版本控制命令。如git commit。  </p>\n<p><img src=\"37-vcspopup.gif\" alt=\"37-vcspopup\"></p>\n<h2 id=\"与分支进行比较（Compare-With-Branch-Git-）\"><a href=\"#与分支进行比较（Compare-With-Branch-Git-）\" class=\"headerlink\" title=\"与分支进行比较（Compare With Branch (Git)）\"></a>与分支进行比较（Compare With Branch (Git)）</h2><p>Menu (for git): <strong> VCS -&gt; Git -&gt; Compare With Branch </strong><br>Find Actions: <strong> Compare With Branch </strong>  </p>\n<p>如果你的项目是在git下，你可以同另一个分支比较你的文件或者文件夹。特别用来比较你的修改和主分支差异多大。</p>\n<p><img src=\"38-comparewithbranch.gif\" alt=\"38-comparewithbranch\"></p>\n<h2 id=\"回车键和TAB键的区别\"><a href=\"#回车键和TAB键的区别\" class=\"headerlink\" title=\"回车键和TAB键的区别\"></a>回车键和TAB键的区别</h2><p>你可以使用Enter或Tab来自动补全代码。它们之间有一个有趣的差异：使用Enter将会自动完成语句。使用Tab将会自动完成删除光标到下一个点号，括号，分号或空格出现前的内容。</p>\n<p><img src=\"45-codecompletionentertab.gif\" alt=\"45-codecompletionentertab\"></p>\n<h2 id=\"跳转到父类的方法\"><a href=\"#跳转到父类的方法\" class=\"headerlink\" title=\"跳转到父类的方法\"></a>跳转到父类的方法</h2><p>Mac: <strong> Cmd+U </strong><br>Windows/Linux: <strong> Ctrl+U </strong>  </p>\n<p>如果光标在一个复写自父类的方法中（例如Activity#onCreate()方法），使用该快捷键，将会到达该方法的父类的实现。如果光标停留在类名上，则跳转到父类。</p>\n<p><img src=\"39-navigatetoparent.gif\" alt=\"39-navigatetoparent\"></p>\n<h2 id=\"返回到编辑器（Return-to-the-Editor）\"><a href=\"#返回到编辑器（Return-to-the-Editor）\" class=\"headerlink\" title=\"返回到编辑器（Return to the Editor）\"></a>返回到编辑器（Return to the Editor）</h2><p>返回并不关闭面板：Escape<br>返回并关闭面板：Shift+Escape</p>\n<p><img src=\"40-returntoeditor.gif\" alt=\"40-returntoeditor\"></p>\n<h2 id=\"跳到最近使用的工具窗口\"><a href=\"#跳到最近使用的工具窗口\" class=\"headerlink\" title=\"跳到最近使用的工具窗口\"></a>跳到最近使用的工具窗口</h2><p>Mac:F12<br>Windows/Linux:F12  </p>\n<p>有时候，你从面板返回到编辑器，但是你发现不得不再返回到这个面板。例如：浏览find usages。使用这个快捷键，你可以不用鼠标返回到这个面板。</p>\n<p><img src=\"41-lasttoolwindow.gif\" alt=\"41-lasttoolwindow\"></p>\n<h2 id=\"隐藏所有面板（Hide-All-Panels）\"><a href=\"#隐藏所有面板（Hide-All-Panels）\" class=\"headerlink\" title=\"隐藏所有面板（Hide All Panels）\"></a>隐藏所有面板（Hide All Panels）</h2><p>Mac: <strong> Cmd+Shift+F12 </strong><br>windows/linux: <strong> Ctrl+Shift+F12 </strong>  </p>\n<p>让编辑器进入某种形式上的全屏模式。再次调用这个快捷键可以返回所有面板到它们之前的状态。</p>\n<p><img src=\"42-hideallwindows.gif\" alt=\"42-hideallwindows\"></p>\n<h2 id=\"通过编号打开面板\"><a href=\"#通过编号打开面板\" class=\"headerlink\" title=\"通过编号打开面板\"></a>通过编号打开面板</h2><p>Mac: <strong> Cmd+Number </strong><br>windows/linux: <strong> Alt+Number </strong>  </p>\n<p>可以通过面板上标签对应的数字打开相应的面板。</p>\n<p><img src=\"43-openpanelbynumber.gif\" alt=\"43-openpanelbynumber\"></p>\n<h2 id=\"参数信息\"><a href=\"#参数信息\" class=\"headerlink\" title=\"参数信息\"></a>参数信息</h2><p>Mac:<strong>  Cmd+P </strong><br>windows/linux: <strong> Ctrl+P </strong>    </p>\n<p><img src=\"44-parameterinfo.gif\" alt=\"44-parameterinfo\"></p>\n<h2 id=\"切换器\"><a href=\"#切换器\" class=\"headerlink\" title=\"切换器\"></a>切换器</h2><p>Shortcut:<strong> Ctrl+Tab </strong></p>\n<p>这个功能和IDE的alt+tab/cmd+tab差不多。它允许你导航到一个tab或一个panel。一旦它被打开，只要你按住ctrl键，你可以使用数字或字母快捷键快速导航。你也可以通过按下backspace关闭一个打开的文件。</p>\n<p><img src=\"46-switcher.gif\" alt=\"46-switcher\"></p>\n<h2 id=\"上下文信息（Context-Info）\"><a href=\"#上下文信息（Context-Info）\" class=\"headerlink\" title=\"上下文信息（Context Info）\"></a>上下文信息（Context Info）</h2><p>Shortcut:<strong> Ctrl+Shift+Q </strong>    </p>\n<p>这个将会显示你当前位置，当你的定义范围超出滚动的区域时。通常，这将会是类或内部类的名称，但它也可能是当前方法名。在我看来，它最好的使用是快速查看当前类继承或实现。 它也可以在xml文件中使用。</p>\n<p><img src=\"47-contextinfo.gif\" alt=\"47-contextinfo\"></p>\n<h2 id=\"代码重构\"><a href=\"#代码重构\" class=\"headerlink\" title=\"代码重构\"></a>代码重构</h2><p>Mac: <strong> Ctrl+T </strong><br>Windows/Linux: <strong> Ctrl+Alt+Shift+T </strong><br>这是一个针对当前选择的代码显示上下文所有可用的重构的快捷键。这个列表可以通过键盘进行检索并且你也可以使用左侧的数字进行快速访问</p>\n<p><img src=\"48-refactorthis.png\" alt=\"48-refactorthis\"></p>\n<h2 id=\"跳转到最近编辑的文件（Recently-Changed-Files）\"><a href=\"#跳转到最近编辑的文件（Recently-Changed-Files）\" class=\"headerlink\" title=\"跳转到最近编辑的文件（Recently Changed Files）\"></a>跳转到最近编辑的文件（Recently Changed Files）</h2><p>Mac: <strong> Cmd+Shift+E </strong><br>Windows/Linux: <strong> Ctrl+Shift+E </strong>  </p>\n<p>这个和“Recents”弹出框有所不同，这个列出是在本地最近被修改的文件。</p>\n<p><img src=\"49-recentlyedited.gif\" alt=\"49-recentlyedited\"></p>\n<h2 id=\"提取变量\"><a href=\"#提取变量\" class=\"headerlink\" title=\"提取变量\"></a>提取变量</h2><p>Mac:<strong> Cmd+Alt+V </strong><br>Windows/Linux:<strong> Ctrl+Alt+V </strong></p>\n<p>这是一个可以不用通过重构菜单，来提取变量的快捷键。  </p>\n<p><img src=\"51-extractvariable.gif\" alt=\"51-extractvariable\"></p>\n<blockquote>\n<p>额外的技巧：<br>如果你想修改声明类型为一些更通用的（如：List而不是ArrayList）,你可以使用Shift+Tab它会给出一个可用类型的列表。</p>\n</blockquote>\n<h2 id=\"提取参数\"><a href=\"#提取参数\" class=\"headerlink\" title=\"提取参数\"></a>提取参数</h2><p>Mac:Cmd+Alt+P<br>Windows/Linux:Ctrl+Alt+P</p>\n<p>这是一个不用通过重构菜单提取参数的快捷键。<br>这个功能是有用的当你意识到一个方法可能是泛型时通过提取一部分做为一个参数。它作用的方式是它会使用当前值作为一个参数然后复制原先的值作为每个调用者的参数。<br><img src=\"52-extractparam.gif\" alt=\"52-extractparam\"></p>\n<blockquote>\n<p>额外的技巧：<br>你也可以保持原来的方法使用它声明一个新方法通过“delegate”选项。  </p>\n</blockquote>\n<h2 id=\"提取方法\"><a href=\"#提取方法\" class=\"headerlink\" title=\"提取方法\"></a>提取方法</h2><p>Mac: Cmd+Alt+M<br>Windows/Linux: Ctrl+Alt+M</p>\n<p>可以提取一个代码块做为一个新的方法。这个功能是相当有用的。无论什么时候你遇到一个开始变得有点复杂的方法，你可以使用这个安全地抽取一部分到另一个方法。我所说的安全是因为IDE不会像我们可能会犯一个愚蠢的复制粘贴错误。</p>\n<p><img src=\"53-extractmethod.gif\" alt=\"53-extractmethod\"></p>\n<blockquote>\n<p>额外的技巧：<br>当你在抽取对话框，你可以修改方法的可见性和参数名称。</p>\n</blockquote>\n<h2 id=\"inline\"><a href=\"#inline\" class=\"headerlink\" title=\"inline\"></a>inline</h2><p>Mac: Cmd+Alt+N<br>Windows/Linux: Ctrl+Alt+N</p>\n<p>你使用提取有一点疯狂并且现在有太多的东西？你可以使用反向操作，它叫做“inline”。<br>它可以作用于方法，Fields，参数和变量。</p>\n<p><img src=\"54-inline.gif\" alt=\"54-inline\"></p>\n<h2 id=\"重命名\"><a href=\"#重命名\" class=\"headerlink\" title=\"重命名\"></a>重命名</h2><p>快捷键：<strong> Shift+F6 </strong><br><img src=\"55-rename.gif\" alt=\"55-rename.gif\"></p>\n<h2 id=\"Pull-Up-Push-Down\"><a href=\"#Pull-Up-Push-Down\" class=\"headerlink\" title=\"Pull Up / Push Down\"></a>Pull Up / Push Down</h2><p>Mac: Ctrl+T 然后选择成员<br>Windows/Linux: Ctrl+Alt+Shift+T 然后选择成员  </p>\n<p>当我们谈论上拉成员，我们的意思是我们将会让当前类的一些成员（通常是方法或field）发送它到父类或接口。</p>\n<p>如果继承于一个类，内容会被移动。如果是实现的一个接口，它将会声明方法作为接口的一部分，在你的类中保持原有的方法并且添加 @Override注解。<br>当我们谈论下推成员，这正好是反向操作，我们会从父类或接口发送一些成员到子类</p>\n<p><img src=\"56-pullupdown.gif\" alt=\"56-pullupdown.gif\"></p>\n<h1 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h1><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl(Command)+C</td>\n<td>复制当前行或选中的内容</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+D</td>\n<td>粘贴当前行或选中的内容</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+X</td>\n<td>剪切当前行或选中的内容</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Y</td>\n<td>删除行</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Z</td>\n<td>倒退</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+Z</td>\n<td>向前</td>\n</tr>\n<tr>\n<td>Alt(Option)+Enter</td>\n<td>自动修正</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+L</td>\n<td>格式化代码</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+I</td>\n<td>将选中的代码进行自动缩进编排</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+O</td>\n<td>优化导入的类和包</td>\n</tr>\n<tr>\n<td>Alt(Option)+Insert</td>\n<td>得到一些Intention Action，可以生成构造器、Getter、Setter、将 == 改为equals() 等</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+V</td>\n<td>选最近使用的剪贴板内容并插入</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+Shift+V</td>\n<td>简单粘贴</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+Insert</td>\n<td>选最近使用的剪贴板内容并插入（同Ctrl(Command)+Shift+V）</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Enter</td>\n<td>在当前行的上面插入新行，并移动光标到新行（此功能光标在行首时有效）</td>\n</tr>\n<tr>\n<td>Shift+Enter</td>\n<td>在当前行的下面插入新行，并移动光标到新行</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+J</td>\n<td>自动代码</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+T</td>\n<td>把选中的代码放在 try{} 、if{} 、 else{} 里</td>\n</tr>\n<tr>\n<td>Shift+Alt(Option)+Insert</td>\n<td>竖编辑模式</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+ /</td>\n<td>注释 //</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+ /</td>\n<td>注释 /…/</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+J</td>\n<td>合并成一行</td>\n</tr>\n<tr>\n<td>F2/Shift+F2</td>\n<td>跳转到下/上一个错误语句处</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+Back</td>\n<td>跳转到上次编辑的地方</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+Space</td>\n<td>类名自动完成</td>\n</tr>\n<tr>\n<td>Shift+Alt(Option)+Up/Down</td>\n<td>内容向上/下移动</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+Up/Down</td>\n<td>语句向上/下移动</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+U</td>\n<td>大小写切换</td>\n</tr>\n<tr>\n<td>Tab</td>\n<td>代码标签输入完成后，按 Tab，生成代码</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Backspace</td>\n<td>按单词删除</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+Enter</td>\n<td>语句完成</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+J</td>\n<td>用动态模板环绕</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h2><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl(Command)+F12</td>\n<td>显示当前文件的结构</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+H</td>\n<td>显示类继承结构图</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Q</td>\n<td>显示注释文档</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+P</td>\n<td>方法参数提示</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+U</td>\n<td>打开当前类的父类或者实现的接口</td>\n</tr>\n<tr>\n<td>Alt(Option)+Left/Right</td>\n<td>切换代码视图</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+Left/Right</td>\n<td>返回上次编辑的位置</td>\n</tr>\n<tr>\n<td>Alt(Option)+Up/Down</td>\n<td>在方法间快速移动定位</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+B</td>\n<td>快速打开光标处的类或方法</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+W</td>\n<td>选中代码，连续按会有其他效果</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+W</td>\n<td>取消选择光标所在词</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+ - / +</td>\n<td>折叠/展开代码</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+ - / +</td>\n<td>折叠/展开全部代码</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+.</td>\n<td>折叠/展开当前花括号中的代码</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+ ] / [</td>\n<td>跳转到代码块结束/开始处</td>\n</tr>\n<tr>\n<td>F2 或 Shift+F2</td>\n<td>高亮错误或警告快速定位</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+C</td>\n<td>复制路径</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+Shift+C</td>\n<td>复制引用，必须选择类名</td>\n</tr>\n<tr>\n<td>Alt(Option)+Up/Down</td>\n<td>在方法间快速移动定位</td>\n</tr>\n<tr>\n<td>Shift+F1</td>\n<td>要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+G</td>\n<td>定位行</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl(Command)+F</td>\n<td>在当前窗口查找文本</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+F</td>\n<td>在指定环境下查找文本</td>\n</tr>\n<tr>\n<td>F3</td>\n<td>向下查找关键字出现位置</td>\n</tr>\n<tr>\n<td>Shift+F3</td>\n<td>向上一个关键字出现位置</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+R</td>\n<td>在当前窗口替换文本</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+R</td>\n<td>在指定窗口替换文本</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+N</td>\n<td>查找类</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+N</td>\n<td>查找文件</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+Alt(Option)+N</td>\n<td>查找项目中的方法或变量</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+B</td>\n<td>查找变量的来源</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+B</td>\n<td>快速打开光标处的类或方法</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+B</td>\n<td>跳转到类或方法实现处</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+E</td>\n<td>最近打开的文件</td>\n</tr>\n<tr>\n<td>Alt(Option)+F3</td>\n<td>快速查找，效果和Ctrl(Command)+F相同</td>\n</tr>\n<tr>\n<td>F4</td>\n<td>跳转至定义变量的位置</td>\n</tr>\n<tr>\n<td>Alt(Option)+F7</td>\n<td>查询当前元素在工程中的引用</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+F7</td>\n<td>查询当前元素在当前文件中的引用，然后按 F3 可以选择</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+F7</td>\n<td>选中查询当前元素在工程中的引用</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+F7</td>\n<td>高亮显示匹配的字符，按 Esc 高亮消失</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+F7</td>\n<td>查找某个方法的所有调用地方</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+Alt(Option)+N</td>\n<td>查找类中的方法或变量</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+O</td>\n<td>弹出显示查找内容</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+Up/Down</td>\n<td>快速跳转搜索结果</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+S</td>\n<td>高级搜索、搜索结构</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h2><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>F5</td>\n<td>复制</td>\n</tr>\n<tr>\n<td>F6</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>Alt(Option)+Delete</td>\n<td>安全删除</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+U</td>\n<td>转到父类</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+O</td>\n<td>重写父类的方法</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+I</td>\n<td>实现方法</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+N</td>\n<td>内联</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+Shift+T</td>\n<td>弹出重构菜单</td>\n</tr>\n<tr>\n<td>Shift+F6</td>\n<td>重构-重命名</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+M</td>\n<td>提取代码组成方法</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+C</td>\n<td>将变量更改为常量</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+V</td>\n<td>定义变量引用当前对象或者方法的返回值</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+F</td>\n<td>将局部变量更改为类的成员变量</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+P</td>\n<td>将变量更改为方法的参数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>F8</td>\n<td>跳到下一步</td>\n</tr>\n<tr>\n<td>Shift+F8</td>\n<td>跳出函数、跳到下一个断点</td>\n</tr>\n<tr>\n<td>Alt(Option)+Shift+F8</td>\n<td>强制跳出函数</td>\n</tr>\n<tr>\n<td>F7</td>\n<td>进入代码</td>\n</tr>\n<tr>\n<td>Shift+F7</td>\n<td>智能进入代码</td>\n</tr>\n<tr>\n<td>Alt(Option)+Shift+F7</td>\n<td>强制进入代码</td>\n</tr>\n<tr>\n<td>Alt(Option)+F9</td>\n<td>运行至光标处</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+F9</td>\n<td>强制运行至光标处</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+F2</td>\n<td>停止运行</td>\n</tr>\n<tr>\n<td>Alt(Option)+F8</td>\n<td>计算变量值</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"VCS\"><a href=\"#VCS\" class=\"headerlink\" title=\"VCS\"></a>VCS</h2><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Alt(Option)+ ~</td>\n<td>VCS 操作菜单</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+K</td>\n<td>提交更改</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+T</td>\n<td>更新项目</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+Shift+D</td>\n<td>显示变化</td>\n</tr>\n</tbody>\n</table>\n<p>谢谢阅读完这篇整理的文章，希望从中能够收获知识。<br>转载请注明出处：<a href=\"www.aman.site\">www.aman.site</a></p>\n<blockquote>\n<p>参考文献：<br><a href=\"https://greenrobot.me/android-dev-tool/android-studio-dev-tips-1/\" target=\"_blank\" rel=\"external\">Android Cool Posts</a><br><a href=\"http://www.developerphil.com/android-studio-tips-of-the-day-roundup-1/\" target=\"_blank\" rel=\"external\">Android Studio Tips Of the Day - Roundup #1  </a><br><a href=\"http://www.developerphil.com/android-studio-tips-of-the-day-roundup-2/\" target=\"_blank\" rel=\"external\">Android Studio Tips Of the Day - Roundup #2  </a><br><a href=\"http://www.developerphil.com/android-studio-tips-of-the-day-roundup-3/\" target=\"_blank\" rel=\"external\">Android Studio Tips Of the Day - Roundup #3  </a><br><a href=\"http://www.developerphil.com/android-studio-tips-of-the-day-roundup-4/\" target=\"_blank\" rel=\"external\">Android Studio Tips Of the Day - Roundup #4  </a><br><a href=\"http://www.developerphil.com/android-studio-tips-of-the-day-roundup-5/\" target=\"_blank\" rel=\"external\">Android Studio Tips Of the Day - Roundup #5  </a><br><a href=\"http://www.developerphil.com/android-studio-tips-of-the-day-roundup-6/\" target=\"_blank\" rel=\"external\">Android Studio Tips Of the Day - Roundup #6  </a>  </p>\n</blockquote>\n","excerpt":"<h2 id=\"高亮所有\"><a href=\"#高亮所有\" class=\"headerlink\" title=\"高亮所有\"></a>高亮所有</h2><p>os X: <strong> command + shift + F7  </strong><br>Windows Or Linux: <strong> ctrl+Shift+F7 </strong>  </p>\n<p><img src=\"01-highlight.gif\" alt=\"hight light all\"></p>\n<ul>\n<li>高亮代码方法中的“return” 或者 “throw” 也会高亮这个方法的所有出口。</li>\n<li>高亮后可使用”F3”或“shift + F3”上下选择。</li>\n<li>Esc 或者再次使用该快捷键，可以取消高亮。</li>\n</ul>","more":"<h2 id=\"在方法和内部类之间跳转\"><a href=\"#在方法和内部类之间跳转\" class=\"headerlink\" title=\"在方法和内部类之间跳转\"></a>在方法和内部类之间跳转</h2><p>OS X: <strong> Ctrl + ↑ / ↓ </strong><br>Windows Or Linux: <strong> Alt+ ↑ / ↓</strong>  </p>\n<p><img src=\"02-move_between_methods.gif\" alt=\"02-move_between_methods\"></p>\n<h2 id=\"跳转到已经打开的下一个-上一个文件\"><a href=\"#跳转到已经打开的下一个-上一个文件\" class=\"headerlink\" title=\"跳转到已经打开的下一个/上一个文件\"></a>跳转到已经打开的下一个/上一个文件</h2><p>OS X: <strong> Ctrl + ← / → </strong><br>Windows Or Linux: <strong> Alt+  ← / →</strong>  </p>\n<h2 id=\"快速定位到类中的方法-内部类-成员变量\"><a href=\"#快速定位到类中的方法-内部类-成员变量\" class=\"headerlink\" title=\"快速定位到类中的方法/内部类/成员变量\"></a>快速定位到类中的方法/内部类/成员变量</h2><p>OS X: <strong> Command+F12</strong><br>Windows Or Linux: <strong> Ctrl+F12 </strong>   </p>\n<p><img src=\"03-filestructure.gif\" alt=\"03-filestructure\"></p>\n<ul>\n<li>你可以使用驼峰字符来过滤候选方法列表。例如:输入 “oCr” 就可以找到 “onCreate”方法。</li>\n<li>你可以选择是否展示继承的成员变量。如勾选了”show inherited members”就可以很方便的查找继承自父类的成员变量。</li>\n<li>你可以选择是否展示匿名类。如勾选了”show Anonymous classes”, 就可以很方便的查找 OnClickListener里面的OnClick方法了。</li>\n</ul>\n<h2 id=\"显示方法的调用层级关系\"><a href=\"#显示方法的调用层级关系\" class=\"headerlink\" title=\"显示方法的调用层级关系\"></a>显示方法的调用层级关系</h2><p>OS X: <strong> Ctrl+Alt+H </strong><br>Windows Or Linux: <strong> Ctrl+Alt+H </strong>  </p>\n<p><img src=\"04-callinghierarchy.gif\" alt=\"04-callinghierarchy\"></p>\n<blockquote>\n<p>注，ubuntu上与输入法快捷键冲突无法使用</p>\n</blockquote>\n<h2 id=\"快速显示变量或方法的定义\"><a href=\"#快速显示变量或方法的定义\" class=\"headerlink\" title=\"快速显示变量或方法的定义\"></a>快速显示变量或方法的定义</h2><p>OS X: <strong> Alt+Space</strong><br>Windows Or Linux: <strong> Ctrl+Shift+i</strong><br>如果你想立马知道某个类或者方法的来源同时又不想丢掉当前的编码环境，你可以试试这个快捷键。  </p>\n<p><img src=\"05-quickdefinition.gif\" alt=\"05-quickdefinition\"></p>\n<h2 id=\"快速收缩或者展开代码块\"><a href=\"#快速收缩或者展开代码块\" class=\"headerlink\" title=\"快速收缩或者展开代码块\"></a>快速收缩或者展开代码块</h2><p>OS X : <strong> Alt + +/- </strong><br>Windows Or Linux: <strong> Ctrl +/- </strong></p>\n<p><img src=\"06-codefolding.gif\" alt=\"06-codefolding\"></p>\n<ul>\n<li>可以使用 Ctrl + Shift +/- ** 收缩或者展开文件中的所有方法</li>\n<li>多次使用会逐级收缩或者展开<blockquote>\n<p>你可以在“Editor → Code Folding”自定义你的代码折叠范围</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"书签\"><a href=\"#书签\" class=\"headerlink\" title=\"书签\"></a>书签</h2><h3 id=\"默认书签\"><a href=\"#默认书签\" class=\"headerlink\" title=\"默认书签\"></a>默认书签</h3><p>OS X : <strong> F3 </strong><br>Windows Or Linux : <strong> F11 </strong></p>\n<h3 id=\"带字母或者数字的标签\"><a href=\"#带字母或者数字的标签\" class=\"headerlink\" title=\"带字母或者数字的标签\"></a>带字母或者数字的标签</h3><p>OS X : <strong> Alt+F3 </strong><br>Windows Or Linux : <strong> Ctrl+F11 </strong>   </p>\n<blockquote>\n<p>按下此快捷键就可以在你的当前光标所在行打上标签，并提供字母或者数字标记。如果你选择的是数字标记，那么可以通过ctrl+对应的数字直接跳转至相应位置。  </p>\n</blockquote>\n<h3 id=\"展示标签\"><a href=\"#展示标签\" class=\"headerlink\" title=\"展示标签\"></a>展示标签</h3><p>OS X : <strong> Command+F3</strong><br>Windows Or Linux : <strong> Shift+F11</strong>  </p>\n<p><img src=\"07-bookmarks.gif\" alt=\"07-bookmarks\"></p>\n<h2 id=\"查找Android-Studio的菜单选项\"><a href=\"#查找Android-Studio的菜单选项\" class=\"headerlink\" title=\"查找Android Studio的菜单选项\"></a>查找Android Studio的菜单选项</h2><p>OS X :   <strong> Command+Shift+A</strong><br>Windows Or Linux : <strong> Ctrl+Shift+A</strong><br>你可以通过输入菜单名来查找任意的菜单选项，这对那些使用频率低的操作很有效果。</p>\n<p><img src=\"08-findaction.gif\" alt=\"08-findaction\"></p>\n<blockquote>\n<p>如果这个选项有对应的快捷方式，那么这个快捷键会在列表旁边显示。  </p>\n</blockquote>\n<h2 id=\"行操作\"><a href=\"#行操作\" class=\"headerlink\" title=\"行操作\"></a>行操作</h2><hr>\n<h3 id=\"移动整行\"><a href=\"#移动整行\" class=\"headerlink\" title=\"移动整行\"></a>移动整行</h3><p>OS X : <strong> Alt+Shift+ ↑ / ↓</strong><br>Windows Or Linux: <strong> Alt+Shift+ ↑ / ↓</strong>  </p>\n<p><img src=\"09-movelines.gif\" alt=\"09-movelines\"></p>\n<h3 id=\"代码行合并\"><a href=\"#代码行合并\" class=\"headerlink\" title=\"代码行合并\"></a>代码行合并</h3><p>Mac OS : <strong> Ctrl+Shift+j </strong><br>Windows &amp; Linux : <strong> Ctrl+Shift+j </strong><br>按照语法规则将可以合并的代码行进行合并，保持代码精简。它主要适用以下规则：  </p>\n<ul>\n<li>将变量声明定义和赋值合并;</li>\n<li>合并多行字符串的时候，会移掉“+“和双引号;</li>\n<li>合并两行评论代码时，评论变成一行，会去掉另一行的“//”;</li>\n</ul>\n<p><img src=\"18-joinlines.gif\" alt=\"18-joinlines\"></p>\n<h3 id=\"删除整行\"><a href=\"#删除整行\" class=\"headerlink\" title=\"删除整行\"></a>删除整行</h3><p>OS X : <strong> Command + Backspace</strong><br>Windows Or Linux : <strong> Ctrl + Y</strong>  </p>\n<p><img src=\"10-deleteline.gif\" alt=\"10-deleteline\"></p>\n<h3 id=\"复制整行\"><a href=\"#复制整行\" class=\"headerlink\" title=\"复制整行\"></a>复制整行</h3><p>Mac OS: <strong> Command+D</strong><br>Windows &amp; Linux: <strong> Ctrl+D</strong><br>这个快捷键的厉害之处在于它会复制当前行同时又不会影响系统的剪贴板。<br><img src=\"11-duplicate_lines.gif\" alt=\"11-duplicate_lines\"></p>\n<hr>\n<h2 id=\"上下移动整个方法\"><a href=\"#上下移动整个方法\" class=\"headerlink\" title=\"上下移动整个方法\"></a>上下移动整个方法</h2><p>Mac OS : <strong> Command+Alt+↑/↓ </strong><br>Windows &amp; Linux : <strong> Ctrl+Shift+↑/↓ </strong>  </p>\n<p><img src=\"15-movemethods.gif\" alt=\"15-movemethods\"></p>\n<h2 id=\"展开或者收缩选择区域\"><a href=\"#展开或者收缩选择区域\" class=\"headerlink\" title=\"展开或者收缩选择区域\"></a>展开或者收缩选择区域</h2><p>Mac OS : <strong> alt + ↑/↓ </strong><br>Windows &amp; Linux: <strong> (Ctrl+w )/(Ctrl+Shift+w) </strong><br>扩大（或者缩小）当前的选择范围。比如当前选中一个变量，此操作会把选中范围扩展至句子，方法等。</p>\n<p><img src=\"12-expand_shrink_selection.gif\" alt=\"12-expand_shrink_selection\"></p>\n<h2 id=\"包裹代码段\"><a href=\"#包裹代码段\" class=\"headerlink\" title=\"包裹代码段\"></a>包裹代码段</h2><p>Mac OS : <strong> Command+Alt+t </strong><br>Windows &amp; Linux : <strong> Ctrl+Alt+t </strong><br>选中一段代码段，然后使用if语句或者循环结构等包裹代码。  </p>\n<p><img src=\"13-surround_with.gif\" alt=\"13-surround_with.gif\">  </p>\n<h2 id=\"删除代码块的包裹\"><a href=\"#删除代码块的包裹\" class=\"headerlink\" title=\"删除代码块的包裹\"></a>删除代码块的包裹</h2><p>Mac OS : <strong> Command+Shift+Delete </strong><br>Windows &amp; Linux : <strong> Ctrl+Shift+Delete </strong><br>移除代码结构中的包裹代码，比如 if 语句,  while 循环, 或者 try/catch 语句。<br><img src=\"20-unwrap.gif\" alt=\"20-unwrap\"></p>\n<h2 id=\"查询最近编辑的文件和使用的工作区\"><a href=\"#查询最近编辑的文件和使用的工作区\" class=\"headerlink\" title=\"查询最近编辑的文件和使用的工作区\"></a>查询最近编辑的文件和使用的工作区</h2><p>Mac OS : <strong> Command+e </strong><br>Windows &amp; Linux : <strong> Ctrl+e </strong>  </p>\n<p><img src=\"14-recents.gif\" alt=\"14-recents\"></p>\n<h2 id=\"代码模板\"><a href=\"#代码模板\" class=\"headerlink\" title=\"代码模板\"></a>代码模板</h2><p>Mac OS : <strong> Command+j </strong><br>Windows &amp; Linux : <strong> Ctrl+j </strong><br>此快捷键可以让你迅速地在文件中插入预留的代码片段。你也可以定制你自己的代码片段。</p>\n<p><img src=\"15-live_templates.gif\" alt=\"15-live_templates\"></p>\n<h2 id=\"代码结构自动补全\"><a href=\"#代码结构自动补全\" class=\"headerlink\" title=\"代码结构自动补全\"></a>代码结构自动补全</h2><p>Mac OS : <strong> Command+Shift+Enter </strong><br>Windows &amp; Linux : <strong> Ctrl+Shift+Enter </strong><br>这个操作会将还未完成的代码结构补全。一般可以补全的情形如下：</p>\n<ul>\n<li>在代码行后面添加分号；</li>\n<li>为 if, while 或者 for 语句添加括号</li>\n<li>为方法声明添加括号。</li>\n</ul>\n<p><img src=\"16-completestatement.gif\" alt=\"16-completestatement\"></p>\n<h2 id=\"回到上次编辑的位置\"><a href=\"#回到上次编辑的位置\" class=\"headerlink\" title=\"回到上次编辑的位置\"></a>回到上次编辑的位置</h2><p>Mac OS : <strong> Command+Shift+backspace </strong><br>Windows &amp; Linux : <strong> Ctrl+Shift+backspace </strong>  </p>\n<p><img src=\"17-navigate-previous-changes.gif\" alt=\"17-navigate-previous-changes\"></p>\n<h2 id=\"在代码中根据标签选择功能（Select-In）\"><a href=\"#在代码中根据标签选择功能（Select-In）\" class=\"headerlink\" title=\"在代码中根据标签选择功能（Select In）\"></a>在代码中根据标签选择功能（Select In）</h2><p>Mac OS : <strong> Alt+F1 </strong><br>Windows:<strong> Alt+F1 </strong><br>Linux : 与系统快捷键冲突<br>在代码中执行此快捷方式可以快速定位到select Target所示的功能中。</p>\n<p><img src=\"19-select-in.gif\" alt=\"19-select-in\"></p>\n<h2 id=\"调试常用快捷键\"><a href=\"#调试常用快捷键\" class=\"headerlink\" title=\"调试常用快捷键\"></a>调试常用快捷键</h2><hr>\n<h3 id=\"添加断点（Toggle-Breakpoints）\"><a href=\"#添加断点（Toggle-Breakpoints）\" class=\"headerlink\" title=\"添加断点（Toggle Breakpoints）\"></a>添加断点（Toggle Breakpoints）</h3><p>OSX: <strong> Cmd+F8 </strong><br>Windows/Linux: <strong> Ctrl+F8 </strong><br>相应大家都知道使用鼠标左键点击行首添加断点，使用快捷键添加断点的方式如下：<br><img src=\"21-togglebreakpoints.gif\" alt=\"21-togglebreakpoints\"></p>\n<h3 id=\"条件断点（Conditional-Breakpoints）\"><a href=\"#条件断点（Conditional-Breakpoints）\" class=\"headerlink\" title=\"条件断点（Conditional Breakpoints）\"></a>条件断点（Conditional Breakpoints）</h3><p>通过右键断点，可以对一个断点加入条件。只有当满足条件时，才会进入到断点中。调试神技，只对自己关心的情况进行调试，不浪费时间。</p>\n<p><img src=\"22-conditionalbreakpoint.gif\" alt=\"22-conditionalbreakpoint\"></p>\n<h3 id=\"在断点上打log\"><a href=\"#在断点上打log\" class=\"headerlink\" title=\"在断点上打log\"></a>在断点上打log</h3><p>如果你不想在调试过程中添加log，并且重新编译，可以在断点直接打log，查看结果。<br>鼠标右键点击断点，取消选择“suspend”,并在 “Log evaluated Expression” 中输入你想要打印的log信息。实例如下：<br><img src=\"23-loggingbreakpoints.gif\" alt=\"23-loggingbreakpoints\"></p>\n<h3 id=\"临时断点\"><a href=\"#临时断点\" class=\"headerlink\" title=\"临时断点\"></a>临时断点</h3><p>鼠标（ubuntu上无效）：<strong> Alt+LeftClick </strong> in the left gutter<br>Mac: <strong> Cmd+Alt+Shift+F8 </strong><br>Windows/Linux: <strong> Ctrl+Alt+Shift+F8 </strong><br>这种方式可以添加一个临时断点，当第一次执行完后，会自动消失。</p>\n<h3 id=\"disable断点\"><a href=\"#disable断点\" class=\"headerlink\" title=\"disable断点\"></a>disable断点</h3><p>在已经完成了一些条件，或者打印了断点，不再需要这些断点的时候，你可以使这些断点无效。<br>Mouse(ubuntu 上无效):在已经存在的断点上按住ALT并点击左键： <strong> Alt+LeftClick </strong>   </p>\n<blockquote>\n<p>没有默认的快捷键，如果需要的话，可以创建快捷键。</p>\n</blockquote>\n<p><img src=\"25-disablebreakpoint.gif\" alt=\"25-disablebreakpoint\"></p>\n<h3 id=\"附加调试器\"><a href=\"#附加调试器\" class=\"headerlink\" title=\"附加调试器\"></a>附加调试器</h3><p>及时你没有在调试模式下启动app，你也可以通过以下方式开启调试器。你不需要重新在调试模式下调用app。这是非常有用的。<br>Mouse: 点击图标，选择“ Attach debugger to Android Process”</p>\n<blockquote>\n<p>没有默认的快捷键，如果需要的话，可以创建快捷键。</p>\n</blockquote>\n<h3 id=\"评估表达式（Evaluate-Expression）\"><a href=\"#评估表达式（Evaluate-Expression）\" class=\"headerlink\" title=\"评估表达式（Evaluate Expression）\"></a>评估表达式（Evaluate Expression）</h3><p>快捷键：<strong> Alt+F8 </strong><br>这个功能用来检查变量的内容，评估几乎任何有效的Java表达式。要知道，如果你转变了状态，它会保持下去，当你恢复程序的执行。<br><img src=\"27-evaluateexpression.gif\" alt=\"27-evaluateexpression\"></p>\n<h3 id=\"检查变量（Inspect-Variable）\"><a href=\"#检查变量（Inspect-Variable）\" class=\"headerlink\" title=\"检查变量（Inspect Variable）\"></a>检查变量（Inspect Variable）</h3><p>快捷键：在调试时，在表达式中按住ALT键点击鼠标左键<strong> Alt+LeftClick  </strong><br>不需要打开“Evaluate Expression”对话框，即可查看一个评估一个表达式。</p>\n<p><img src=\"28-mouse_evaluate_expression.gif\" alt=\"28-mouse_evaluate_expression\"></p>\n<h3 id=\"标记对象（Mark-Object）\"><a href=\"#标记对象（Mark-Object）\" class=\"headerlink\" title=\"标记对象（Mark Object）\"></a>标记对象（Mark Object）</h3><ul>\n<li>Mouse: 右击并选择 “Mark Object”  </li>\n<li>OSX : 选中对象，按 F3  </li>\n<li>Windows/Linux: 选中对象，按 F11  </li>\n</ul>\n<p>在调试过程中，你可以使用这个命令给特定的对象添加一个标签，以便于以后识别该对象。</p>\n<p><img src=\"29-markobject.gif\" alt=\"29-markobject\"></p>\n<h3 id=\"分析堆栈信息\"><a href=\"#分析堆栈信息\" class=\"headerlink\" title=\"分析堆栈信息\"></a>分析堆栈信息</h3><ul>\n<li>Menu: Analyze → Analyze Stacktrace</li>\n<li>Find Actions(ctrl+shift+a)输入”analyze stacktrace”即可查看堆栈信息。  </li>\n</ul>\n<p>可以从你的剪切板中加载log的堆栈信息，并且使得他是可点击的。对于我们从bug报告中摘取一段堆栈进行分析非常有利。  </p>\n<p><img src=\"30-analyzestacktrace.gif\" alt=\"30-analyzestacktrace\"></p>\n<blockquote>\n<p>你可以使用”ProGuard Unscramble”插件来分析混淆后的堆栈信息。</p>\n</blockquote>\n<h3 id=\"分析数据流\"><a href=\"#分析数据流\" class=\"headerlink\" title=\"分析数据流\"></a>分析数据流</h3><ul>\n<li>Menu: Analyze → Analyze Data Flow to Here</li>\n<li>Find action: Analyze Data Flow to Here</li>\n</ul>\n<p>可以查看当前变量、参数或field调用的路径！这是非常有用的当你进入到一个你不熟悉的代码环境中，并且你想了解这个参数是怎样传到这里的。<br>这也有一个反向操作“Analyze Data Flow from Here”，它将会显示变量、field或返回类型的被调用的路径。</p>\n<p><img src=\"31-analyzedataflow.gif\" alt=\"31-analyzedataflow\"></p>\n<h2 id=\"显示正在执行的行（Show-Execution-Point）\"><a href=\"#显示正在执行的行（Show-Execution-Point）\" class=\"headerlink\" title=\"显示正在执行的行（Show Execution Point）\"></a>显示正在执行的行（Show Execution Point）</h2><p>快捷键：（debug模式下） : Alt+F10<br>将光标移动到当前正在调试的行。通常用于下列情况：</p>\n<ul>\n<li>你中断的某些地方</li>\n<li>你开始在这个文件查看然后跳到了其它一些文件</li>\n<li>调用这个快捷键可以返回到你正在一步一步的调试会话的地方</li>\n</ul>\n<p><img src=\"36-executionpoint.gif\" alt=\"36-executionpoint\"></p>\n<hr>\n<h2 id=\"多行选择\"><a href=\"#多行选择\" class=\"headerlink\" title=\"多行选择\"></a>多行选择</h2><ul>\n<li>Mac : <strong> Ctrl+G </strong>  </li>\n<li>Windows/Linux: <strong> Alt+J </strong>  </li>\n</ul>\n<p>这一条格外的精彩！它可以同时选择多行，进行编辑。这就意味着你可以在同一个文档中有多个光标。</p>\n<p><img src=\"32-multiselection.gif\" alt=\"32-multiselection\"></p>\n<h2 id=\"多列选择（Column-Selection）\"><a href=\"#多列选择（Column-Selection）\" class=\"headerlink\" title=\"多列选择（Column Selection）\"></a>多列选择（Column Selection）</h2><ul>\n<li>Mouse(ubuntu上无效): Alt+鼠标拖拽  </li>\n<li>Mac : <strong> Cmd+Shift+8 </strong>  </li>\n<li>Windows/Linux: <strong> Shift+Alt+Insert </strong></li>\n</ul>\n<p><img src=\"33-columnselection.gif\" alt=\" 33-columnselection.gif\"></p>\n<blockquote>\n<p>和多行编辑的区别在于，多列编辑只能是每一行的相同列一起编辑。</p>\n</blockquote>\n<h2 id=\"后缀补全（Postfix-Completion）\"><a href=\"#后缀补全（Postfix-Completion）\" class=\"headerlink\" title=\"后缀补全（Postfix Completion）\"></a>后缀补全（Postfix Completion）</h2><p>这个不是非常直观的，但是相当的给力，基本上，它是无需按一连串左键到头部，实现方法的包裹的最好的方式了。<br>比较常用的有：</p>\n<ul>\n<li>.for (for a foreach)</li>\n<li>.format (wraps a string in String.format())</li>\n<li>.cast (wraps a statement in a type cast)</li>\n</ul>\n<p><img src=\"33-postfixcompletion.gif\" alt=\"33-postfixcompletion\"></p>\n<h2 id=\"与剪切板代码进行比较（Compare-With-Clipboard）\"><a href=\"#与剪切板代码进行比较（Compare-With-Clipboard）\" class=\"headerlink\" title=\"与剪切板代码进行比较（Compare With Clipboard）\"></a>与剪切板代码进行比较（Compare With Clipboard）</h2><ul>\n<li>Mouse: right-click the selection and select Compare With Clipboard  </li>\n<li>Find action: compare with clipboard</li>\n</ul>\n<p>用来比较当前你选择的代码和剪切板中的代码有什么区别。个人觉得用处不大。<br><img src=\"34-comparewithclipboard.gif\" alt=\"34-comparewithclipboard\"></p>\n<h2 id=\"停止进程\"><a href=\"#停止进程\" class=\"headerlink\" title=\"停止进程\"></a>停止进程</h2><ul>\n<li>Mac : Cmd+F2</li>\n<li>Windows/Linux: Ctrl+F2</li>\n</ul>\n<p>将会终止正在运行的最近的task或者显示一个可选的可能需要终止的task列表。用于停止调试或者终止一个build。</p>\n<p><img src=\"35-stoprocess.gif\" alt=\"35-stoprocess\"></p>\n<h2 id=\"VCS-操作弹窗\"><a href=\"#VCS-操作弹窗\" class=\"headerlink\" title=\"VCS 操作弹窗\"></a>VCS 操作弹窗</h2><p>Mac: <strong> Ctrl+V </strong><br>Windows/Linux: <strong> Alt+` </strong><br>显示一些常用的版本控制命令。如git commit。  </p>\n<p><img src=\"37-vcspopup.gif\" alt=\"37-vcspopup\"></p>\n<h2 id=\"与分支进行比较（Compare-With-Branch-Git-）\"><a href=\"#与分支进行比较（Compare-With-Branch-Git-）\" class=\"headerlink\" title=\"与分支进行比较（Compare With Branch (Git)）\"></a>与分支进行比较（Compare With Branch (Git)）</h2><p>Menu (for git): <strong> VCS -&gt; Git -&gt; Compare With Branch </strong><br>Find Actions: <strong> Compare With Branch </strong>  </p>\n<p>如果你的项目是在git下，你可以同另一个分支比较你的文件或者文件夹。特别用来比较你的修改和主分支差异多大。</p>\n<p><img src=\"38-comparewithbranch.gif\" alt=\"38-comparewithbranch\"></p>\n<h2 id=\"回车键和TAB键的区别\"><a href=\"#回车键和TAB键的区别\" class=\"headerlink\" title=\"回车键和TAB键的区别\"></a>回车键和TAB键的区别</h2><p>你可以使用Enter或Tab来自动补全代码。它们之间有一个有趣的差异：使用Enter将会自动完成语句。使用Tab将会自动完成删除光标到下一个点号，括号，分号或空格出现前的内容。</p>\n<p><img src=\"45-codecompletionentertab.gif\" alt=\"45-codecompletionentertab\"></p>\n<h2 id=\"跳转到父类的方法\"><a href=\"#跳转到父类的方法\" class=\"headerlink\" title=\"跳转到父类的方法\"></a>跳转到父类的方法</h2><p>Mac: <strong> Cmd+U </strong><br>Windows/Linux: <strong> Ctrl+U </strong>  </p>\n<p>如果光标在一个复写自父类的方法中（例如Activity#onCreate()方法），使用该快捷键，将会到达该方法的父类的实现。如果光标停留在类名上，则跳转到父类。</p>\n<p><img src=\"39-navigatetoparent.gif\" alt=\"39-navigatetoparent\"></p>\n<h2 id=\"返回到编辑器（Return-to-the-Editor）\"><a href=\"#返回到编辑器（Return-to-the-Editor）\" class=\"headerlink\" title=\"返回到编辑器（Return to the Editor）\"></a>返回到编辑器（Return to the Editor）</h2><p>返回并不关闭面板：Escape<br>返回并关闭面板：Shift+Escape</p>\n<p><img src=\"40-returntoeditor.gif\" alt=\"40-returntoeditor\"></p>\n<h2 id=\"跳到最近使用的工具窗口\"><a href=\"#跳到最近使用的工具窗口\" class=\"headerlink\" title=\"跳到最近使用的工具窗口\"></a>跳到最近使用的工具窗口</h2><p>Mac:F12<br>Windows/Linux:F12  </p>\n<p>有时候，你从面板返回到编辑器，但是你发现不得不再返回到这个面板。例如：浏览find usages。使用这个快捷键，你可以不用鼠标返回到这个面板。</p>\n<p><img src=\"41-lasttoolwindow.gif\" alt=\"41-lasttoolwindow\"></p>\n<h2 id=\"隐藏所有面板（Hide-All-Panels）\"><a href=\"#隐藏所有面板（Hide-All-Panels）\" class=\"headerlink\" title=\"隐藏所有面板（Hide All Panels）\"></a>隐藏所有面板（Hide All Panels）</h2><p>Mac: <strong> Cmd+Shift+F12 </strong><br>windows/linux: <strong> Ctrl+Shift+F12 </strong>  </p>\n<p>让编辑器进入某种形式上的全屏模式。再次调用这个快捷键可以返回所有面板到它们之前的状态。</p>\n<p><img src=\"42-hideallwindows.gif\" alt=\"42-hideallwindows\"></p>\n<h2 id=\"通过编号打开面板\"><a href=\"#通过编号打开面板\" class=\"headerlink\" title=\"通过编号打开面板\"></a>通过编号打开面板</h2><p>Mac: <strong> Cmd+Number </strong><br>windows/linux: <strong> Alt+Number </strong>  </p>\n<p>可以通过面板上标签对应的数字打开相应的面板。</p>\n<p><img src=\"43-openpanelbynumber.gif\" alt=\"43-openpanelbynumber\"></p>\n<h2 id=\"参数信息\"><a href=\"#参数信息\" class=\"headerlink\" title=\"参数信息\"></a>参数信息</h2><p>Mac:<strong>  Cmd+P </strong><br>windows/linux: <strong> Ctrl+P </strong>    </p>\n<p><img src=\"44-parameterinfo.gif\" alt=\"44-parameterinfo\"></p>\n<h2 id=\"切换器\"><a href=\"#切换器\" class=\"headerlink\" title=\"切换器\"></a>切换器</h2><p>Shortcut:<strong> Ctrl+Tab </strong></p>\n<p>这个功能和IDE的alt+tab/cmd+tab差不多。它允许你导航到一个tab或一个panel。一旦它被打开，只要你按住ctrl键，你可以使用数字或字母快捷键快速导航。你也可以通过按下backspace关闭一个打开的文件。</p>\n<p><img src=\"46-switcher.gif\" alt=\"46-switcher\"></p>\n<h2 id=\"上下文信息（Context-Info）\"><a href=\"#上下文信息（Context-Info）\" class=\"headerlink\" title=\"上下文信息（Context Info）\"></a>上下文信息（Context Info）</h2><p>Shortcut:<strong> Ctrl+Shift+Q </strong>    </p>\n<p>这个将会显示你当前位置，当你的定义范围超出滚动的区域时。通常，这将会是类或内部类的名称，但它也可能是当前方法名。在我看来，它最好的使用是快速查看当前类继承或实现。 它也可以在xml文件中使用。</p>\n<p><img src=\"47-contextinfo.gif\" alt=\"47-contextinfo\"></p>\n<h2 id=\"代码重构\"><a href=\"#代码重构\" class=\"headerlink\" title=\"代码重构\"></a>代码重构</h2><p>Mac: <strong> Ctrl+T </strong><br>Windows/Linux: <strong> Ctrl+Alt+Shift+T </strong><br>这是一个针对当前选择的代码显示上下文所有可用的重构的快捷键。这个列表可以通过键盘进行检索并且你也可以使用左侧的数字进行快速访问</p>\n<p><img src=\"48-refactorthis.png\" alt=\"48-refactorthis\"></p>\n<h2 id=\"跳转到最近编辑的文件（Recently-Changed-Files）\"><a href=\"#跳转到最近编辑的文件（Recently-Changed-Files）\" class=\"headerlink\" title=\"跳转到最近编辑的文件（Recently Changed Files）\"></a>跳转到最近编辑的文件（Recently Changed Files）</h2><p>Mac: <strong> Cmd+Shift+E </strong><br>Windows/Linux: <strong> Ctrl+Shift+E </strong>  </p>\n<p>这个和“Recents”弹出框有所不同，这个列出是在本地最近被修改的文件。</p>\n<p><img src=\"49-recentlyedited.gif\" alt=\"49-recentlyedited\"></p>\n<h2 id=\"提取变量\"><a href=\"#提取变量\" class=\"headerlink\" title=\"提取变量\"></a>提取变量</h2><p>Mac:<strong> Cmd+Alt+V </strong><br>Windows/Linux:<strong> Ctrl+Alt+V </strong></p>\n<p>这是一个可以不用通过重构菜单，来提取变量的快捷键。  </p>\n<p><img src=\"51-extractvariable.gif\" alt=\"51-extractvariable\"></p>\n<blockquote>\n<p>额外的技巧：<br>如果你想修改声明类型为一些更通用的（如：List而不是ArrayList）,你可以使用Shift+Tab它会给出一个可用类型的列表。</p>\n</blockquote>\n<h2 id=\"提取参数\"><a href=\"#提取参数\" class=\"headerlink\" title=\"提取参数\"></a>提取参数</h2><p>Mac:Cmd+Alt+P<br>Windows/Linux:Ctrl+Alt+P</p>\n<p>这是一个不用通过重构菜单提取参数的快捷键。<br>这个功能是有用的当你意识到一个方法可能是泛型时通过提取一部分做为一个参数。它作用的方式是它会使用当前值作为一个参数然后复制原先的值作为每个调用者的参数。<br><img src=\"52-extractparam.gif\" alt=\"52-extractparam\"></p>\n<blockquote>\n<p>额外的技巧：<br>你也可以保持原来的方法使用它声明一个新方法通过“delegate”选项。  </p>\n</blockquote>\n<h2 id=\"提取方法\"><a href=\"#提取方法\" class=\"headerlink\" title=\"提取方法\"></a>提取方法</h2><p>Mac: Cmd+Alt+M<br>Windows/Linux: Ctrl+Alt+M</p>\n<p>可以提取一个代码块做为一个新的方法。这个功能是相当有用的。无论什么时候你遇到一个开始变得有点复杂的方法，你可以使用这个安全地抽取一部分到另一个方法。我所说的安全是因为IDE不会像我们可能会犯一个愚蠢的复制粘贴错误。</p>\n<p><img src=\"53-extractmethod.gif\" alt=\"53-extractmethod\"></p>\n<blockquote>\n<p>额外的技巧：<br>当你在抽取对话框，你可以修改方法的可见性和参数名称。</p>\n</blockquote>\n<h2 id=\"inline\"><a href=\"#inline\" class=\"headerlink\" title=\"inline\"></a>inline</h2><p>Mac: Cmd+Alt+N<br>Windows/Linux: Ctrl+Alt+N</p>\n<p>你使用提取有一点疯狂并且现在有太多的东西？你可以使用反向操作，它叫做“inline”。<br>它可以作用于方法，Fields，参数和变量。</p>\n<p><img src=\"54-inline.gif\" alt=\"54-inline\"></p>\n<h2 id=\"重命名\"><a href=\"#重命名\" class=\"headerlink\" title=\"重命名\"></a>重命名</h2><p>快捷键：<strong> Shift+F6 </strong><br><img src=\"55-rename.gif\" alt=\"55-rename.gif\"></p>\n<h2 id=\"Pull-Up-Push-Down\"><a href=\"#Pull-Up-Push-Down\" class=\"headerlink\" title=\"Pull Up / Push Down\"></a>Pull Up / Push Down</h2><p>Mac: Ctrl+T 然后选择成员<br>Windows/Linux: Ctrl+Alt+Shift+T 然后选择成员  </p>\n<p>当我们谈论上拉成员，我们的意思是我们将会让当前类的一些成员（通常是方法或field）发送它到父类或接口。</p>\n<p>如果继承于一个类，内容会被移动。如果是实现的一个接口，它将会声明方法作为接口的一部分，在你的类中保持原有的方法并且添加 @Override注解。<br>当我们谈论下推成员，这正好是反向操作，我们会从父类或接口发送一些成员到子类</p>\n<p><img src=\"56-pullupdown.gif\" alt=\"56-pullupdown.gif\"></p>\n<h1 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h1><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl(Command)+C</td>\n<td>复制当前行或选中的内容</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+D</td>\n<td>粘贴当前行或选中的内容</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+X</td>\n<td>剪切当前行或选中的内容</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Y</td>\n<td>删除行</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Z</td>\n<td>倒退</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+Z</td>\n<td>向前</td>\n</tr>\n<tr>\n<td>Alt(Option)+Enter</td>\n<td>自动修正</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+L</td>\n<td>格式化代码</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+I</td>\n<td>将选中的代码进行自动缩进编排</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+O</td>\n<td>优化导入的类和包</td>\n</tr>\n<tr>\n<td>Alt(Option)+Insert</td>\n<td>得到一些Intention Action，可以生成构造器、Getter、Setter、将 == 改为equals() 等</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+V</td>\n<td>选最近使用的剪贴板内容并插入</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+Shift+V</td>\n<td>简单粘贴</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+Insert</td>\n<td>选最近使用的剪贴板内容并插入（同Ctrl(Command)+Shift+V）</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Enter</td>\n<td>在当前行的上面插入新行，并移动光标到新行（此功能光标在行首时有效）</td>\n</tr>\n<tr>\n<td>Shift+Enter</td>\n<td>在当前行的下面插入新行，并移动光标到新行</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+J</td>\n<td>自动代码</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+T</td>\n<td>把选中的代码放在 try{} 、if{} 、 else{} 里</td>\n</tr>\n<tr>\n<td>Shift+Alt(Option)+Insert</td>\n<td>竖编辑模式</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+ /</td>\n<td>注释 //</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+ /</td>\n<td>注释 /…/</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+J</td>\n<td>合并成一行</td>\n</tr>\n<tr>\n<td>F2/Shift+F2</td>\n<td>跳转到下/上一个错误语句处</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+Back</td>\n<td>跳转到上次编辑的地方</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+Space</td>\n<td>类名自动完成</td>\n</tr>\n<tr>\n<td>Shift+Alt(Option)+Up/Down</td>\n<td>内容向上/下移动</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+Up/Down</td>\n<td>语句向上/下移动</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+U</td>\n<td>大小写切换</td>\n</tr>\n<tr>\n<td>Tab</td>\n<td>代码标签输入完成后，按 Tab，生成代码</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Backspace</td>\n<td>按单词删除</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+Enter</td>\n<td>语句完成</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+J</td>\n<td>用动态模板环绕</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h2><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl(Command)+F12</td>\n<td>显示当前文件的结构</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+H</td>\n<td>显示类继承结构图</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Q</td>\n<td>显示注释文档</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+P</td>\n<td>方法参数提示</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+U</td>\n<td>打开当前类的父类或者实现的接口</td>\n</tr>\n<tr>\n<td>Alt(Option)+Left/Right</td>\n<td>切换代码视图</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+Left/Right</td>\n<td>返回上次编辑的位置</td>\n</tr>\n<tr>\n<td>Alt(Option)+Up/Down</td>\n<td>在方法间快速移动定位</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+B</td>\n<td>快速打开光标处的类或方法</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+W</td>\n<td>选中代码，连续按会有其他效果</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+W</td>\n<td>取消选择光标所在词</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+ - / +</td>\n<td>折叠/展开代码</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+ - / +</td>\n<td>折叠/展开全部代码</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+.</td>\n<td>折叠/展开当前花括号中的代码</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+ ] / [</td>\n<td>跳转到代码块结束/开始处</td>\n</tr>\n<tr>\n<td>F2 或 Shift+F2</td>\n<td>高亮错误或警告快速定位</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+C</td>\n<td>复制路径</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+Shift+C</td>\n<td>复制引用，必须选择类名</td>\n</tr>\n<tr>\n<td>Alt(Option)+Up/Down</td>\n<td>在方法间快速移动定位</td>\n</tr>\n<tr>\n<td>Shift+F1</td>\n<td>要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+G</td>\n<td>定位行</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl(Command)+F</td>\n<td>在当前窗口查找文本</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+F</td>\n<td>在指定环境下查找文本</td>\n</tr>\n<tr>\n<td>F3</td>\n<td>向下查找关键字出现位置</td>\n</tr>\n<tr>\n<td>Shift+F3</td>\n<td>向上一个关键字出现位置</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+R</td>\n<td>在当前窗口替换文本</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+R</td>\n<td>在指定窗口替换文本</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+N</td>\n<td>查找类</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+N</td>\n<td>查找文件</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+Alt(Option)+N</td>\n<td>查找项目中的方法或变量</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+B</td>\n<td>查找变量的来源</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+B</td>\n<td>快速打开光标处的类或方法</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+B</td>\n<td>跳转到类或方法实现处</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+E</td>\n<td>最近打开的文件</td>\n</tr>\n<tr>\n<td>Alt(Option)+F3</td>\n<td>快速查找，效果和Ctrl(Command)+F相同</td>\n</tr>\n<tr>\n<td>F4</td>\n<td>跳转至定义变量的位置</td>\n</tr>\n<tr>\n<td>Alt(Option)+F7</td>\n<td>查询当前元素在工程中的引用</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+F7</td>\n<td>查询当前元素在当前文件中的引用，然后按 F3 可以选择</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+F7</td>\n<td>选中查询当前元素在工程中的引用</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+F7</td>\n<td>高亮显示匹配的字符，按 Esc 高亮消失</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+F7</td>\n<td>查找某个方法的所有调用地方</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+Alt(Option)+N</td>\n<td>查找类中的方法或变量</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+O</td>\n<td>弹出显示查找内容</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+Up/Down</td>\n<td>快速跳转搜索结果</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Shift+S</td>\n<td>高级搜索、搜索结构</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h2><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>F5</td>\n<td>复制</td>\n</tr>\n<tr>\n<td>F6</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>Alt(Option)+Delete</td>\n<td>安全删除</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+U</td>\n<td>转到父类</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+O</td>\n<td>重写父类的方法</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+I</td>\n<td>实现方法</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+N</td>\n<td>内联</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+Shift+T</td>\n<td>弹出重构菜单</td>\n</tr>\n<tr>\n<td>Shift+F6</td>\n<td>重构-重命名</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+M</td>\n<td>提取代码组成方法</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+C</td>\n<td>将变量更改为常量</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+V</td>\n<td>定义变量引用当前对象或者方法的返回值</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+F</td>\n<td>将局部变量更改为类的成员变量</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+P</td>\n<td>将变量更改为方法的参数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>F8</td>\n<td>跳到下一步</td>\n</tr>\n<tr>\n<td>Shift+F8</td>\n<td>跳出函数、跳到下一个断点</td>\n</tr>\n<tr>\n<td>Alt(Option)+Shift+F8</td>\n<td>强制跳出函数</td>\n</tr>\n<tr>\n<td>F7</td>\n<td>进入代码</td>\n</tr>\n<tr>\n<td>Shift+F7</td>\n<td>智能进入代码</td>\n</tr>\n<tr>\n<td>Alt(Option)+Shift+F7</td>\n<td>强制进入代码</td>\n</tr>\n<tr>\n<td>Alt(Option)+F9</td>\n<td>运行至光标处</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+F9</td>\n<td>强制运行至光标处</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+F2</td>\n<td>停止运行</td>\n</tr>\n<tr>\n<td>Alt(Option)+F8</td>\n<td>计算变量值</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"VCS\"><a href=\"#VCS\" class=\"headerlink\" title=\"VCS\"></a>VCS</h2><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Alt(Option)+ ~</td>\n<td>VCS 操作菜单</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+K</td>\n<td>提交更改</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+T</td>\n<td>更新项目</td>\n</tr>\n<tr>\n<td>Ctrl(Command)+Alt(Option)+Shift+D</td>\n<td>显示变化</td>\n</tr>\n</tbody>\n</table>\n<p>谢谢阅读完这篇整理的文章，希望从中能够收获知识。<br>转载请注明出处：<a href=\"www.aman.site\">www.aman.site</a></p>\n<blockquote>\n<p>参考文献：<br><a href=\"https://greenrobot.me/android-dev-tool/android-studio-dev-tips-1/\">Android Cool Posts</a><br><a href=\"http://www.developerphil.com/android-studio-tips-of-the-day-roundup-1/\">Android Studio Tips Of the Day - Roundup #1  </a><br><a href=\"http://www.developerphil.com/android-studio-tips-of-the-day-roundup-2/\">Android Studio Tips Of the Day - Roundup #2  </a><br><a href=\"http://www.developerphil.com/android-studio-tips-of-the-day-roundup-3/\">Android Studio Tips Of the Day - Roundup #3  </a><br><a href=\"http://www.developerphil.com/android-studio-tips-of-the-day-roundup-4/\">Android Studio Tips Of the Day - Roundup #4  </a><br><a href=\"http://www.developerphil.com/android-studio-tips-of-the-day-roundup-5/\">Android Studio Tips Of the Day - Roundup #5  </a><br><a href=\"http://www.developerphil.com/android-studio-tips-of-the-day-roundup-6/\">Android Studio Tips Of the Day - Roundup #6  </a>  </p>\n</blockquote>"},{"layout":"post","title":"AndroidStudio VS eclipse","subtitle":" AndroidStudio VS eclipse","date":"2016-04-19T12:26:47.000Z","author":"JianGuo Yang","type":"categories","header-img":"post-bg-2015.jpg","_content":"\n\n## Android Studio VS eclipse\n如果你使用eclipse很长一段时间，你需要了解这两种IDE之间最基本的差异，下面这张表格将详细描述两者在定义上的差别。包括他们的UI，编译工具，快捷键，以及项目配置等等。  \n相信目前大家用Eclipse的还是大多数，那么首先就来说一下Studio的一些优点，比较才能更有说服力，才能说明为什么我们要从Eclipse迁移到Studio。  \n* 1、Google推出的,为Android APP开发量身定制  \n毫无疑问，这个是它的最大优势，Android Stuido是Google推出，专门为Android“量身订做”的，是Google大力支持的一款基于IntelliJ IDEA改造的IDE。\n* 2、速度更快  \nEclipse的启动速度、响应速度、内存占用一直被诟病，相信大家这点应该深有体会，而且经常遇到卡死状态。Studio不管哪一个方面都全面领先Eclipse。\n* 3、UI更漂亮  \nStuido自带的Darcula主题的炫酷黑界面实在是高大上，相比而言Eclipse下的黑色主题太low了\n* 4、更加智能  \n提示补全对于开发来说意义重大， Studio则更加智能，智能保存，从此再也不用每次都 Ctrl + S了。熟悉Studio以后效率会大大提升。\n* 5、整合了Gradle构建工具  \nGradle是一个新的构建工具，自Studio亮相之处就支持Gradle，可以说Gradle集合了Ant和Maven的优点，不管是配置、编译、打包都非常棒。\n* 6、强大的UI编辑器  \nAndroid Studio的编辑器非常的智能，除了吸收Eclipse+ADT的优点之外，还自带了多设备的实时预览，相对这对Android开发者来说简直是神器啊。\n* 7、内置终端  \nStudio内置终端，这对于习惯命令行操作的人来说简直是福音啊，再也不用来回切换了，一个Studio全部搞定。\n* 8、更完善的插件系统  \nStudio下支持各种插件，如Git、Markdown、Gradle等等，你想要什么插件，直接搜索下载。\n* 9、完美整合版本控制系统  \n安装的时候就自带了如GitHub, Git, SVN等流行的版本控制系统，可以直接check out你的项目。\n\n> 不足之处：  \n暂未支持NDK，所以如果你的项目用到了NDK最好也不要使用Studio\n\n\n### UI\n#### 没有WorkSpace的概念\nAndroidStudio和eclipse最大的差别在于，androidstudio并没有WorkSpace的概念，这就意味着，你仅\n可以在同一时间编辑一个项目。AndroidStudio中，一个项目由多个module组成。\n如果你有多个不相关的项目，你也可以在不同的窗口中打开。如果执意想在同一个窗口中打开不相关的项目，也可以\n将这些项目以Module的形式导入。\n\n以下这张图列出了eclipse 和 androidstudio之间的概念性差别。\n\n| eclipse   | AndroidStudio |\n| -------   |---------------|\n| Workspace | Project |\n| Project   | Module  |\n| Facet     | Facet   |  \n| Library   | Library |\n| JRE       |     SDK |\n| Classpath variable | Classpath variable|\n\n#### 没有视角的概念\n第二个比较大的区别在于Andorid Studio没有透视（perspectives），这意味着你不需要像eclipse那样手动的切换不同工作空间的布局。AndroidStudio可以自动的根据你的上下文切换相关的工具。例如，你在调试的时候，会自动切换到Debugger的工具窗口。\n\n![自动显示工作空间](migration_guide_debugger_1.png)\n\n#### 工具窗口\nandroidstudio同样具有工具窗口。打开一个工具窗口，只需要点击相应的工具窗口条即可选择想要打开的窗口。\n如果窗口被隐藏，可以通过点击屏幕坐下角对应的图标。也可以通过ALT键+对应的数字打开。例如：  \n* 打开 Project：Alt+1；\n* 打开 Terminal ： Alt+F12\n\n#### 设置project对应的文件自动滚动\n默认情况下，Andorid Studio 并不支持在切换不同文件的时候，左侧的project文件跟着变动。可以右键点击“project”，在弹出的对话框中勾选\"AutoScrollToSource\" 和 \"AutoScrollFromSource\"，使得在点击左侧的文件名时，右侧窗口自动打开并跳转到对应的文件。点击右侧的文件窗口时，左侧也可以自动跳转。  \n\n![自动跟随](migration_guide_auto_scroll_from_source.png)\n\n#### 显示行号\nsettings/Preferences | Editor | General | Appearance | Show line numbers\n","source":"_posts/AndroidStudio_VS_eclipse.md","raw":"---\nlayout:     post\ntitle: AndroidStudio VS eclipse\nsubtitle:   \" AndroidStudio VS eclipse\"\ndate: 2016-04-19 20:26:47\nauthor:     \"JianGuo Yang\"\ntype: \"categories\"\nheader-img: \"post-bg-2015.jpg\"\ntags: AndroidStudio\n---\n\n\n## Android Studio VS eclipse\n如果你使用eclipse很长一段时间，你需要了解这两种IDE之间最基本的差异，下面这张表格将详细描述两者在定义上的差别。包括他们的UI，编译工具，快捷键，以及项目配置等等。  \n相信目前大家用Eclipse的还是大多数，那么首先就来说一下Studio的一些优点，比较才能更有说服力，才能说明为什么我们要从Eclipse迁移到Studio。  \n* 1、Google推出的,为Android APP开发量身定制  \n毫无疑问，这个是它的最大优势，Android Stuido是Google推出，专门为Android“量身订做”的，是Google大力支持的一款基于IntelliJ IDEA改造的IDE。\n* 2、速度更快  \nEclipse的启动速度、响应速度、内存占用一直被诟病，相信大家这点应该深有体会，而且经常遇到卡死状态。Studio不管哪一个方面都全面领先Eclipse。\n* 3、UI更漂亮  \nStuido自带的Darcula主题的炫酷黑界面实在是高大上，相比而言Eclipse下的黑色主题太low了\n* 4、更加智能  \n提示补全对于开发来说意义重大， Studio则更加智能，智能保存，从此再也不用每次都 Ctrl + S了。熟悉Studio以后效率会大大提升。\n* 5、整合了Gradle构建工具  \nGradle是一个新的构建工具，自Studio亮相之处就支持Gradle，可以说Gradle集合了Ant和Maven的优点，不管是配置、编译、打包都非常棒。\n* 6、强大的UI编辑器  \nAndroid Studio的编辑器非常的智能，除了吸收Eclipse+ADT的优点之外，还自带了多设备的实时预览，相对这对Android开发者来说简直是神器啊。\n* 7、内置终端  \nStudio内置终端，这对于习惯命令行操作的人来说简直是福音啊，再也不用来回切换了，一个Studio全部搞定。\n* 8、更完善的插件系统  \nStudio下支持各种插件，如Git、Markdown、Gradle等等，你想要什么插件，直接搜索下载。\n* 9、完美整合版本控制系统  \n安装的时候就自带了如GitHub, Git, SVN等流行的版本控制系统，可以直接check out你的项目。\n\n> 不足之处：  \n暂未支持NDK，所以如果你的项目用到了NDK最好也不要使用Studio\n\n\n### UI\n#### 没有WorkSpace的概念\nAndroidStudio和eclipse最大的差别在于，androidstudio并没有WorkSpace的概念，这就意味着，你仅\n可以在同一时间编辑一个项目。AndroidStudio中，一个项目由多个module组成。\n如果你有多个不相关的项目，你也可以在不同的窗口中打开。如果执意想在同一个窗口中打开不相关的项目，也可以\n将这些项目以Module的形式导入。\n\n以下这张图列出了eclipse 和 androidstudio之间的概念性差别。\n\n| eclipse   | AndroidStudio |\n| -------   |---------------|\n| Workspace | Project |\n| Project   | Module  |\n| Facet     | Facet   |  \n| Library   | Library |\n| JRE       |     SDK |\n| Classpath variable | Classpath variable|\n\n#### 没有视角的概念\n第二个比较大的区别在于Andorid Studio没有透视（perspectives），这意味着你不需要像eclipse那样手动的切换不同工作空间的布局。AndroidStudio可以自动的根据你的上下文切换相关的工具。例如，你在调试的时候，会自动切换到Debugger的工具窗口。\n\n![自动显示工作空间](migration_guide_debugger_1.png)\n\n#### 工具窗口\nandroidstudio同样具有工具窗口。打开一个工具窗口，只需要点击相应的工具窗口条即可选择想要打开的窗口。\n如果窗口被隐藏，可以通过点击屏幕坐下角对应的图标。也可以通过ALT键+对应的数字打开。例如：  \n* 打开 Project：Alt+1；\n* 打开 Terminal ： Alt+F12\n\n#### 设置project对应的文件自动滚动\n默认情况下，Andorid Studio 并不支持在切换不同文件的时候，左侧的project文件跟着变动。可以右键点击“project”，在弹出的对话框中勾选\"AutoScrollToSource\" 和 \"AutoScrollFromSource\"，使得在点击左侧的文件名时，右侧窗口自动打开并跳转到对应的文件。点击右侧的文件窗口时，左侧也可以自动跳转。  \n\n![自动跟随](migration_guide_auto_scroll_from_source.png)\n\n#### 显示行号\nsettings/Preferences | Editor | General | Appearance | Show line numbers\n","slug":"AndroidStudio_VS_eclipse","published":1,"updated":"2016-06-18T02:21:35.244Z","comments":1,"photos":[],"link":"","_id":"cipkjorwl00039x2nwkyq9hcj","content":"<h2 id=\"Android-Studio-VS-eclipse\"><a href=\"#Android-Studio-VS-eclipse\" class=\"headerlink\" title=\"Android Studio VS eclipse\"></a>Android Studio VS eclipse</h2><p>如果你使用eclipse很长一段时间，你需要了解这两种IDE之间最基本的差异，下面这张表格将详细描述两者在定义上的差别。包括他们的UI，编译工具，快捷键，以及项目配置等等。<br>相信目前大家用Eclipse的还是大多数，那么首先就来说一下Studio的一些优点，比较才能更有说服力，才能说明为什么我们要从Eclipse迁移到Studio。  </p>\n<ul>\n<li>1、Google推出的,为Android APP开发量身定制<br>毫无疑问，这个是它的最大优势，Android Stuido是Google推出，专门为Android“量身订做”的，是Google大力支持的一款基于IntelliJ IDEA改造的IDE。</li>\n<li>2、速度更快<br>Eclipse的启动速度、响应速度、内存占用一直被诟病，相信大家这点应该深有体会，而且经常遇到卡死状态。Studio不管哪一个方面都全面领先Eclipse。</li>\n<li>3、UI更漂亮<br>Stuido自带的Darcula主题的炫酷黑界面实在是高大上，相比而言Eclipse下的黑色主题太low了</li>\n<li>4、更加智能<br>提示补全对于开发来说意义重大， Studio则更加智能，智能保存，从此再也不用每次都 Ctrl + S了。熟悉Studio以后效率会大大提升。</li>\n<li>5、整合了Gradle构建工具<br>Gradle是一个新的构建工具，自Studio亮相之处就支持Gradle，可以说Gradle集合了Ant和Maven的优点，不管是配置、编译、打包都非常棒。</li>\n<li>6、强大的UI编辑器<br>Android Studio的编辑器非常的智能，除了吸收Eclipse+ADT的优点之外，还自带了多设备的实时预览，相对这对Android开发者来说简直是神器啊。</li>\n<li>7、内置终端<br>Studio内置终端，这对于习惯命令行操作的人来说简直是福音啊，再也不用来回切换了，一个Studio全部搞定。</li>\n<li>8、更完善的插件系统<br>Studio下支持各种插件，如Git、Markdown、Gradle等等，你想要什么插件，直接搜索下载。</li>\n<li>9、完美整合版本控制系统<br>安装的时候就自带了如GitHub, Git, SVN等流行的版本控制系统，可以直接check out你的项目。</li>\n</ul>\n<blockquote>\n<p>不足之处：<br>暂未支持NDK，所以如果你的项目用到了NDK最好也不要使用Studio</p>\n</blockquote>\n<h3 id=\"UI\"><a href=\"#UI\" class=\"headerlink\" title=\"UI\"></a>UI</h3><h4 id=\"没有WorkSpace的概念\"><a href=\"#没有WorkSpace的概念\" class=\"headerlink\" title=\"没有WorkSpace的概念\"></a>没有WorkSpace的概念</h4><p>AndroidStudio和eclipse最大的差别在于，androidstudio并没有WorkSpace的概念，这就意味着，你仅<br>可以在同一时间编辑一个项目。AndroidStudio中，一个项目由多个module组成。<br>如果你有多个不相关的项目，你也可以在不同的窗口中打开。如果执意想在同一个窗口中打开不相关的项目，也可以<br>将这些项目以Module的形式导入。</p>\n<p>以下这张图列出了eclipse 和 androidstudio之间的概念性差别。</p>\n<table>\n<thead>\n<tr>\n<th>eclipse</th>\n<th>AndroidStudio</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Workspace</td>\n<td>Project</td>\n</tr>\n<tr>\n<td>Project</td>\n<td>Module</td>\n</tr>\n<tr>\n<td>Facet</td>\n<td>Facet</td>\n</tr>\n<tr>\n<td>Library</td>\n<td>Library</td>\n</tr>\n<tr>\n<td>JRE</td>\n<td>SDK</td>\n</tr>\n<tr>\n<td>Classpath variable</td>\n<td>Classpath variable</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"没有视角的概念\"><a href=\"#没有视角的概念\" class=\"headerlink\" title=\"没有视角的概念\"></a>没有视角的概念</h4><p>第二个比较大的区别在于Andorid Studio没有透视（perspectives），这意味着你不需要像eclipse那样手动的切换不同工作空间的布局。AndroidStudio可以自动的根据你的上下文切换相关的工具。例如，你在调试的时候，会自动切换到Debugger的工具窗口。</p>\n<p><img src=\"migration_guide_debugger_1.png\" alt=\"自动显示工作空间\"></p>\n<h4 id=\"工具窗口\"><a href=\"#工具窗口\" class=\"headerlink\" title=\"工具窗口\"></a>工具窗口</h4><p>androidstudio同样具有工具窗口。打开一个工具窗口，只需要点击相应的工具窗口条即可选择想要打开的窗口。<br>如果窗口被隐藏，可以通过点击屏幕坐下角对应的图标。也可以通过ALT键+对应的数字打开。例如：  </p>\n<ul>\n<li>打开 Project：Alt+1；</li>\n<li>打开 Terminal ： Alt+F12</li>\n</ul>\n<h4 id=\"设置project对应的文件自动滚动\"><a href=\"#设置project对应的文件自动滚动\" class=\"headerlink\" title=\"设置project对应的文件自动滚动\"></a>设置project对应的文件自动滚动</h4><p>默认情况下，Andorid Studio 并不支持在切换不同文件的时候，左侧的project文件跟着变动。可以右键点击“project”，在弹出的对话框中勾选”AutoScrollToSource” 和 “AutoScrollFromSource”，使得在点击左侧的文件名时，右侧窗口自动打开并跳转到对应的文件。点击右侧的文件窗口时，左侧也可以自动跳转。  </p>\n<p><img src=\"migration_guide_auto_scroll_from_source.png\" alt=\"自动跟随\"></p>\n<h4 id=\"显示行号\"><a href=\"#显示行号\" class=\"headerlink\" title=\"显示行号\"></a>显示行号</h4><p>settings/Preferences | Editor | General | Appearance | Show line numbers</p>\n","excerpt":"","more":"<h2 id=\"Android-Studio-VS-eclipse\"><a href=\"#Android-Studio-VS-eclipse\" class=\"headerlink\" title=\"Android Studio VS eclipse\"></a>Android Studio VS eclipse</h2><p>如果你使用eclipse很长一段时间，你需要了解这两种IDE之间最基本的差异，下面这张表格将详细描述两者在定义上的差别。包括他们的UI，编译工具，快捷键，以及项目配置等等。<br>相信目前大家用Eclipse的还是大多数，那么首先就来说一下Studio的一些优点，比较才能更有说服力，才能说明为什么我们要从Eclipse迁移到Studio。  </p>\n<ul>\n<li>1、Google推出的,为Android APP开发量身定制<br>毫无疑问，这个是它的最大优势，Android Stuido是Google推出，专门为Android“量身订做”的，是Google大力支持的一款基于IntelliJ IDEA改造的IDE。</li>\n<li>2、速度更快<br>Eclipse的启动速度、响应速度、内存占用一直被诟病，相信大家这点应该深有体会，而且经常遇到卡死状态。Studio不管哪一个方面都全面领先Eclipse。</li>\n<li>3、UI更漂亮<br>Stuido自带的Darcula主题的炫酷黑界面实在是高大上，相比而言Eclipse下的黑色主题太low了</li>\n<li>4、更加智能<br>提示补全对于开发来说意义重大， Studio则更加智能，智能保存，从此再也不用每次都 Ctrl + S了。熟悉Studio以后效率会大大提升。</li>\n<li>5、整合了Gradle构建工具<br>Gradle是一个新的构建工具，自Studio亮相之处就支持Gradle，可以说Gradle集合了Ant和Maven的优点，不管是配置、编译、打包都非常棒。</li>\n<li>6、强大的UI编辑器<br>Android Studio的编辑器非常的智能，除了吸收Eclipse+ADT的优点之外，还自带了多设备的实时预览，相对这对Android开发者来说简直是神器啊。</li>\n<li>7、内置终端<br>Studio内置终端，这对于习惯命令行操作的人来说简直是福音啊，再也不用来回切换了，一个Studio全部搞定。</li>\n<li>8、更完善的插件系统<br>Studio下支持各种插件，如Git、Markdown、Gradle等等，你想要什么插件，直接搜索下载。</li>\n<li>9、完美整合版本控制系统<br>安装的时候就自带了如GitHub, Git, SVN等流行的版本控制系统，可以直接check out你的项目。</li>\n</ul>\n<blockquote>\n<p>不足之处：<br>暂未支持NDK，所以如果你的项目用到了NDK最好也不要使用Studio</p>\n</blockquote>\n<h3 id=\"UI\"><a href=\"#UI\" class=\"headerlink\" title=\"UI\"></a>UI</h3><h4 id=\"没有WorkSpace的概念\"><a href=\"#没有WorkSpace的概念\" class=\"headerlink\" title=\"没有WorkSpace的概念\"></a>没有WorkSpace的概念</h4><p>AndroidStudio和eclipse最大的差别在于，androidstudio并没有WorkSpace的概念，这就意味着，你仅<br>可以在同一时间编辑一个项目。AndroidStudio中，一个项目由多个module组成。<br>如果你有多个不相关的项目，你也可以在不同的窗口中打开。如果执意想在同一个窗口中打开不相关的项目，也可以<br>将这些项目以Module的形式导入。</p>\n<p>以下这张图列出了eclipse 和 androidstudio之间的概念性差别。</p>\n<table>\n<thead>\n<tr>\n<th>eclipse</th>\n<th>AndroidStudio</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Workspace</td>\n<td>Project</td>\n</tr>\n<tr>\n<td>Project</td>\n<td>Module</td>\n</tr>\n<tr>\n<td>Facet</td>\n<td>Facet</td>\n</tr>\n<tr>\n<td>Library</td>\n<td>Library</td>\n</tr>\n<tr>\n<td>JRE</td>\n<td>SDK</td>\n</tr>\n<tr>\n<td>Classpath variable</td>\n<td>Classpath variable</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"没有视角的概念\"><a href=\"#没有视角的概念\" class=\"headerlink\" title=\"没有视角的概念\"></a>没有视角的概念</h4><p>第二个比较大的区别在于Andorid Studio没有透视（perspectives），这意味着你不需要像eclipse那样手动的切换不同工作空间的布局。AndroidStudio可以自动的根据你的上下文切换相关的工具。例如，你在调试的时候，会自动切换到Debugger的工具窗口。</p>\n<p><img src=\"migration_guide_debugger_1.png\" alt=\"自动显示工作空间\"></p>\n<h4 id=\"工具窗口\"><a href=\"#工具窗口\" class=\"headerlink\" title=\"工具窗口\"></a>工具窗口</h4><p>androidstudio同样具有工具窗口。打开一个工具窗口，只需要点击相应的工具窗口条即可选择想要打开的窗口。<br>如果窗口被隐藏，可以通过点击屏幕坐下角对应的图标。也可以通过ALT键+对应的数字打开。例如：  </p>\n<ul>\n<li>打开 Project：Alt+1；</li>\n<li>打开 Terminal ： Alt+F12</li>\n</ul>\n<h4 id=\"设置project对应的文件自动滚动\"><a href=\"#设置project对应的文件自动滚动\" class=\"headerlink\" title=\"设置project对应的文件自动滚动\"></a>设置project对应的文件自动滚动</h4><p>默认情况下，Andorid Studio 并不支持在切换不同文件的时候，左侧的project文件跟着变动。可以右键点击“project”，在弹出的对话框中勾选”AutoScrollToSource” 和 “AutoScrollFromSource”，使得在点击左侧的文件名时，右侧窗口自动打开并跳转到对应的文件。点击右侧的文件窗口时，左侧也可以自动跳转。  </p>\n<p><img src=\"migration_guide_auto_scroll_from_source.png\" alt=\"自动跟随\"></p>\n<h4 id=\"显示行号\"><a href=\"#显示行号\" class=\"headerlink\" title=\"显示行号\"></a>显示行号</h4><p>settings/Preferences | Editor | General | Appearance | Show line numbers</p>\n"},{"layout":"post","title":"envsetup-sh的常用命令","subtitle":" Android开源项目编译中sh的常用命令","date":"2016-03-10T01:22:04.000Z","author":"JianGuo Yang","header-img":"post-bg-2015.jpg","_content":"\n# envsetup-sh的常用命令\n\n** 摘要：** 这篇文档主要对android下的编译脚本文件 envsetup.sh 进行了简单的分析，并且从中总结了一些在开发过程中常用的命令，以便于开发者们提高开发效率。\n\n## 常用命令索引\n` croot `  - -到达android根目录；\n` cproj + 模块名 `  - -到达项目的根目录下；\n` gettop `  - -得到顶级目录路径；\n` findmakefile ` - -找到make文件。\n\n` m ` - -当前目录下编译执行，相当于在android目录下执行make\n` mm ` - -执行当前目录下最近的make文件\n` mmm `  - -在android目录下，执行某个文件夹下的make文件\n` mma ` - -编译当前目录下所有的模块和他们的依赖\n` mmma ` - -编译提供的目录下的所有模块和他们的依赖\n` make sdk ` - -编译SDK及其包含的一些工具 (adb, fastboot, 等等)。\n` make snod `  - -从当前编译出的二进制数据编译system.img文件 ，这条命令将重新生成镜像，消耗的时间很少，如果你修改了一些数据文件（如音乐、视频）等文件时比较有用。\n` make cts `  - -这条命令将编译CTS套机，编译出的结果放在out目录对应版的data/app目录下面。CTS测试时有用。\n` make services ` - -\n` make runtime ` - -\n` make droid ` - -make droid is the normal build.\n` make all ` - -make everything, whether it is included in the product definition or not\n` make clean ` - -remove all built files (prepare for a new build). Same as rm -rf out _make modules - shows a list of submodules that can be built (List of all LOCAL_MODULE definitions)\n` make installclean `  - -同上\n` make *` - -make a specific module (note that this is not the same as directory name. It is the LOCAL_MODULE definition in the Android.mk file)\n` make clean *`  - -clean a specific module\n` make bootimage ` - -编译创建一个新的 boot image\n` make bootimage `  - -TARGET_PREBUILT_KERNEL=/path/to/bzImage - create a new boot image with custom bzImage\n` make systemimage ` - -编译创建一个新的 system image\n\n## make命令\n\n不用多解释，编译整个项目，可以加模块名参数等。\n\n``` bash\nfunction make()\n{\n    local start_time=$(date +\"%s\")\n    $(get_make_command) \"$@\"\n    local ret=$?\n    local end_time=$(date +\"%s\")\n    local tdiff=$(($end_time-$start_time))\n    local hours=$(($tdiff / 3600 ))\n    local mins=$((($tdiff % 3600) / 60))\n    local secs=$(($tdiff % 60))\n    echo\n    if [ $ret -eq 0 ] ; then\n        echo -n -e \"#### make completed successfully \"\n    else\n        echo -n -e \"#### make failed to build some targets \"\n    fi\n    if [ $hours -gt 0 ] ; then\n        printf \"(%02g:%02g:%02g (hh:mm:ss))\" $hours $mins $secs\n    elif [ $mins -gt 0 ] ; then\n        printf \"(%02g:%02g (mm:ss))\" $mins $secs\n    elif [ $secs -gt 0 ] ; then\n        printf \"(%s seconds)\" $secs\n    fi\n    echo -e \" ####\"\n    echo\n    return $ret\n}\n\n```\n\n> **提示：**具体功能还需要分析。\n\n## 设置编译环境的java home\n```bash\n# Force JAVA_HOME to point to java 1.7 or java 1.6  if it isn't already set.\n#\n# Note that the MacOS path for java 1.7 includes a minor revision number (sigh).\n# For some reason, installing the JDK doesn't make it show up in the\n# JavaVM.framework/Versions/1.7/ folder.\nfunction set_java_home() {\n    # Clear the existing JAVA_HOME value if we set it ourselves, so that\n    # we can reset it later, depending on the version of java the build\n    # system needs.\n    #\n    # If we don't do this, the JAVA_HOME value set by the first call to\n    # build/envsetup.sh will persist forever.\n    if [ -n \"$ANDROID_SET_JAVA_HOME\" ]; then\n      export JAVA_HOME=\"\"\n    fi\n\n    if [ ! \"$JAVA_HOME\" ]; then\n      if [ -n \"$LEGACY_USE_JAVA6\" ]; then\n        case `uname -s` in\n            Darwin)\n                export JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home\n                ;;\n            *)\n                export JAVA_HOME=/usr/lib/jvm/java-6-sun\n                ;;\n        esac\n      else\n        case `uname -s` in\n            Darwin)\n                export JAVA_HOME=$(/usr/libexec/java_home -v 1.7)\n                ;;\n            *)\n                export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64\n                ;;\n        esac\n      fi\n\n      # Keep track of the fact that we set JAVA_HOME ourselves, so that\n      # we can change it on the next envsetup.sh, if required.\n      export ANDROID_SET_JAVA_HOME=true\n    fi\n}\n\n```\n\n## 到某个文件所在的目录下\n```bash\nfunction godir () {\n    if [[ -z \"$1\" ]]; then\n        echo \"Usage: godir <regex>\"\n        return\n    fi\n    T=$(gettop)\n    if [[ ! -f $T/filelist ]]; then\n        echo -n \"Creating index...\"\n        (\\cd $T; find . -wholename ./out -prune -o -wholename ./.repo -prune -o -type f > filelist)\n        echo \" Done\"\n        echo \"\"\n    fi\n    local lines\n    lines=($(\\grep \"$1\" $T/filelist | sed -e 's/\\/[^/]*$//' | sort | uniq))\n    if [[ ${#lines[@]} = 0 ]]; then\n        echo \"Not found\"\n        return\n    fi\n    local pathname\n    local choice\n    if [[ ${#lines[@]} > 1 ]]; then\n        while [[ -z \"$pathname\" ]]; do\n            local index=1\n            local line\n            for line in ${lines[@]}; do\n                printf \"%6s %s\\n\" \"[$index]\" $line\n                index=$(($index + 1))\n            done\n            echo\n            echo -n \"Select one: \"\n            unset choice\n            read choice\n            if [[ $choice -gt ${#lines[@]} || $choice -lt 1 ]]; then\n                echo \"Invalid choice\"\n                continue\n            fi\n            pathname=${lines[$(($choice-1))]}\n        done\n    else\n        pathname=${lines[0]}\n    fi\n    \\cd $T/$pathname\n}\n\n```\n\n\n## 具体参数查看runtest -h\n```bash\n# simple shortcut to the runtest command\nfunction runtest()\n{\n    T=$(gettop)\n    if [ ! \"$T\" ]; then\n        echo \"Couldn't locate the top of the tree.  Try setting TOP.\" >&2\n        return\n    fi\n    (\"$T\"/development/testrunner/runtest.py $@)\n}\n```\n\n## smoketest\n```bash\nfunction smoketest()\n{\n    if [ ! \"$ANDROID_PRODUCT_OUT\" ]; then\n        echo \"Couldn't locate output files.  Try running 'lunch' first.\" >&2\n        return\n    fi\n    T=$(gettop)\n    if [ ! \"$T\" ]; then\n        echo \"Couldn't locate the top of the tree.  Try setting TOP.\" >&2\n        return\n    fi\n\n    (\\cd \"$T\" && mmm tests/SmokeTest) &&\n      adb uninstall com.android.smoketest > /dev/null &&\n      adb uninstall com.android.smoketest.tests > /dev/null &&\n      adb install $ANDROID_PRODUCT_OUT/data/app/SmokeTestApp.apk &&\n      adb install $ANDROID_PRODUCT_OUT/data/app/SmokeTest.apk &&\n      adb shell am instrument -w com.android.smoketest.tests/android.test.InstrumentationTestRunner\n}\n\n```\n\n## 常用的安卓物理键模拟及viewserver\n```bash\n# 开启viewServer\nfunction startviewserver()\n{\n    local port=4939\n    if [ $# -gt 0 ]; then\n            port=$1\n    fi\n    adb shell service call window 1 i32 $port\n}\n# 停止viewServer\nfunction stopviewserver()\n{\n    adb shell service call window 2\n}\n# 查看viewServer状态\nfunction isviewserverstarted()\n{\n    adb shell service call window 3\n}\n# 相当于按下设备home键、back键、menu键\nfunction key_home()\nfunction key_back()\nfunction key_menu()\n```\n\n##获取手机中的bug日志\n```bash\nfunction getbugreports()\n{\n    local reports=(`adb shell ls /sdcard/bugreports | tr -d '\\r'`)\n\n    if [ ! \"$reports\" ]; then\n        echo \"Could not locate any bugreports.\"\n        return\n    fi\n\n    local report\n    for report in ${reports[@]}\n    do\n        echo \"/sdcard/bugreports/${report}\"\n        adb pull /sdcard/bugreports/${report} ${report}\n        gunzip ${report}\n    done\n}\n```\n\n\n## 得到sdcard的路径，屏幕截图路径和最后一张截图\n```bash\nfunction getsdcardpath()\nfunction getscreenshotpath()\nfunction getlastscreenshot()\n```\n\n\n## dump某一时刻的trace数据\n```bash\nfunction tracedmdump()\n{\n    T=$(gettop)\n    if [ ! \"$T\" ]; then\n        echo \"Couldn't locate the top of the tree.  Try setting TOP.\"\n        return\n    fi\n    local prebuiltdir=$(getprebuilt)\n    local arch=$(gettargetarch)\n    local KERNEL=$T/prebuilts/qemu-kernel/$arch/vmlinux-qemu\n\n    local TRACE=$1\n    if [ ! \"$TRACE\" ] ; then\n        echo \"usage:  tracedmdump  tracename\"\n        return\n    fi\n\n    if [ ! -r \"$KERNEL\" ] ; then\n        echo \"Error: cannot find kernel: '$KERNEL'\"\n        return\n    fi\n\n    local BASETRACE=$(basename $TRACE)\n    if [ \"$BASETRACE\" = \"$TRACE\" ] ; then\n        TRACE=$ANDROID_PRODUCT_OUT/traces/$TRACE\n    fi\n\n    echo \"post-processing traces...\"\n    rm -f $TRACE/qtrace.dexlist\n    post_trace $TRACE\n    if [ $? -ne 0 ]; then\n        echo \"***\"\n        echo \"*** Error: malformed trace.  Did you remember to exit the emulator?\"\n        echo \"***\"\n        return\n    fi\n    echo \"generating dexlist output...\"\n    /bin/ls $ANDROID_PRODUCT_OUT/system/framework/*.jar $ANDROID_PRODUCT_OUT/system/app/*.apk $ANDROID_PRODUCT_OUT/data/app/*.apk 2>/dev/null | xargs dexlist > $TRACE/qtrace.dexlist\n    echo \"generating dmtrace data...\"\n    q2dm -r $ANDROID_PRODUCT_OUT/symbols $TRACE $KERNEL $TRACE/dmtrace || return\n    echo \"generating html file...\"\n    dmtracedump -h $TRACE/dmtrace >| $TRACE/dmtrace.html || return\n    echo \"done, see $TRACE/dmtrace.html for details\"\n    echo \"or run:\"\n    echo \"    traceview $TRACE/dmtrace\"\n}\n```\n\n\n## 查询.gradle、.java 等文件中某个字符串在文件中的位置\n```bash\nfunction ggrep()\n{\n    find . -name .repo -prune -o -name .git -prune -o -name out -prune -o -type f -name \"*\\.gradle\" -print0 | xargs -0 grep --color -n \"$@\"\n}\nfunction jgrep()\n{\n    find . -name .repo -prune -o -name .git -prune -o -name out -prune -o -type f -name \"*\\.java\" -print0 | xargs -0 grep --color -n \"$@\"\n}\nfunction cgrep()\n{\n    find . -name .repo -prune -o -name .git -prune -o -name out -prune -o -type f \\( -name '*.c' -o -name '*.cc' -o -name '*.cpp' -o -name '*.h' \\) -print0 | xargs -0 grep --color -n \"$@\"\n}\nfunction resgrep()\n{\n    for dir in `find . -name .repo -prune -o -name .git -prune -o -name out -prune -o -name res -type d`; do find $dir -type f -name '*\\.xml' -print0 | xargs -0 grep --color -n \"$@\"; done;\n}\nfunction mangrep()\n{\n    find . -name .repo -prune -o -name .git -prune -o -path ./out -prune -o -type f -name 'AndroidManifest.xml' -print0 | xargs -0 grep --color -n \"$@\"\n}\nfunction sepgrep()\n{\n    find . -name .repo -prune -o -name .git -prune -o -path ./out -prune -o -name sepolicy -type d -print0 | xargs -0 grep --color -n -r --exclude-dir=\\.git \"$@\"\n}\n```\n\n\n## 其他\n```bash\n# 得到顶级目录路径\nfunction gettop\n# 找到make文件\nfunction findmakefile()\n# 当前目录下编译执行，相当于在android目录下执行make\nfunction m()\n# 执行当前目录下最近的make文件\nfunction mm()\n# 在android目录下，执行某个文件夹下的make文件\nfunction mmm()\n# Builds all of the modules in the current directory, and their dependencies.\nfunction mma()\n# Builds all of the modules in the supplied directories, and their dependencies.\nfunction mmma()\n```\n","source":"_posts/envsetup_common_command.md","raw":"---\nlayout:     post\ntitle: envsetup-sh的常用命令\nsubtitle:   \" Android开源项目编译中sh的常用命令\"\ndate: 2016-03-10 09:22:04\nauthor:     \"JianGuo Yang\"\nheader-img: \"post-bg-2015.jpg\"\ntags: android open source\n---\n\n# envsetup-sh的常用命令\n\n** 摘要：** 这篇文档主要对android下的编译脚本文件 envsetup.sh 进行了简单的分析，并且从中总结了一些在开发过程中常用的命令，以便于开发者们提高开发效率。\n\n## 常用命令索引\n` croot `  - -到达android根目录；\n` cproj + 模块名 `  - -到达项目的根目录下；\n` gettop `  - -得到顶级目录路径；\n` findmakefile ` - -找到make文件。\n\n` m ` - -当前目录下编译执行，相当于在android目录下执行make\n` mm ` - -执行当前目录下最近的make文件\n` mmm `  - -在android目录下，执行某个文件夹下的make文件\n` mma ` - -编译当前目录下所有的模块和他们的依赖\n` mmma ` - -编译提供的目录下的所有模块和他们的依赖\n` make sdk ` - -编译SDK及其包含的一些工具 (adb, fastboot, 等等)。\n` make snod `  - -从当前编译出的二进制数据编译system.img文件 ，这条命令将重新生成镜像，消耗的时间很少，如果你修改了一些数据文件（如音乐、视频）等文件时比较有用。\n` make cts `  - -这条命令将编译CTS套机，编译出的结果放在out目录对应版的data/app目录下面。CTS测试时有用。\n` make services ` - -\n` make runtime ` - -\n` make droid ` - -make droid is the normal build.\n` make all ` - -make everything, whether it is included in the product definition or not\n` make clean ` - -remove all built files (prepare for a new build). Same as rm -rf out _make modules - shows a list of submodules that can be built (List of all LOCAL_MODULE definitions)\n` make installclean `  - -同上\n` make *` - -make a specific module (note that this is not the same as directory name. It is the LOCAL_MODULE definition in the Android.mk file)\n` make clean *`  - -clean a specific module\n` make bootimage ` - -编译创建一个新的 boot image\n` make bootimage `  - -TARGET_PREBUILT_KERNEL=/path/to/bzImage - create a new boot image with custom bzImage\n` make systemimage ` - -编译创建一个新的 system image\n\n## make命令\n\n不用多解释，编译整个项目，可以加模块名参数等。\n\n``` bash\nfunction make()\n{\n    local start_time=$(date +\"%s\")\n    $(get_make_command) \"$@\"\n    local ret=$?\n    local end_time=$(date +\"%s\")\n    local tdiff=$(($end_time-$start_time))\n    local hours=$(($tdiff / 3600 ))\n    local mins=$((($tdiff % 3600) / 60))\n    local secs=$(($tdiff % 60))\n    echo\n    if [ $ret -eq 0 ] ; then\n        echo -n -e \"#### make completed successfully \"\n    else\n        echo -n -e \"#### make failed to build some targets \"\n    fi\n    if [ $hours -gt 0 ] ; then\n        printf \"(%02g:%02g:%02g (hh:mm:ss))\" $hours $mins $secs\n    elif [ $mins -gt 0 ] ; then\n        printf \"(%02g:%02g (mm:ss))\" $mins $secs\n    elif [ $secs -gt 0 ] ; then\n        printf \"(%s seconds)\" $secs\n    fi\n    echo -e \" ####\"\n    echo\n    return $ret\n}\n\n```\n\n> **提示：**具体功能还需要分析。\n\n## 设置编译环境的java home\n```bash\n# Force JAVA_HOME to point to java 1.7 or java 1.6  if it isn't already set.\n#\n# Note that the MacOS path for java 1.7 includes a minor revision number (sigh).\n# For some reason, installing the JDK doesn't make it show up in the\n# JavaVM.framework/Versions/1.7/ folder.\nfunction set_java_home() {\n    # Clear the existing JAVA_HOME value if we set it ourselves, so that\n    # we can reset it later, depending on the version of java the build\n    # system needs.\n    #\n    # If we don't do this, the JAVA_HOME value set by the first call to\n    # build/envsetup.sh will persist forever.\n    if [ -n \"$ANDROID_SET_JAVA_HOME\" ]; then\n      export JAVA_HOME=\"\"\n    fi\n\n    if [ ! \"$JAVA_HOME\" ]; then\n      if [ -n \"$LEGACY_USE_JAVA6\" ]; then\n        case `uname -s` in\n            Darwin)\n                export JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home\n                ;;\n            *)\n                export JAVA_HOME=/usr/lib/jvm/java-6-sun\n                ;;\n        esac\n      else\n        case `uname -s` in\n            Darwin)\n                export JAVA_HOME=$(/usr/libexec/java_home -v 1.7)\n                ;;\n            *)\n                export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64\n                ;;\n        esac\n      fi\n\n      # Keep track of the fact that we set JAVA_HOME ourselves, so that\n      # we can change it on the next envsetup.sh, if required.\n      export ANDROID_SET_JAVA_HOME=true\n    fi\n}\n\n```\n\n## 到某个文件所在的目录下\n```bash\nfunction godir () {\n    if [[ -z \"$1\" ]]; then\n        echo \"Usage: godir <regex>\"\n        return\n    fi\n    T=$(gettop)\n    if [[ ! -f $T/filelist ]]; then\n        echo -n \"Creating index...\"\n        (\\cd $T; find . -wholename ./out -prune -o -wholename ./.repo -prune -o -type f > filelist)\n        echo \" Done\"\n        echo \"\"\n    fi\n    local lines\n    lines=($(\\grep \"$1\" $T/filelist | sed -e 's/\\/[^/]*$//' | sort | uniq))\n    if [[ ${#lines[@]} = 0 ]]; then\n        echo \"Not found\"\n        return\n    fi\n    local pathname\n    local choice\n    if [[ ${#lines[@]} > 1 ]]; then\n        while [[ -z \"$pathname\" ]]; do\n            local index=1\n            local line\n            for line in ${lines[@]}; do\n                printf \"%6s %s\\n\" \"[$index]\" $line\n                index=$(($index + 1))\n            done\n            echo\n            echo -n \"Select one: \"\n            unset choice\n            read choice\n            if [[ $choice -gt ${#lines[@]} || $choice -lt 1 ]]; then\n                echo \"Invalid choice\"\n                continue\n            fi\n            pathname=${lines[$(($choice-1))]}\n        done\n    else\n        pathname=${lines[0]}\n    fi\n    \\cd $T/$pathname\n}\n\n```\n\n\n## 具体参数查看runtest -h\n```bash\n# simple shortcut to the runtest command\nfunction runtest()\n{\n    T=$(gettop)\n    if [ ! \"$T\" ]; then\n        echo \"Couldn't locate the top of the tree.  Try setting TOP.\" >&2\n        return\n    fi\n    (\"$T\"/development/testrunner/runtest.py $@)\n}\n```\n\n## smoketest\n```bash\nfunction smoketest()\n{\n    if [ ! \"$ANDROID_PRODUCT_OUT\" ]; then\n        echo \"Couldn't locate output files.  Try running 'lunch' first.\" >&2\n        return\n    fi\n    T=$(gettop)\n    if [ ! \"$T\" ]; then\n        echo \"Couldn't locate the top of the tree.  Try setting TOP.\" >&2\n        return\n    fi\n\n    (\\cd \"$T\" && mmm tests/SmokeTest) &&\n      adb uninstall com.android.smoketest > /dev/null &&\n      adb uninstall com.android.smoketest.tests > /dev/null &&\n      adb install $ANDROID_PRODUCT_OUT/data/app/SmokeTestApp.apk &&\n      adb install $ANDROID_PRODUCT_OUT/data/app/SmokeTest.apk &&\n      adb shell am instrument -w com.android.smoketest.tests/android.test.InstrumentationTestRunner\n}\n\n```\n\n## 常用的安卓物理键模拟及viewserver\n```bash\n# 开启viewServer\nfunction startviewserver()\n{\n    local port=4939\n    if [ $# -gt 0 ]; then\n            port=$1\n    fi\n    adb shell service call window 1 i32 $port\n}\n# 停止viewServer\nfunction stopviewserver()\n{\n    adb shell service call window 2\n}\n# 查看viewServer状态\nfunction isviewserverstarted()\n{\n    adb shell service call window 3\n}\n# 相当于按下设备home键、back键、menu键\nfunction key_home()\nfunction key_back()\nfunction key_menu()\n```\n\n##获取手机中的bug日志\n```bash\nfunction getbugreports()\n{\n    local reports=(`adb shell ls /sdcard/bugreports | tr -d '\\r'`)\n\n    if [ ! \"$reports\" ]; then\n        echo \"Could not locate any bugreports.\"\n        return\n    fi\n\n    local report\n    for report in ${reports[@]}\n    do\n        echo \"/sdcard/bugreports/${report}\"\n        adb pull /sdcard/bugreports/${report} ${report}\n        gunzip ${report}\n    done\n}\n```\n\n\n## 得到sdcard的路径，屏幕截图路径和最后一张截图\n```bash\nfunction getsdcardpath()\nfunction getscreenshotpath()\nfunction getlastscreenshot()\n```\n\n\n## dump某一时刻的trace数据\n```bash\nfunction tracedmdump()\n{\n    T=$(gettop)\n    if [ ! \"$T\" ]; then\n        echo \"Couldn't locate the top of the tree.  Try setting TOP.\"\n        return\n    fi\n    local prebuiltdir=$(getprebuilt)\n    local arch=$(gettargetarch)\n    local KERNEL=$T/prebuilts/qemu-kernel/$arch/vmlinux-qemu\n\n    local TRACE=$1\n    if [ ! \"$TRACE\" ] ; then\n        echo \"usage:  tracedmdump  tracename\"\n        return\n    fi\n\n    if [ ! -r \"$KERNEL\" ] ; then\n        echo \"Error: cannot find kernel: '$KERNEL'\"\n        return\n    fi\n\n    local BASETRACE=$(basename $TRACE)\n    if [ \"$BASETRACE\" = \"$TRACE\" ] ; then\n        TRACE=$ANDROID_PRODUCT_OUT/traces/$TRACE\n    fi\n\n    echo \"post-processing traces...\"\n    rm -f $TRACE/qtrace.dexlist\n    post_trace $TRACE\n    if [ $? -ne 0 ]; then\n        echo \"***\"\n        echo \"*** Error: malformed trace.  Did you remember to exit the emulator?\"\n        echo \"***\"\n        return\n    fi\n    echo \"generating dexlist output...\"\n    /bin/ls $ANDROID_PRODUCT_OUT/system/framework/*.jar $ANDROID_PRODUCT_OUT/system/app/*.apk $ANDROID_PRODUCT_OUT/data/app/*.apk 2>/dev/null | xargs dexlist > $TRACE/qtrace.dexlist\n    echo \"generating dmtrace data...\"\n    q2dm -r $ANDROID_PRODUCT_OUT/symbols $TRACE $KERNEL $TRACE/dmtrace || return\n    echo \"generating html file...\"\n    dmtracedump -h $TRACE/dmtrace >| $TRACE/dmtrace.html || return\n    echo \"done, see $TRACE/dmtrace.html for details\"\n    echo \"or run:\"\n    echo \"    traceview $TRACE/dmtrace\"\n}\n```\n\n\n## 查询.gradle、.java 等文件中某个字符串在文件中的位置\n```bash\nfunction ggrep()\n{\n    find . -name .repo -prune -o -name .git -prune -o -name out -prune -o -type f -name \"*\\.gradle\" -print0 | xargs -0 grep --color -n \"$@\"\n}\nfunction jgrep()\n{\n    find . -name .repo -prune -o -name .git -prune -o -name out -prune -o -type f -name \"*\\.java\" -print0 | xargs -0 grep --color -n \"$@\"\n}\nfunction cgrep()\n{\n    find . -name .repo -prune -o -name .git -prune -o -name out -prune -o -type f \\( -name '*.c' -o -name '*.cc' -o -name '*.cpp' -o -name '*.h' \\) -print0 | xargs -0 grep --color -n \"$@\"\n}\nfunction resgrep()\n{\n    for dir in `find . -name .repo -prune -o -name .git -prune -o -name out -prune -o -name res -type d`; do find $dir -type f -name '*\\.xml' -print0 | xargs -0 grep --color -n \"$@\"; done;\n}\nfunction mangrep()\n{\n    find . -name .repo -prune -o -name .git -prune -o -path ./out -prune -o -type f -name 'AndroidManifest.xml' -print0 | xargs -0 grep --color -n \"$@\"\n}\nfunction sepgrep()\n{\n    find . -name .repo -prune -o -name .git -prune -o -path ./out -prune -o -name sepolicy -type d -print0 | xargs -0 grep --color -n -r --exclude-dir=\\.git \"$@\"\n}\n```\n\n\n## 其他\n```bash\n# 得到顶级目录路径\nfunction gettop\n# 找到make文件\nfunction findmakefile()\n# 当前目录下编译执行，相当于在android目录下执行make\nfunction m()\n# 执行当前目录下最近的make文件\nfunction mm()\n# 在android目录下，执行某个文件夹下的make文件\nfunction mmm()\n# Builds all of the modules in the current directory, and their dependencies.\nfunction mma()\n# Builds all of the modules in the supplied directories, and their dependencies.\nfunction mmma()\n```\n","slug":"envsetup_common_command","published":1,"updated":"2016-06-18T02:21:35.280Z","comments":1,"photos":[],"link":"","_id":"cipkjorwq00069x2nx9ienwtj","content":"<h1 id=\"envsetup-sh的常用命令\"><a href=\"#envsetup-sh的常用命令\" class=\"headerlink\" title=\"envsetup-sh的常用命令\"></a>envsetup-sh的常用命令</h1><p><strong> 摘要：</strong> 这篇文档主要对android下的编译脚本文件 envsetup.sh 进行了简单的分析，并且从中总结了一些在开发过程中常用的命令，以便于开发者们提高开发效率。</p>\n<h2 id=\"常用命令索引\"><a href=\"#常用命令索引\" class=\"headerlink\" title=\"常用命令索引\"></a>常用命令索引</h2><p><code>croot</code>  - -到达android根目录；<br><code>cproj + 模块名</code>  - -到达项目的根目录下；<br><code>gettop</code>  - -得到顶级目录路径；<br><code>findmakefile</code> - -找到make文件。</p>\n<p><code>m</code> - -当前目录下编译执行，相当于在android目录下执行make<br><code>mm</code> - -执行当前目录下最近的make文件<br><code>mmm</code>  - -在android目录下，执行某个文件夹下的make文件<br><code>mma</code> - -编译当前目录下所有的模块和他们的依赖<br><code>mmma</code> - -编译提供的目录下的所有模块和他们的依赖<br><code>make sdk</code> - -编译SDK及其包含的一些工具 (adb, fastboot, 等等)。<br><code>make snod</code>  - -从当前编译出的二进制数据编译system.img文件 ，这条命令将重新生成镜像，消耗的时间很少，如果你修改了一些数据文件（如音乐、视频）等文件时比较有用。<br><code>make cts</code>  - -这条命令将编译CTS套机，编译出的结果放在out目录对应版的data/app目录下面。CTS测试时有用。<br><code>make services</code> - -<br><code>make runtime</code> - -<br><code>make droid</code> - -make droid is the normal build.<br><code>make all</code> - -make everything, whether it is included in the product definition or not<br><code>make clean</code> - -remove all built files (prepare for a new build). Same as rm -rf out _make modules - shows a list of submodules that can be built (List of all LOCAL_MODULE definitions)<br><code>make installclean</code>  - -同上<br><code>make *</code> - -make a specific module (note that this is not the same as directory name. It is the LOCAL_MODULE definition in the Android.mk file)<br><code>make clean *</code>  - -clean a specific module<br><code>make bootimage</code> - -编译创建一个新的 boot image<br><code>make bootimage</code>  - -TARGET_PREBUILT_KERNEL=/path/to/bzImage - create a new boot image with custom bzImage<br><code>make systemimage</code> - -编译创建一个新的 system image</p>\n<h2 id=\"make命令\"><a href=\"#make命令\" class=\"headerlink\" title=\"make命令\"></a>make命令</h2><p>不用多解释，编译整个项目，可以加模块名参数等。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">make</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> start_time=$(date +<span class=\"string\">\"%s\"</span>)</span><br><span class=\"line\">    $(get_make_<span class=\"built_in\">command</span>) <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\">    <span class=\"built_in\">local</span> ret=$?</span><br><span class=\"line\">    <span class=\"built_in\">local</span> end_time=$(date +<span class=\"string\">\"%s\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">local</span> tdiff=$((<span class=\"variable\">$end_time</span>-<span class=\"variable\">$start_time</span>))</span><br><span class=\"line\">    <span class=\"built_in\">local</span> hours=$((<span class=\"variable\">$tdiff</span> / 3600 ))</span><br><span class=\"line\">    <span class=\"built_in\">local</span> mins=$(((<span class=\"variable\">$tdiff</span> % 3600) / 60))</span><br><span class=\"line\">    <span class=\"built_in\">local</span> secs=$((<span class=\"variable\">$tdiff</span> % 60))</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$ret</span> <span class=\"_\">-eq</span> 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> -n <span class=\"_\">-e</span> <span class=\"string\">\"#### make completed successfully \"</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> -n <span class=\"_\">-e</span> <span class=\"string\">\"#### make failed to build some targets \"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$hours</span> <span class=\"_\">-gt</span> 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span> <span class=\"string\">\"(%02g:%02g:%02g (hh:mm:ss))\"</span> <span class=\"variable\">$hours</span> <span class=\"variable\">$mins</span> <span class=\"variable\">$secs</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> [ <span class=\"variable\">$mins</span> <span class=\"_\">-gt</span> 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span> <span class=\"string\">\"(%02g:%02g (mm:ss))\"</span> <span class=\"variable\">$mins</span> <span class=\"variable\">$secs</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> [ <span class=\"variable\">$secs</span> <span class=\"_\">-gt</span> 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span> <span class=\"string\">\"(%s seconds)\"</span> <span class=\"variable\">$secs</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"_\">-e</span> <span class=\"string\">\" ####\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$ret</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>提示：</strong>具体功能还需要分析。</p>\n</blockquote>\n<h2 id=\"设置编译环境的java-home\"><a href=\"#设置编译环境的java-home\" class=\"headerlink\" title=\"设置编译环境的java home\"></a>设置编译环境的java home</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Force JAVA_HOME to point to java 1.7 or java 1.6  if it isn't already set.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Note that the MacOS path for java 1.7 includes a minor revision number (sigh).</span></span><br><span class=\"line\"><span class=\"comment\"># For some reason, installing the JDK doesn't make it show up in the</span></span><br><span class=\"line\"><span class=\"comment\"># JavaVM.framework/Versions/1.7/ folder.</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">set_java_home</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\"># Clear the existing JAVA_HOME value if we set it ourselves, so that</span></span><br><span class=\"line\">    <span class=\"comment\"># we can reset it later, depending on the version of java the build</span></span><br><span class=\"line\">    <span class=\"comment\"># system needs.</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\"># If we don't do this, the JAVA_HOME value set by the first call to</span></span><br><span class=\"line\">    <span class=\"comment\"># build/envsetup.sh will persist forever.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -n <span class=\"string\">\"<span class=\"variable\">$ANDROID_SET_JAVA_HOME</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"built_in\">export</span> JAVA_HOME=<span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! <span class=\"string\">\"<span class=\"variable\">$JAVA_HOME</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> [ -n <span class=\"string\">\"<span class=\"variable\">$LEGACY_USE_JAVA6</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> `uname <span class=\"_\">-s</span>` <span class=\"keyword\">in</span></span><br><span class=\"line\">            Darwin)</span><br><span class=\"line\">                <span class=\"built_in\">export</span> JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home</span><br><span class=\"line\">                ;;</span><br><span class=\"line\">            *)</span><br><span class=\"line\">                <span class=\"built_in\">export</span> JAVA_HOME=/usr/lib/jvm/java-6-sun</span><br><span class=\"line\">                ;;</span><br><span class=\"line\">        <span class=\"keyword\">esac</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> `uname <span class=\"_\">-s</span>` <span class=\"keyword\">in</span></span><br><span class=\"line\">            Darwin)</span><br><span class=\"line\">                <span class=\"built_in\">export</span> JAVA_HOME=$(/usr/libexec/java_home -v 1.7)</span><br><span class=\"line\">                ;;</span><br><span class=\"line\">            *)</span><br><span class=\"line\">                <span class=\"built_in\">export</span> JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64</span><br><span class=\"line\">                ;;</span><br><span class=\"line\">        <span class=\"keyword\">esac</span></span><br><span class=\"line\">      <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># Keep track of the fact that we set JAVA_HOME ourselves, so that</span></span><br><span class=\"line\">      <span class=\"comment\"># we can change it on the next envsetup.sh, if required.</span></span><br><span class=\"line\">      <span class=\"built_in\">export</span> ANDROID_SET_JAVA_HOME=<span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"到某个文件所在的目录下\"><a href=\"#到某个文件所在的目录下\" class=\"headerlink\" title=\"到某个文件所在的目录下\"></a>到某个文件所在的目录下</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">godir</span></span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ -z <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Usage: godir &lt;regex&gt;\"</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    T=$(gettop)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ ! <span class=\"_\">-f</span> <span class=\"variable\">$T</span>/filelist ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> -n <span class=\"string\">\"Creating index...\"</span></span><br><span class=\"line\">        (\\<span class=\"built_in\">cd</span> <span class=\"variable\">$T</span>; find . -wholename ./out -prune -o -wholename ./.repo -prune -o -type f &gt; filelist)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\" Done\"</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">local</span> lines</span><br><span class=\"line\">    lines=($(\\grep <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"variable\">$T</span>/filelist | sed <span class=\"_\">-e</span> <span class=\"string\">'s/\\/[^/]*$//'</span> | sort | uniq))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;#lines[@]&#125;</span> = 0 ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Not found\"</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">local</span> pathname</span><br><span class=\"line\">    <span class=\"built_in\">local</span> choice</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;#lines[@]&#125;</span> &gt; 1 ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> [[ -z <span class=\"string\">\"<span class=\"variable\">$pathname</span>\"</span> ]]; <span class=\"keyword\">do</span></span><br><span class=\"line\">            <span class=\"built_in\">local</span> index=1</span><br><span class=\"line\">            <span class=\"built_in\">local</span> line</span><br><span class=\"line\">            <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;lines[@]&#125;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">                <span class=\"built_in\">printf</span> <span class=\"string\">\"%6s %s\\n\"</span> <span class=\"string\">\"[<span class=\"variable\">$index</span>]\"</span> <span class=\"variable\">$line</span></span><br><span class=\"line\">                index=$((<span class=\"variable\">$index</span> + 1))</span><br><span class=\"line\">            <span class=\"keyword\">done</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span> -n <span class=\"string\">\"Select one: \"</span></span><br><span class=\"line\">            <span class=\"built_in\">unset</span> choice</span><br><span class=\"line\">            <span class=\"built_in\">read</span> choice</span><br><span class=\"line\">            <span class=\"keyword\">if</span> [[ <span class=\"variable\">$choice</span> <span class=\"_\">-gt</span> <span class=\"variable\">$&#123;#lines[@]&#125;</span> || <span class=\"variable\">$choice</span> <span class=\"_\">-lt</span> 1 ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"string\">\"Invalid choice\"</span></span><br><span class=\"line\">                <span class=\"built_in\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">fi</span></span><br><span class=\"line\">            pathname=<span class=\"variable\">$&#123;lines[$(($choice-1))]&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">done</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        pathname=<span class=\"variable\">$&#123;lines[0]&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    \\<span class=\"built_in\">cd</span> <span class=\"variable\">$T</span>/<span class=\"variable\">$pathname</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"具体参数查看runtest-h\"><a href=\"#具体参数查看runtest-h\" class=\"headerlink\" title=\"具体参数查看runtest -h\"></a>具体参数查看runtest -h</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># simple shortcut to the runtest command</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">runtest</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    T=$(gettop)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! <span class=\"string\">\"<span class=\"variable\">$T</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Couldn't locate the top of the tree.  Try setting TOP.\"</span> &gt;&amp;2</span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    (<span class=\"string\">\"<span class=\"variable\">$T</span>\"</span>/development/testrunner/runtest.py <span class=\"variable\">$@</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"smoketest\"><a href=\"#smoketest\" class=\"headerlink\" title=\"smoketest\"></a>smoketest</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">smoketest</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! <span class=\"string\">\"<span class=\"variable\">$ANDROID_PRODUCT_OUT</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Couldn't locate output files.  Try running 'lunch' first.\"</span> &gt;&amp;2</span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    T=$(gettop)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! <span class=\"string\">\"<span class=\"variable\">$T</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Couldn't locate the top of the tree.  Try setting TOP.\"</span> &gt;&amp;2</span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    (\\<span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$T</span>\"</span> &amp;&amp; mmm tests/SmokeTest) &amp;&amp;</span><br><span class=\"line\">      adb uninstall com.android.smoketest &gt; /dev/null &amp;&amp;</span><br><span class=\"line\">      adb uninstall com.android.smoketest.tests &gt; /dev/null &amp;&amp;</span><br><span class=\"line\">      adb install <span class=\"variable\">$ANDROID_PRODUCT_OUT</span>/data/app/SmokeTestApp.apk &amp;&amp;</span><br><span class=\"line\">      adb install <span class=\"variable\">$ANDROID_PRODUCT_OUT</span>/data/app/SmokeTest.apk &amp;&amp;</span><br><span class=\"line\">      adb shell am instrument -w com.android.smoketest.tests/android.test.InstrumentationTestRunner</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用的安卓物理键模拟及viewserver\"><a href=\"#常用的安卓物理键模拟及viewserver\" class=\"headerlink\" title=\"常用的安卓物理键模拟及viewserver\"></a>常用的安卓物理键模拟及viewserver</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启viewServer</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">startviewserver</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> port=4939</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> <span class=\"_\">-gt</span> 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">            port=<span class=\"variable\">$1</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    adb shell service call window 1 i32 <span class=\"variable\">$port</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 停止viewServer</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">stopviewserver</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    adb shell service call window 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 查看viewServer状态</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">isviewserverstarted</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    adb shell service call window 3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 相当于按下设备home键、back键、menu键</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> key_home()</span><br><span class=\"line\"><span class=\"keyword\">function</span> key_back()</span><br><span class=\"line\"><span class=\"keyword\">function</span> key_menu()</span><br></pre></td></tr></table></figure>\n<p>##获取手机中的bug日志<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">getbugreports</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> reports=(`adb shell ls /sdcard/bugreports | tr <span class=\"_\">-d</span> <span class=\"string\">'\\r'</span>`)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! <span class=\"string\">\"<span class=\"variable\">$reports</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Could not locate any bugreports.\"</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">local</span> report</span><br><span class=\"line\">    <span class=\"keyword\">for</span> report <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;reports[@]&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"/sdcard/bugreports/<span class=\"variable\">$&#123;report&#125;</span>\"</span></span><br><span class=\"line\">        adb pull /sdcard/bugreports/<span class=\"variable\">$&#123;report&#125;</span> <span class=\"variable\">$&#123;report&#125;</span></span><br><span class=\"line\">        gunzip <span class=\"variable\">$&#123;report&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"得到sdcard的路径，屏幕截图路径和最后一张截图\"><a href=\"#得到sdcard的路径，屏幕截图路径和最后一张截图\" class=\"headerlink\" title=\"得到sdcard的路径，屏幕截图路径和最后一张截图\"></a>得到sdcard的路径，屏幕截图路径和最后一张截图</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> getsdcardpath()</span><br><span class=\"line\"><span class=\"keyword\">function</span> getscreenshotpath()</span><br><span class=\"line\"><span class=\"keyword\">function</span> getlastscreenshot()</span><br></pre></td></tr></table></figure>\n<h2 id=\"dump某一时刻的trace数据\"><a href=\"#dump某一时刻的trace数据\" class=\"headerlink\" title=\"dump某一时刻的trace数据\"></a>dump某一时刻的trace数据</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">tracedmdump</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    T=$(gettop)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! <span class=\"string\">\"<span class=\"variable\">$T</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Couldn't locate the top of the tree.  Try setting TOP.\"</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">local</span> prebuiltdir=$(getprebuilt)</span><br><span class=\"line\">    <span class=\"built_in\">local</span> arch=$(gettargetarch)</span><br><span class=\"line\">    <span class=\"built_in\">local</span> KERNEL=<span class=\"variable\">$T</span>/prebuilts/qemu-kernel/<span class=\"variable\">$arch</span>/vmlinux-qemu</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">local</span> TRACE=<span class=\"variable\">$1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! <span class=\"string\">\"<span class=\"variable\">$TRACE</span>\"</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"usage:  tracedmdump  tracename\"</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! -r <span class=\"string\">\"<span class=\"variable\">$KERNEL</span>\"</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Error: cannot find kernel: '<span class=\"variable\">$KERNEL</span>'\"</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">local</span> BASETRACE=$(basename <span class=\"variable\">$TRACE</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$BASETRACE</span>\"</span> = <span class=\"string\">\"<span class=\"variable\">$TRACE</span>\"</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        TRACE=<span class=\"variable\">$ANDROID_PRODUCT_OUT</span>/traces/<span class=\"variable\">$TRACE</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"post-processing traces...\"</span></span><br><span class=\"line\">    rm <span class=\"_\">-f</span> <span class=\"variable\">$TRACE</span>/qtrace.dexlist</span><br><span class=\"line\">    post_trace <span class=\"variable\">$TRACE</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $? <span class=\"_\">-ne</span> 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"***\"</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"*** Error: malformed trace.  Did you remember to exit the emulator?\"</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"***\"</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"generating dexlist output...\"</span></span><br><span class=\"line\">    /bin/ls <span class=\"variable\">$ANDROID_PRODUCT_OUT</span>/system/framework/*.jar <span class=\"variable\">$ANDROID_PRODUCT_OUT</span>/system/app/*.apk <span class=\"variable\">$ANDROID_PRODUCT_OUT</span>/data/app/*.apk 2&gt;/dev/null | xargs dexlist &gt; <span class=\"variable\">$TRACE</span>/qtrace.dexlist</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"generating dmtrace data...\"</span></span><br><span class=\"line\">    q2dm -r <span class=\"variable\">$ANDROID_PRODUCT_OUT</span>/symbols <span class=\"variable\">$TRACE</span> <span class=\"variable\">$KERNEL</span> <span class=\"variable\">$TRACE</span>/dmtrace || <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"generating html file...\"</span></span><br><span class=\"line\">    dmtracedump -h <span class=\"variable\">$TRACE</span>/dmtrace &gt;| <span class=\"variable\">$TRACE</span>/dmtrace.html || <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"done, see <span class=\"variable\">$TRACE</span>/dmtrace.html for details\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"or run:\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"    traceview <span class=\"variable\">$TRACE</span>/dmtrace\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询-gradle、-java-等文件中某个字符串在文件中的位置\"><a href=\"#查询-gradle、-java-等文件中某个字符串在文件中的位置\" class=\"headerlink\" title=\"查询.gradle、.java 等文件中某个字符串在文件中的位置\"></a>查询.gradle、.java 等文件中某个字符串在文件中的位置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">ggrep</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    find . -name .repo -prune -o -name .git -prune -o -name out -prune -o -type f -name <span class=\"string\">\"*\\.gradle\"</span> -print0 | xargs -0 grep --color -n <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">jgrep</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    find . -name .repo -prune -o -name .git -prune -o -name out -prune -o -type f -name <span class=\"string\">\"*\\.java\"</span> -print0 | xargs -0 grep --color -n <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">cgrep</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    find . -name .repo -prune -o -name .git -prune -o -name out -prune -o -type f \\( -name <span class=\"string\">'*.c'</span> -o -name <span class=\"string\">'*.cc'</span> -o -name <span class=\"string\">'*.cpp'</span> -o -name <span class=\"string\">'*.h'</span> \\) -print0 | xargs -0 grep --color -n <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">resgrep</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> dir <span class=\"keyword\">in</span> `find . -name .repo -prune -o -name .git -prune -o -name out -prune -o -name res -type d`; <span class=\"keyword\">do</span> find <span class=\"variable\">$dir</span> -type f -name <span class=\"string\">'*\\.xml'</span> -print0 | xargs -0 grep --color -n <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>; <span class=\"keyword\">done</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">mangrep</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    find . -name .repo -prune -o -name .git -prune -o -path ./out -prune -o -type f -name <span class=\"string\">'AndroidManifest.xml'</span> -print0 | xargs -0 grep --color -n <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">sepgrep</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    find . -name .repo -prune -o -name .git -prune -o -path ./out -prune -o -name sepolicy -type d -print0 | xargs -0 grep --color -n -r --exclude-dir=\\.git <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 得到顶级目录路径</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> gettop</span><br><span class=\"line\"><span class=\"comment\"># 找到make文件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> findmakefile()</span><br><span class=\"line\"><span class=\"comment\"># 当前目录下编译执行，相当于在android目录下执行make</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> m()</span><br><span class=\"line\"><span class=\"comment\"># 执行当前目录下最近的make文件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> mm()</span><br><span class=\"line\"><span class=\"comment\"># 在android目录下，执行某个文件夹下的make文件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> mmm()</span><br><span class=\"line\"><span class=\"comment\"># Builds all of the modules in the current directory, and their dependencies.</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> mma()</span><br><span class=\"line\"><span class=\"comment\"># Builds all of the modules in the supplied directories, and their dependencies.</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> mmma()</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"envsetup-sh的常用命令\"><a href=\"#envsetup-sh的常用命令\" class=\"headerlink\" title=\"envsetup-sh的常用命令\"></a>envsetup-sh的常用命令</h1><p><strong> 摘要：</strong> 这篇文档主要对android下的编译脚本文件 envsetup.sh 进行了简单的分析，并且从中总结了一些在开发过程中常用的命令，以便于开发者们提高开发效率。</p>\n<h2 id=\"常用命令索引\"><a href=\"#常用命令索引\" class=\"headerlink\" title=\"常用命令索引\"></a>常用命令索引</h2><p><code>croot</code>  - -到达android根目录；<br><code>cproj + 模块名</code>  - -到达项目的根目录下；<br><code>gettop</code>  - -得到顶级目录路径；<br><code>findmakefile</code> - -找到make文件。</p>\n<p><code>m</code> - -当前目录下编译执行，相当于在android目录下执行make<br><code>mm</code> - -执行当前目录下最近的make文件<br><code>mmm</code>  - -在android目录下，执行某个文件夹下的make文件<br><code>mma</code> - -编译当前目录下所有的模块和他们的依赖<br><code>mmma</code> - -编译提供的目录下的所有模块和他们的依赖<br><code>make sdk</code> - -编译SDK及其包含的一些工具 (adb, fastboot, 等等)。<br><code>make snod</code>  - -从当前编译出的二进制数据编译system.img文件 ，这条命令将重新生成镜像，消耗的时间很少，如果你修改了一些数据文件（如音乐、视频）等文件时比较有用。<br><code>make cts</code>  - -这条命令将编译CTS套机，编译出的结果放在out目录对应版的data/app目录下面。CTS测试时有用。<br><code>make services</code> - -<br><code>make runtime</code> - -<br><code>make droid</code> - -make droid is the normal build.<br><code>make all</code> - -make everything, whether it is included in the product definition or not<br><code>make clean</code> - -remove all built files (prepare for a new build). Same as rm -rf out _make modules - shows a list of submodules that can be built (List of all LOCAL_MODULE definitions)<br><code>make installclean</code>  - -同上<br><code>make *</code> - -make a specific module (note that this is not the same as directory name. It is the LOCAL_MODULE definition in the Android.mk file)<br><code>make clean *</code>  - -clean a specific module<br><code>make bootimage</code> - -编译创建一个新的 boot image<br><code>make bootimage</code>  - -TARGET_PREBUILT_KERNEL=/path/to/bzImage - create a new boot image with custom bzImage<br><code>make systemimage</code> - -编译创建一个新的 system image</p>\n<h2 id=\"make命令\"><a href=\"#make命令\" class=\"headerlink\" title=\"make命令\"></a>make命令</h2><p>不用多解释，编译整个项目，可以加模块名参数等。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">make</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> start_time=$(date +<span class=\"string\">\"%s\"</span>)</span><br><span class=\"line\">    $(get_make_<span class=\"built_in\">command</span>) <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\">    <span class=\"built_in\">local</span> ret=$?</span><br><span class=\"line\">    <span class=\"built_in\">local</span> end_time=$(date +<span class=\"string\">\"%s\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">local</span> tdiff=$((<span class=\"variable\">$end_time</span>-<span class=\"variable\">$start_time</span>))</span><br><span class=\"line\">    <span class=\"built_in\">local</span> hours=$((<span class=\"variable\">$tdiff</span> / 3600 ))</span><br><span class=\"line\">    <span class=\"built_in\">local</span> mins=$(((<span class=\"variable\">$tdiff</span> % 3600) / 60))</span><br><span class=\"line\">    <span class=\"built_in\">local</span> secs=$((<span class=\"variable\">$tdiff</span> % 60))</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$ret</span> <span class=\"_\">-eq</span> 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> -n <span class=\"_\">-e</span> <span class=\"string\">\"#### make completed successfully \"</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> -n <span class=\"_\">-e</span> <span class=\"string\">\"#### make failed to build some targets \"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$hours</span> <span class=\"_\">-gt</span> 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span> <span class=\"string\">\"(%02g:%02g:%02g (hh:mm:ss))\"</span> <span class=\"variable\">$hours</span> <span class=\"variable\">$mins</span> <span class=\"variable\">$secs</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> [ <span class=\"variable\">$mins</span> <span class=\"_\">-gt</span> 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span> <span class=\"string\">\"(%02g:%02g (mm:ss))\"</span> <span class=\"variable\">$mins</span> <span class=\"variable\">$secs</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> [ <span class=\"variable\">$secs</span> <span class=\"_\">-gt</span> 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span> <span class=\"string\">\"(%s seconds)\"</span> <span class=\"variable\">$secs</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"_\">-e</span> <span class=\"string\">\" ####\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$ret</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>提示：</strong>具体功能还需要分析。</p>\n</blockquote>\n<h2 id=\"设置编译环境的java-home\"><a href=\"#设置编译环境的java-home\" class=\"headerlink\" title=\"设置编译环境的java home\"></a>设置编译环境的java home</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Force JAVA_HOME to point to java 1.7 or java 1.6  if it isn't already set.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Note that the MacOS path for java 1.7 includes a minor revision number (sigh).</span></span><br><span class=\"line\"><span class=\"comment\"># For some reason, installing the JDK doesn't make it show up in the</span></span><br><span class=\"line\"><span class=\"comment\"># JavaVM.framework/Versions/1.7/ folder.</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">set_java_home</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\"># Clear the existing JAVA_HOME value if we set it ourselves, so that</span></span><br><span class=\"line\">    <span class=\"comment\"># we can reset it later, depending on the version of java the build</span></span><br><span class=\"line\">    <span class=\"comment\"># system needs.</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\"># If we don't do this, the JAVA_HOME value set by the first call to</span></span><br><span class=\"line\">    <span class=\"comment\"># build/envsetup.sh will persist forever.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -n <span class=\"string\">\"<span class=\"variable\">$ANDROID_SET_JAVA_HOME</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"built_in\">export</span> JAVA_HOME=<span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! <span class=\"string\">\"<span class=\"variable\">$JAVA_HOME</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> [ -n <span class=\"string\">\"<span class=\"variable\">$LEGACY_USE_JAVA6</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> `uname <span class=\"_\">-s</span>` <span class=\"keyword\">in</span></span><br><span class=\"line\">            Darwin)</span><br><span class=\"line\">                <span class=\"built_in\">export</span> JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home</span><br><span class=\"line\">                ;;</span><br><span class=\"line\">            *)</span><br><span class=\"line\">                <span class=\"built_in\">export</span> JAVA_HOME=/usr/lib/jvm/java-6-sun</span><br><span class=\"line\">                ;;</span><br><span class=\"line\">        <span class=\"keyword\">esac</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> `uname <span class=\"_\">-s</span>` <span class=\"keyword\">in</span></span><br><span class=\"line\">            Darwin)</span><br><span class=\"line\">                <span class=\"built_in\">export</span> JAVA_HOME=$(/usr/libexec/java_home -v 1.7)</span><br><span class=\"line\">                ;;</span><br><span class=\"line\">            *)</span><br><span class=\"line\">                <span class=\"built_in\">export</span> JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64</span><br><span class=\"line\">                ;;</span><br><span class=\"line\">        <span class=\"keyword\">esac</span></span><br><span class=\"line\">      <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># Keep track of the fact that we set JAVA_HOME ourselves, so that</span></span><br><span class=\"line\">      <span class=\"comment\"># we can change it on the next envsetup.sh, if required.</span></span><br><span class=\"line\">      <span class=\"built_in\">export</span> ANDROID_SET_JAVA_HOME=<span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"到某个文件所在的目录下\"><a href=\"#到某个文件所在的目录下\" class=\"headerlink\" title=\"到某个文件所在的目录下\"></a>到某个文件所在的目录下</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">godir</span></span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ -z <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Usage: godir &lt;regex&gt;\"</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    T=$(gettop)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ ! <span class=\"_\">-f</span> <span class=\"variable\">$T</span>/filelist ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> -n <span class=\"string\">\"Creating index...\"</span></span><br><span class=\"line\">        (\\<span class=\"built_in\">cd</span> <span class=\"variable\">$T</span>; find . -wholename ./out -prune -o -wholename ./.repo -prune -o -type f &gt; filelist)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\" Done\"</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">local</span> lines</span><br><span class=\"line\">    lines=($(\\grep <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"variable\">$T</span>/filelist | sed <span class=\"_\">-e</span> <span class=\"string\">'s/\\/[^/]*$//'</span> | sort | uniq))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;#lines[@]&#125;</span> = 0 ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Not found\"</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">local</span> pathname</span><br><span class=\"line\">    <span class=\"built_in\">local</span> choice</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;#lines[@]&#125;</span> &gt; 1 ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> [[ -z <span class=\"string\">\"<span class=\"variable\">$pathname</span>\"</span> ]]; <span class=\"keyword\">do</span></span><br><span class=\"line\">            <span class=\"built_in\">local</span> index=1</span><br><span class=\"line\">            <span class=\"built_in\">local</span> line</span><br><span class=\"line\">            <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;lines[@]&#125;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">                <span class=\"built_in\">printf</span> <span class=\"string\">\"%6s %s\\n\"</span> <span class=\"string\">\"[<span class=\"variable\">$index</span>]\"</span> <span class=\"variable\">$line</span></span><br><span class=\"line\">                index=$((<span class=\"variable\">$index</span> + 1))</span><br><span class=\"line\">            <span class=\"keyword\">done</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span> -n <span class=\"string\">\"Select one: \"</span></span><br><span class=\"line\">            <span class=\"built_in\">unset</span> choice</span><br><span class=\"line\">            <span class=\"built_in\">read</span> choice</span><br><span class=\"line\">            <span class=\"keyword\">if</span> [[ <span class=\"variable\">$choice</span> <span class=\"_\">-gt</span> <span class=\"variable\">$&#123;#lines[@]&#125;</span> || <span class=\"variable\">$choice</span> <span class=\"_\">-lt</span> 1 ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"string\">\"Invalid choice\"</span></span><br><span class=\"line\">                <span class=\"built_in\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">fi</span></span><br><span class=\"line\">            pathname=<span class=\"variable\">$&#123;lines[$(($choice-1))]&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">done</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        pathname=<span class=\"variable\">$&#123;lines[0]&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    \\<span class=\"built_in\">cd</span> <span class=\"variable\">$T</span>/<span class=\"variable\">$pathname</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"具体参数查看runtest-h\"><a href=\"#具体参数查看runtest-h\" class=\"headerlink\" title=\"具体参数查看runtest -h\"></a>具体参数查看runtest -h</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># simple shortcut to the runtest command</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">runtest</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    T=$(gettop)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! <span class=\"string\">\"<span class=\"variable\">$T</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Couldn't locate the top of the tree.  Try setting TOP.\"</span> &gt;&amp;2</span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    (<span class=\"string\">\"<span class=\"variable\">$T</span>\"</span>/development/testrunner/runtest.py <span class=\"variable\">$@</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"smoketest\"><a href=\"#smoketest\" class=\"headerlink\" title=\"smoketest\"></a>smoketest</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">smoketest</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! <span class=\"string\">\"<span class=\"variable\">$ANDROID_PRODUCT_OUT</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Couldn't locate output files.  Try running 'lunch' first.\"</span> &gt;&amp;2</span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    T=$(gettop)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! <span class=\"string\">\"<span class=\"variable\">$T</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Couldn't locate the top of the tree.  Try setting TOP.\"</span> &gt;&amp;2</span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    (\\<span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$T</span>\"</span> &amp;&amp; mmm tests/SmokeTest) &amp;&amp;</span><br><span class=\"line\">      adb uninstall com.android.smoketest &gt; /dev/null &amp;&amp;</span><br><span class=\"line\">      adb uninstall com.android.smoketest.tests &gt; /dev/null &amp;&amp;</span><br><span class=\"line\">      adb install <span class=\"variable\">$ANDROID_PRODUCT_OUT</span>/data/app/SmokeTestApp.apk &amp;&amp;</span><br><span class=\"line\">      adb install <span class=\"variable\">$ANDROID_PRODUCT_OUT</span>/data/app/SmokeTest.apk &amp;&amp;</span><br><span class=\"line\">      adb shell am instrument -w com.android.smoketest.tests/android.test.InstrumentationTestRunner</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用的安卓物理键模拟及viewserver\"><a href=\"#常用的安卓物理键模拟及viewserver\" class=\"headerlink\" title=\"常用的安卓物理键模拟及viewserver\"></a>常用的安卓物理键模拟及viewserver</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启viewServer</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">startviewserver</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> port=4939</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> <span class=\"_\">-gt</span> 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">            port=<span class=\"variable\">$1</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    adb shell service call window 1 i32 <span class=\"variable\">$port</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 停止viewServer</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">stopviewserver</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    adb shell service call window 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 查看viewServer状态</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">isviewserverstarted</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    adb shell service call window 3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 相当于按下设备home键、back键、menu键</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> key_home()</span><br><span class=\"line\"><span class=\"keyword\">function</span> key_back()</span><br><span class=\"line\"><span class=\"keyword\">function</span> key_menu()</span><br></pre></td></tr></table></figure>\n<p>##获取手机中的bug日志<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">getbugreports</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> reports=(`adb shell ls /sdcard/bugreports | tr <span class=\"_\">-d</span> <span class=\"string\">'\\r'</span>`)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! <span class=\"string\">\"<span class=\"variable\">$reports</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Could not locate any bugreports.\"</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">local</span> report</span><br><span class=\"line\">    <span class=\"keyword\">for</span> report <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;reports[@]&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"/sdcard/bugreports/<span class=\"variable\">$&#123;report&#125;</span>\"</span></span><br><span class=\"line\">        adb pull /sdcard/bugreports/<span class=\"variable\">$&#123;report&#125;</span> <span class=\"variable\">$&#123;report&#125;</span></span><br><span class=\"line\">        gunzip <span class=\"variable\">$&#123;report&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"得到sdcard的路径，屏幕截图路径和最后一张截图\"><a href=\"#得到sdcard的路径，屏幕截图路径和最后一张截图\" class=\"headerlink\" title=\"得到sdcard的路径，屏幕截图路径和最后一张截图\"></a>得到sdcard的路径，屏幕截图路径和最后一张截图</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> getsdcardpath()</span><br><span class=\"line\"><span class=\"keyword\">function</span> getscreenshotpath()</span><br><span class=\"line\"><span class=\"keyword\">function</span> getlastscreenshot()</span><br></pre></td></tr></table></figure>\n<h2 id=\"dump某一时刻的trace数据\"><a href=\"#dump某一时刻的trace数据\" class=\"headerlink\" title=\"dump某一时刻的trace数据\"></a>dump某一时刻的trace数据</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">tracedmdump</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    T=$(gettop)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! <span class=\"string\">\"<span class=\"variable\">$T</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Couldn't locate the top of the tree.  Try setting TOP.\"</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">local</span> prebuiltdir=$(getprebuilt)</span><br><span class=\"line\">    <span class=\"built_in\">local</span> arch=$(gettargetarch)</span><br><span class=\"line\">    <span class=\"built_in\">local</span> KERNEL=<span class=\"variable\">$T</span>/prebuilts/qemu-kernel/<span class=\"variable\">$arch</span>/vmlinux-qemu</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">local</span> TRACE=<span class=\"variable\">$1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! <span class=\"string\">\"<span class=\"variable\">$TRACE</span>\"</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"usage:  tracedmdump  tracename\"</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! -r <span class=\"string\">\"<span class=\"variable\">$KERNEL</span>\"</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Error: cannot find kernel: '<span class=\"variable\">$KERNEL</span>'\"</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">local</span> BASETRACE=$(basename <span class=\"variable\">$TRACE</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$BASETRACE</span>\"</span> = <span class=\"string\">\"<span class=\"variable\">$TRACE</span>\"</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">        TRACE=<span class=\"variable\">$ANDROID_PRODUCT_OUT</span>/traces/<span class=\"variable\">$TRACE</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"post-processing traces...\"</span></span><br><span class=\"line\">    rm <span class=\"_\">-f</span> <span class=\"variable\">$TRACE</span>/qtrace.dexlist</span><br><span class=\"line\">    post_trace <span class=\"variable\">$TRACE</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $? <span class=\"_\">-ne</span> 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"***\"</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"*** Error: malformed trace.  Did you remember to exit the emulator?\"</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"***\"</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"generating dexlist output...\"</span></span><br><span class=\"line\">    /bin/ls <span class=\"variable\">$ANDROID_PRODUCT_OUT</span>/system/framework/*.jar <span class=\"variable\">$ANDROID_PRODUCT_OUT</span>/system/app/*.apk <span class=\"variable\">$ANDROID_PRODUCT_OUT</span>/data/app/*.apk 2&gt;/dev/null | xargs dexlist &gt; <span class=\"variable\">$TRACE</span>/qtrace.dexlist</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"generating dmtrace data...\"</span></span><br><span class=\"line\">    q2dm -r <span class=\"variable\">$ANDROID_PRODUCT_OUT</span>/symbols <span class=\"variable\">$TRACE</span> <span class=\"variable\">$KERNEL</span> <span class=\"variable\">$TRACE</span>/dmtrace || <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"generating html file...\"</span></span><br><span class=\"line\">    dmtracedump -h <span class=\"variable\">$TRACE</span>/dmtrace &gt;| <span class=\"variable\">$TRACE</span>/dmtrace.html || <span class=\"built_in\">return</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"done, see <span class=\"variable\">$TRACE</span>/dmtrace.html for details\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"or run:\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"    traceview <span class=\"variable\">$TRACE</span>/dmtrace\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询-gradle、-java-等文件中某个字符串在文件中的位置\"><a href=\"#查询-gradle、-java-等文件中某个字符串在文件中的位置\" class=\"headerlink\" title=\"查询.gradle、.java 等文件中某个字符串在文件中的位置\"></a>查询.gradle、.java 等文件中某个字符串在文件中的位置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">ggrep</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    find . -name .repo -prune -o -name .git -prune -o -name out -prune -o -type f -name <span class=\"string\">\"*\\.gradle\"</span> -print0 | xargs -0 grep --color -n <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">jgrep</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    find . -name .repo -prune -o -name .git -prune -o -name out -prune -o -type f -name <span class=\"string\">\"*\\.java\"</span> -print0 | xargs -0 grep --color -n <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">cgrep</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    find . -name .repo -prune -o -name .git -prune -o -name out -prune -o -type f \\( -name <span class=\"string\">'*.c'</span> -o -name <span class=\"string\">'*.cc'</span> -o -name <span class=\"string\">'*.cpp'</span> -o -name <span class=\"string\">'*.h'</span> \\) -print0 | xargs -0 grep --color -n <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">resgrep</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> dir <span class=\"keyword\">in</span> `find . -name .repo -prune -o -name .git -prune -o -name out -prune -o -name res -type d`; <span class=\"keyword\">do</span> find <span class=\"variable\">$dir</span> -type f -name <span class=\"string\">'*\\.xml'</span> -print0 | xargs -0 grep --color -n <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>; <span class=\"keyword\">done</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">mangrep</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    find . -name .repo -prune -o -name .git -prune -o -path ./out -prune -o -type f -name <span class=\"string\">'AndroidManifest.xml'</span> -print0 | xargs -0 grep --color -n <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">sepgrep</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    find . -name .repo -prune -o -name .git -prune -o -path ./out -prune -o -name sepolicy -type d -print0 | xargs -0 grep --color -n -r --exclude-dir=\\.git <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 得到顶级目录路径</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> gettop</span><br><span class=\"line\"><span class=\"comment\"># 找到make文件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> findmakefile()</span><br><span class=\"line\"><span class=\"comment\"># 当前目录下编译执行，相当于在android目录下执行make</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> m()</span><br><span class=\"line\"><span class=\"comment\"># 执行当前目录下最近的make文件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> mm()</span><br><span class=\"line\"><span class=\"comment\"># 在android目录下，执行某个文件夹下的make文件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> mmm()</span><br><span class=\"line\"><span class=\"comment\"># Builds all of the modules in the current directory, and their dependencies.</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> mma()</span><br><span class=\"line\"><span class=\"comment\"># Builds all of the modules in the supplied directories, and their dependencies.</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> mmma()</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/AndroidStudio_VS_eclipse/migration_guide_auto_scroll_from_source.png","slug":"migration_guide_auto_scroll_from_source.png","post":"cipkjorwl00039x2nwkyq9hcj","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/20-unwrap.gif","slug":"20-unwrap.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/40-returntoeditor.gif","slug":"40-returntoeditor.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/04-callinghierarchy.gif","slug":"04-callinghierarchy.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/07-bookmarks.gif","slug":"07-bookmarks.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/27-evaluateexpression.gif","slug":"27-evaluateexpression.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/42-hideallwindows.gif","slug":"42-hideallwindows.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/46-switcher.gif","slug":"46-switcher.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/53-extractmethod.gif","slug":"53-extractmethod.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/56-pullupdown.gif","slug":"56-pullupdown.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_VS_eclipse/migration_guide_debugger_1.png","slug":"migration_guide_debugger_1.png","post":"cipkjorwl00039x2nwkyq9hcj","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/31-analyzedataflow.gif","slug":"31-analyzedataflow.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/envsetup_common_command/post-bg-unix-linux.jpg","slug":"post-bg-unix-linux.jpg","post":"cipkjorwq00069x2nx9ienwtj","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_VS_eclipse/post-bg-2015.jpg","slug":"post-bg-2015.jpg","post":"cipkjorwl00039x2nwkyq9hcj","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/01-highlight.gif","slug":"01-highlight.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/02-move_between_methods.gif","slug":"02-move_between_methods.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/03-filestructure.gif","slug":"03-filestructure.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/05-quickdefinition.gif","slug":"05-quickdefinition.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/06-codefolding.gif","slug":"06-codefolding.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/08-findaction.gif","slug":"08-findaction.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/09-movelines.gif","slug":"09-movelines.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/10-deleteline.gif","slug":"10-deleteline.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/11-duplicate_lines.gif","slug":"11-duplicate_lines.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/12-expand_shrink_selection.gif","slug":"12-expand_shrink_selection.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/13-surround_with.gif","slug":"13-surround_with.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/14-recents.gif","slug":"14-recents.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/15-live_templates.gif","slug":"15-live_templates.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/15-movemethods.gif","slug":"15-movemethods.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/16-completestatement.gif","slug":"16-completestatement.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/17-navigate-previous-changes.gif","slug":"17-navigate-previous-changes.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/18-joinlines.gif","slug":"18-joinlines.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/19-select-in.gif","slug":"19-select-in.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/21-togglebreakpoints.gif","slug":"21-togglebreakpoints.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/22-conditionalbreakpoint.gif","slug":"22-conditionalbreakpoint.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/23-loggingbreakpoints.gif","slug":"23-loggingbreakpoints.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/24-temporarybreakpoints.gif","slug":"24-temporarybreakpoints.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/25-disablebreakpoint.gif","slug":"25-disablebreakpoint.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/28-mouse_evaluate_expression.gif","slug":"28-mouse_evaluate_expression.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/29-markobject.gif","slug":"29-markobject.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/30-analyzestacktrace.gif","slug":"30-analyzestacktrace.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/32-multiselection.gif","slug":"32-multiselection.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/33-columnselection.gif","slug":"33-columnselection.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/33-postfixcompletion.gif","slug":"33-postfixcompletion.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/34-comparewithclipboard.gif","slug":"34-comparewithclipboard.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/35-stoprocess.gif","slug":"35-stoprocess.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/36-executionpoint.gif","slug":"36-executionpoint.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/37-vcspopup.gif","slug":"37-vcspopup.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/38-comparewithbranch.gif","slug":"38-comparewithbranch.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/39-navigatetoparent.gif","slug":"39-navigatetoparent.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/41-lasttoolwindow.gif","slug":"41-lasttoolwindow.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/43-openpanelbynumber.gif","slug":"43-openpanelbynumber.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/44-parameterinfo.gif","slug":"44-parameterinfo.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/45-codecompletionentertab.gif","slug":"45-codecompletionentertab.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/47-contextinfo.gif","slug":"47-contextinfo.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/48-refactorthis.png","slug":"48-refactorthis.png","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/49-recentlyedited.gif","slug":"49-recentlyedited.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/51-extractvariable.gif","slug":"51-extractvariable.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/52-extractparam.gif","slug":"52-extractparam.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/54-inline.gif","slug":"54-inline.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/55-rename.gif","slug":"55-rename.gif","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/migration_guide_save_settings.png","slug":"migration_guide_save_settings.png","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/post-bg-androidstudio.jpg","slug":"post-bg-androidstudio.jpg","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/studio-debug-settings-icon.png","slug":"studio-debug-settings-icon.png","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/summary1.png","slug":"summary1.png","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio_shortcut_key/summary_2.png","slug":"summary_2.png","post":"cipkjorwf00019x2n4hp2gusb","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cipkjorwf00019x2n4hp2gusb","tag_id":"cipkjorwn00049x2n0xb2d8mb","_id":"cipkjorwt00089x2nh1up12o2"},{"post_id":"cipkjorwl00039x2nwkyq9hcj","tag_id":"cipkjorwn00049x2n0xb2d8mb","_id":"cipkjorx0000a9x2ng66je4of"},{"post_id":"cipkjorwq00069x2nx9ienwtj","tag_id":"cipkjorwu00099x2nzcpvx6dm","_id":"cipkjorx5000b9x2nnmstf771"}],"Tag":[{"name":"AndroidStudio","_id":"cipkjorwn00049x2n0xb2d8mb"},{"name":"android open source","_id":"cipkjorwu00099x2nzcpvx6dm"}]}}